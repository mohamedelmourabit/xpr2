{"version":3,"file":"ngx-mat-daterange-picker.js","sources":["ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/services/range-store.service.ts","ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/services/config-store.service.ts","ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/picker-overlay/picker-overlay.animations.ts","ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/picker-overlay/picker-overlay.component.ts","ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/services/calendar-overlay.service.ts","ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/ngx-mat-drp/ngx-mat-drp.component.ts","ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/calendar-wrapper/calendar-wrapper.component.ts","ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/presets/presets.component.ts","ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/ngx-mat-drp.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject, InjectionToken } from '@angular/core';\nimport { Range } from '../model/model';\nimport { Subject } from 'rxjs';\n/* import { DATE } from '../ngx-drp.module'; */\n\nexport const DATE = new InjectionToken<Date>('date');\n\n@Injectable()\nexport class RangeStoreService {\n  rangeUpdate$: Subject<Range> = new Subject<Range>();\n\n  constructor(\n    @Inject(DATE) private _fromDate: Date,\n    @Inject(DATE) private _toDate: Date\n  ) {}\n\n  /* set fromDate(fromDate:Date) {\n    this._fromDate = fromDate;\n  } */\n\n  get fromDate(): Date {\n    return this._fromDate;\n  }\n\n  /* set toDate(toDate:Date) {\n    this._toDate = toDate;\n  } */\n\n  get toDate(): Date {\n    return this._toDate;\n  }\n\n  updateRange(fromDate: Date = this._fromDate, toDate: Date = this._toDate) {\n    this._fromDate = fromDate;\n    this._toDate = toDate;\n    this.rangeUpdate$.next({ fromDate: this._fromDate, toDate: this._toDate });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NgxDrpOptions } from '../model/model';\n\n@Injectable()\nexport class ConfigStoreService {\n  private _ngxDrpOptions: NgxDrpOptions;\n  private defaultOptions = {\n    excludeWeekends: false,\n    animation: true,\n    locale: 'en-US',\n    fromMinMax: { fromDate: null, toDate: null },\n    toMinMax: { fromDate: null, toDate: null }\n  };\n\n  constructor() {}\n\n  get ngxDrpOptions(): NgxDrpOptions {\n    return this._ngxDrpOptions;\n  }\n\n  set ngxDrpOptions(options: NgxDrpOptions) {\n    this._ngxDrpOptions = { ...this.defaultOptions, ...options };\n  }\n}\n","import {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group\n} from '@angular/animations';\n\nexport const pickerOverlayAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the picker overlay content. */\n  transformPanel: trigger('transformPickerOverlay', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ])\n};\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { PresetItem, NgxDrpOptions } from '../model/model';\nimport { RangeStoreService } from '../services/range-store.service';\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { ConfigStoreService } from '../services/config-store.service';\nimport { pickerOverlayAnimations } from './picker-overlay.animations';\n\n@Component({\n  selector: 'ngx-mat-drp-picker-overlay',\n  template: `<div [@transformPickerOverlay]=\"shouldAnimate\" class=\"ngx-mat-drp-calendar-container\">\n\n  <div class=\"ngx-mat-drp-calendar-item\">\n    <calendar-wrapper \n    [prefixLabel]=\"startDatePrefix\"\n    [selectedDate]=\"fromDate\"\n    [minDate]=\"fromMinDate\"\n    [maxDate]=\"fromMaxDate\"\n    (selectedDateChange)=\"updateFromDate($event)\">\n  </calendar-wrapper>\n  </div>\n  <div class=\"ngx-mat-drp-calendar-item\">\n    <calendar-wrapper \n    [prefixLabel]=\"endDatePrefix\"\n    [selectedDate]=\"toDate\"\n    [minDate]=\"toMinDate\"\n    [maxDate]=\"toMaxDate\" \n    (selectedDateChange)=\"updateToDate($event)\">\n  </calendar-wrapper>\n  </div>\n  <div class=\"ngx-mat-drp-calendar-item\">\n    <div class=\"ngx-mat-drp-menu\">\n      <mat-drp-presets [presets]=\"presets\" (presetChanged)=\"updateRangeByPreset($event)\"></mat-drp-presets>\n      <div class=\"ngx-mat-drp-controls\">\n        <button mat-button color=\"primary\" (click)=\"applyNewDates($event)\">{{applyLabel}}</button>\n        <button mat-button (click)=\"discardNewDates($event)\">{{cancelLabel}}</button>\n      </div>\n    </div>\n  </div>\n</div>\n`,\n  styles: [`.ngx-mat-drp-calendar-container{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-pack:distribute;justify-content:space-around;min-width:650px;height:300px}.ngx-mat-drp-calendar-item{-ms-flex-preferred-size:33.33%;flex-basis:33.33%;min-width:210px;padding:1em;font-family:Roboto,\"Helvetica Neue\",sans-serif;font-size:14px;font-weight:400}.ngx-mat-drp-menu{height:100%}.ngx-mat-drp-controls{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-pack:distribute;justify-content:space-around;margin:10% auto}.ngx-mat-drp-overlay{-webkit-box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);background:#fff;border-radius:2px}.ngx-mat-drp-overlay-backdrop{background-color:rgba(0,0,0,.2);opacity:.2}`],\n  animations: [pickerOverlayAnimations.transformPanel],\n  encapsulation: ViewEncapsulation.None\n})\nexport class PickerOverlayComponent implements OnInit {\n  fromDate: Date;\n  toDate: Date;\n  fromMinDate: Date;\n  fromMaxDate: Date;\n  toMinDate: Date;\n  toMaxDate: Date;\n  presets: Array<PresetItem> = [];\n  startDatePrefix: string;\n  endDatePrefix: string;\n  applyLabel: string;\n  cancelLabel: string;\n  shouldAnimate: string;\n\n  constructor(\n    private rangeStoreService: RangeStoreService,\n    private configStoreService: ConfigStoreService,\n    private overlayRef: OverlayRef\n  ) {}\n\n  ngOnInit() {\n    this.fromDate = this.rangeStoreService.fromDate;\n    this.toDate = this.rangeStoreService.toDate;\n    this.startDatePrefix = this.configStoreService.ngxDrpOptions.startDatePrefix || 'FROM:';\n    this.endDatePrefix = this.configStoreService.ngxDrpOptions.endDatePrefix || 'TO:';\n    this.applyLabel = this.configStoreService.ngxDrpOptions.applyLabel || 'Apply';\n    this.cancelLabel = this.configStoreService.ngxDrpOptions.cancelLabel || 'Cancel';\n    this.presets = this.configStoreService.ngxDrpOptions.presets;\n    this.shouldAnimate = this.configStoreService.ngxDrpOptions.animation\n      ? 'enter'\n      : 'noop';\n    ({\n      fromDate: this.fromMinDate,\n      toDate: this.fromMaxDate\n    } = this.configStoreService.ngxDrpOptions.fromMinMax);\n    ({\n      fromDate: this.toMinDate,\n      toDate: this.toMaxDate\n    } = this.configStoreService.ngxDrpOptions.toMinMax);\n  }\n\n  updateFromDate(date) {\n    this.fromDate = date;\n  }\n\n  updateToDate(date) {\n    this.toDate = date;\n  }\n\n  updateRangeByPreset(presetItem: PresetItem) {\n    this.updateFromDate(presetItem.range.fromDate);\n    this.updateToDate(presetItem.range.toDate);\n  }\n\n  applyNewDates(e) {\n    this.rangeStoreService.updateRange(this.fromDate, this.toDate);\n    this.disposeOverLay();\n  }\n\n  discardNewDates(e) {\n    // this.rangeStoreService.updateRange();\n    this.disposeOverLay();\n  }\n\n  private disposeOverLay() {\n    this.overlayRef.dispose();\n  }\n}\n","import { Injectable, ElementRef, Injector } from '@angular/core';\nimport { Overlay, OverlayConfig, OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal, PortalInjector } from '@angular/cdk/portal';\nimport { NgxDrpOptions, CalendarOverlayConfig } from '../model/model';\nimport { takeWhile } from 'rxjs/operators';\nimport { PickerOverlayComponent } from '../picker-overlay/picker-overlay.component';\n\nconst DEFAULT_CONFIG: CalendarOverlayConfig = {\n  panelClass: 'ngx-mat-drp-overlay',\n  hasBackdrop: true,\n  backdropClass: 'ngx-mat-drp-overlay-backdrop',\n  shouldCloseOnBackdropClick: true\n};\n\n@Injectable()\nexport class CalendarOverlayService {\n  private hostElemRef: ElementRef;\n\n  constructor(private overlay: Overlay, private injector: Injector) {}\n\n  open(\n    config: CalendarOverlayConfig = {},\n    hostElemRef: ElementRef\n  ): OverlayRef {\n    this.hostElemRef = hostElemRef;\n    const overlayConfig = { ...DEFAULT_CONFIG, ...config };\n    const overlayRef = this.createOverlay(overlayConfig);\n    const portalInjector = this.createInjector(overlayRef);\n    const calendarPortal = new ComponentPortal(\n      PickerOverlayComponent,\n      null,\n      portalInjector\n    );\n    overlayRef.attach(calendarPortal);\n\n    overlayRef\n      .backdropClick()\n      .pipe(takeWhile(() => overlayConfig.shouldCloseOnBackdropClick))\n      .subscribe(() => overlayRef.dispose());\n\n    return overlayRef;\n  }\n\n  private createOverlay(config: CalendarOverlayConfig): OverlayRef {\n    const overlayConfig = this.getOverlayConfig(config);\n    return this.overlay.create(overlayConfig);\n  }\n\n  private getOverlayConfig(config: CalendarOverlayConfig): OverlayConfig {\n    const positionStrategy = this.overlay\n      .position()\n      .flexibleConnectedTo(this.hostElemRef)\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withDefaultOffsetY(12)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n\n    const overlayConfig = new OverlayConfig({\n      hasBackdrop: config.hasBackdrop,\n      backdropClass: config.backdropClass,\n      panelClass: config.panelClass,\n      scrollStrategy: this.overlay.scrollStrategies.block(),\n      positionStrategy\n    });\n\n    return overlayConfig;\n  }\n\n  private createInjector(overlayRef: OverlayRef): PortalInjector {\n    const injectionTokens = new WeakMap();\n    injectionTokens.set(OverlayRef, overlayRef);\n\n    return new PortalInjector(this.injector, injectionTokens);\n  }\n}\n","import {\n  Component,\n  OnInit,\n  ViewChild,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { DatePipe } from '@angular/common';\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { CalendarOverlayService } from '../services/calendar-overlay.service';\nimport { RangeStoreService } from '../services/range-store.service';\nimport { Range, NgxDrpOptions } from '../model/model';\nimport { ConfigStoreService } from '../services/config-store.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'ngx-mat-drp',\n  template: `<div> \n  \n  <mat-form-field class=\"ngx-mat-drp-date-display\">\n    <input class=\"ngx-mat-drp-date-input\"\n          matInput [placeholder]=\"options.placeholder\"\n          [value]=\"selectedDateRange\"\n          [matTooltip]=\"selectedDateRange\"\n          (click)=\"openCalendar($event)\"\n          readonly\n          #calendarInput >\n    <div matSuffix \n          class=\"ngx-mat-drp-calendar\"\n          (click)=\"openCalendar($event)\">\n    </div>\n  </mat-form-field>\n  \n</div>    \n`,\n  styles: [`.ngx-mat-drp-date-display{min-width:230px}.ngx-mat-drp-date-input{text-overflow:ellipsis;color:#4169e1}.ngx-mat-drp-calendar{background-image:url('data:image/svg+xml,<svg fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">    <path d=\"M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z\"/>    <path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>');width:24px;height:24px}`],\n  providers: [\n    CalendarOverlayService,\n    RangeStoreService,\n    ConfigStoreService,\n    DatePipe\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMatDrpComponent implements OnInit, OnDestroy {\n  @ViewChild('calendarInput')\n  calendarInput;\n  @Output()\n  readonly selectedDateRangeChanged: EventEmitter<Range> = new EventEmitter<Range>();\n  @Input()\n  options: NgxDrpOptions;\n  private rangeUpdate$: Subscription;\n  selectedDateRange = '';\n\n  constructor(\n    private changeDetectionRef: ChangeDetectorRef,\n    private calendarOverlayService: CalendarOverlayService,\n    public rangeStoreService: RangeStoreService,\n    public configStoreService: ConfigStoreService,\n    private datePipe: DatePipe\n  ) {}\n\n  ngOnInit() {\n    this.configStoreService.ngxDrpOptions = this.options;\n    this.options.placeholder = this.options.placeholder || 'Choose a date';\n    this.rangeUpdate$ = this.rangeStoreService.rangeUpdate$.subscribe(range => {\n      const from: string = this.formatToDateString(\n        range.fromDate,\n        this.options.format\n      );\n      const to: string = this.formatToDateString(\n        range.toDate,\n        this.options.format\n      );\n      this.selectedDateRange = `${from} - ${to}`;\n      this.selectedDateRangeChanged.emit(range);\n    });\n\n    this.rangeStoreService.updateRange(\n      this.options.range.fromDate,\n      this.options.range.toDate\n    );\n    this.changeDetectionRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    if (this.rangeUpdate$) {\n      this.rangeUpdate$.unsubscribe();\n    }\n  }\n\n  private formatToDateString(date: Date, format: string): string {\n    return this.datePipe.transform(date, format);\n  }\n\n  openCalendar(event) {\n    const overlayRef: OverlayRef = this.calendarOverlayService.open(\n      this.options.calendarOverlayConfig,\n      this.calendarInput\n    );\n  }\n\n  public resetDates(range: Range) {\n    this.rangeStoreService.updateRange(\n      range.fromDate,\n      range.toDate\n    );\n  }\n}\n","import {\n  Component,\n  ViewChild,\n  Output,\n  Input,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  OnChanges,\n  SimpleChanges\n} from '@angular/core';\nimport { MatCalendar } from '@angular/material/datepicker';\nimport { ConfigStoreService } from '../services/config-store.service';\n\n@Component({\n  selector: 'calendar-wrapper',\n  template: `<div>\n\n  <!-- <mat-divider></mat-divider> -->\n  <span class=\"ngx-mat-drp-date-label\">\n    <label>{{prefixLabel}}</label>\n    <label class=\"ngx-mat-drp-selected-date-label\">{{selectedDate | date:dateFormat}}</label>\n  </span>\n  <!-- <mat-divider></mat-divider> -->\n\n  <mat-calendar \n    [startAt]=\"selectedDate\"\n    [selected]=\"selectedDate\"\n    [minDate]=\"minDate\"\n    [maxDate]=\"maxDate\"\n    (selectedChange)=\"onSelectedChange($event)\"\n    (yearSelected)=\"onYearSelected($event)\"\n    (_userSelection)=\"onUserSelection($event)\"\n    [dateFilter]=\"weekendFilter\">\n  </mat-calendar>\n\n</div>`,\n  styles: [`.ngx-mat-drp-date-label{background:#fafafa;margin:15px;padding:4px 2px;width:100%;font-size:14px;font-weight:500}.ngx-mat-drp-selected-date-label{color:rgba(0,0,0,.38);padding-left:5%}`],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CalendarWrapperComponent implements OnChanges {\n  @ViewChild(MatCalendar)\n  matCalendar: MatCalendar<Date>;\n\n  @Output()\n  readonly selectedDateChange: EventEmitter<Date> = new EventEmitter<Date>();\n\n  dateFormat: string;\n  @Input() selectedDate: Date;\n  @Input() prefixLabel: string;\n  @Input() minDate: Date;\n  @Input() maxDate: Date;\n  weekendFilter = (d: Date) => true;\n\n  constructor(private configStore: ConfigStoreService) {\n    this.dateFormat = configStore.ngxDrpOptions.format;\n    if (configStore.ngxDrpOptions.excludeWeekends) {\n      this.weekendFilter = (d: Date): boolean => {\n        const day = d.getDay();\n        return day !== 0 && day !== 6;\n      };\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Necessary to force view refresh\n    this.matCalendar.activeDate = changes.selectedDate.currentValue;\n  }\n\n  onSelectedChange(date) {\n    this.selectedDateChange.emit(date);\n  }\n\n  onYearSelected(e) {}\n\n  onUserSelection(e) {}\n}\n","import {\n  Component,\n  OnInit,\n  Output,\n  EventEmitter,\n  Input,\n  ChangeDetectionStrategy,\n  ViewEncapsulation\n} from '@angular/core';\nimport { PresetItem } from '../model/model';\n\n@Component({\n  selector: 'mat-drp-presets',\n  template: `<div>\n  <ul class=\"ngx-mat-drp-presets-list\">\n    <li *ngFor=\"let preset of presets\" (click)=\"setPresetPeriod(preset)\"> {{preset.presetLabel}} </li>\n  </ul>\n</div>`,\n  styles: [`.ngx-mat-drp-presets-list{list-style-type:none;margin:0;padding:0}.ngx-mat-drp-presets-list li{margin:5px 0;padding:4%;cursor:pointer;background:#fafafa;color:#3f51b5;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ngx-mat-drp-presets-list li:hover{background:#3f51b5;color:#fff}`],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PresetsComponent implements OnInit {\n  @Input()\n  presets: Array<PresetItem>;\n  @Output()\n  readonly presetChanged: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor() {}\n\n  ngOnInit() {}\n\n  setPresetPeriod(event) {\n    this.presetChanged.emit(event);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxMatDrpComponent } from './ngx-mat-drp/ngx-mat-drp.component';\nimport { PickerOverlayComponent } from './picker-overlay/picker-overlay.component';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\n\nimport { CalendarWrapperComponent } from './calendar-wrapper/calendar-wrapper.component';\nimport { PresetsComponent } from './presets/presets.component';\nimport { DATE } from './services/range-store.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatInputModule,\n    MatButtonModule,\n    MatTooltipModule,\n    OverlayModule\n  ],\n  declarations: [\n    NgxMatDrpComponent,\n    CalendarWrapperComponent,\n    PickerOverlayComponent,\n    PresetsComponent\n  ],\n  providers: [\n    {provide: DATE, useValue: new Date()}\n  ],\n  entryComponents: [PickerOverlayComponent],\n  exports: [NgxMatDrpComponent]\n})\nexport class NgxMatDrpModule { }\n"]}