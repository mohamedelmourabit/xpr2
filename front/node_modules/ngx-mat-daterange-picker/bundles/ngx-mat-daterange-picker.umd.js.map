{
  "version": 3,
  "file": "ngx-mat-daterange-picker.umd.js",
  "sources": [
    "ng://ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/ngx-mat-drp.module.ts",
    "ng://ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/presets/presets.component.ts",
    "ng://ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/calendar-wrapper/calendar-wrapper.component.ts",
    "ng://ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/ngx-mat-drp/ngx-mat-drp.component.ts",
    "ng://ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/services/calendar-overlay.service.ts",
    "ng://ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/picker-overlay/picker-overlay.component.ts",
    "ng://ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/picker-overlay/picker-overlay.animations.ts",
    "ng://ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/services/config-store.service.ts",
    "ng://ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/services/range-store.service.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxMatDrpComponent } from './ngx-mat-drp/ngx-mat-drp.component';\nimport { PickerOverlayComponent } from './picker-overlay/picker-overlay.component';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\n\nimport { CalendarWrapperComponent } from './calendar-wrapper/calendar-wrapper.component';\nimport { PresetsComponent } from './presets/presets.component';\nimport { DATE } from './services/range-store.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatInputModule,\n    MatButtonModule,\n    MatTooltipModule,\n    OverlayModule\n  ],\n  declarations: [\n    NgxMatDrpComponent,\n    CalendarWrapperComponent,\n    PickerOverlayComponent,\n    PresetsComponent\n  ],\n  providers: [\n    {provide: DATE, useValue: new Date()}\n  ],\n  entryComponents: [PickerOverlayComponent],\n  exports: [NgxMatDrpComponent]\n})\nexport class NgxMatDrpModule { }\n",
    "import {\n  Component,\n  OnInit,\n  Output,\n  EventEmitter,\n  Input,\n  ChangeDetectionStrategy,\n  ViewEncapsulation\n} from '@angular/core';\nimport { PresetItem } from '../model/model';\n\n@Component({\n  selector: 'mat-drp-presets',\n  template: `<div>\n  <ul class=\"ngx-mat-drp-presets-list\">\n    <li *ngFor=\"let preset of presets\" (click)=\"setPresetPeriod(preset)\"> {{preset.presetLabel}} </li>\n  </ul>\n</div>`,\n  styles: [`.ngx-mat-drp-presets-list{list-style-type:none;margin:0;padding:0}.ngx-mat-drp-presets-list li{margin:5px 0;padding:4%;cursor:pointer;background:#fafafa;color:#3f51b5;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ngx-mat-drp-presets-list li:hover{background:#3f51b5;color:#fff}`],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PresetsComponent implements OnInit {\n  @Input()\n  presets: Array<PresetItem>;\n  @Output()\n  readonly presetChanged: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor() {}\n\n  ngOnInit() {}\n\n  setPresetPeriod(event) {\n    this.presetChanged.emit(event);\n  }\n}\n",
    "import {\n  Component,\n  ViewChild,\n  Output,\n  Input,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  OnChanges,\n  SimpleChanges\n} from '@angular/core';\nimport { MatCalendar } from '@angular/material/datepicker';\nimport { ConfigStoreService } from '../services/config-store.service';\n\n@Component({\n  selector: 'calendar-wrapper',\n  template: `<div>\n\n  <!-- <mat-divider></mat-divider> -->\n  <span class=\"ngx-mat-drp-date-label\">\n    <label>{{prefixLabel}}</label>\n    <label class=\"ngx-mat-drp-selected-date-label\">{{selectedDate | date:dateFormat}}</label>\n  </span>\n  <!-- <mat-divider></mat-divider> -->\n\n  <mat-calendar \n    [startAt]=\"selectedDate\"\n    [selected]=\"selectedDate\"\n    [minDate]=\"minDate\"\n    [maxDate]=\"maxDate\"\n    (selectedChange)=\"onSelectedChange($event)\"\n    (yearSelected)=\"onYearSelected($event)\"\n    (_userSelection)=\"onUserSelection($event)\"\n    [dateFilter]=\"weekendFilter\">\n  </mat-calendar>\n\n</div>`,\n  styles: [`.ngx-mat-drp-date-label{background:#fafafa;margin:15px;padding:4px 2px;width:100%;font-size:14px;font-weight:500}.ngx-mat-drp-selected-date-label{color:rgba(0,0,0,.38);padding-left:5%}`],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CalendarWrapperComponent implements OnChanges {\n  @ViewChild(MatCalendar)\n  matCalendar: MatCalendar<Date>;\n\n  @Output()\n  readonly selectedDateChange: EventEmitter<Date> = new EventEmitter<Date>();\n\n  dateFormat: string;\n  @Input() selectedDate: Date;\n  @Input() prefixLabel: string;\n  @Input() minDate: Date;\n  @Input() maxDate: Date;\n  weekendFilter = (d: Date) => true;\n\n  constructor(private configStore: ConfigStoreService) {\n    this.dateFormat = configStore.ngxDrpOptions.format;\n    if (configStore.ngxDrpOptions.excludeWeekends) {\n      this.weekendFilter = (d: Date): boolean => {\n        const day = d.getDay();\n        return day !== 0 && day !== 6;\n      };\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Necessary to force view refresh\n    this.matCalendar.activeDate = changes.selectedDate.currentValue;\n  }\n\n  onSelectedChange(date) {\n    this.selectedDateChange.emit(date);\n  }\n\n  onYearSelected(e) {}\n\n  onUserSelection(e) {}\n}\n",
    "import {\n  Component,\n  OnInit,\n  ViewChild,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { DatePipe } from '@angular/common';\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { CalendarOverlayService } from '../services/calendar-overlay.service';\nimport { RangeStoreService } from '../services/range-store.service';\nimport { Range, NgxDrpOptions } from '../model/model';\nimport { ConfigStoreService } from '../services/config-store.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'ngx-mat-drp',\n  template: `<div> \n  \n  <mat-form-field class=\"ngx-mat-drp-date-display\">\n    <input class=\"ngx-mat-drp-date-input\"\n          matInput [placeholder]=\"options.placeholder\"\n          [value]=\"selectedDateRange\"\n          [matTooltip]=\"selectedDateRange\"\n          (click)=\"openCalendar($event)\"\n          readonly\n          #calendarInput >\n    <div matSuffix \n          class=\"ngx-mat-drp-calendar\"\n          (click)=\"openCalendar($event)\">\n    </div>\n  </mat-form-field>\n  \n</div>    \n`,\n  styles: [`.ngx-mat-drp-date-display{min-width:230px}.ngx-mat-drp-date-input{text-overflow:ellipsis;color:#4169e1}.ngx-mat-drp-calendar{background-image:url('data:image/svg+xml,<svg fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">    <path d=\"M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z\"/>    <path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>');width:24px;height:24px}`],\n  providers: [\n    CalendarOverlayService,\n    RangeStoreService,\n    ConfigStoreService,\n    DatePipe\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMatDrpComponent implements OnInit, OnDestroy {\n  @ViewChild('calendarInput')\n  calendarInput;\n  @Output()\n  readonly selectedDateRangeChanged: EventEmitter<Range> = new EventEmitter<Range>();\n  @Input()\n  options: NgxDrpOptions;\n  private rangeUpdate$: Subscription;\n  selectedDateRange = '';\n\n  constructor(\n    private changeDetectionRef: ChangeDetectorRef,\n    private calendarOverlayService: CalendarOverlayService,\n    public rangeStoreService: RangeStoreService,\n    public configStoreService: ConfigStoreService,\n    private datePipe: DatePipe\n  ) {}\n\n  ngOnInit() {\n    this.configStoreService.ngxDrpOptions = this.options;\n    this.options.placeholder = this.options.placeholder || 'Choose a date';\n    this.rangeUpdate$ = this.rangeStoreService.rangeUpdate$.subscribe(range => {\n      const from: string = this.formatToDateString(\n        range.fromDate,\n        this.options.format\n      );\n      const to: string = this.formatToDateString(\n        range.toDate,\n        this.options.format\n      );\n      this.selectedDateRange = `${from} - ${to}`;\n      this.selectedDateRangeChanged.emit(range);\n    });\n\n    this.rangeStoreService.updateRange(\n      this.options.range.fromDate,\n      this.options.range.toDate\n    );\n    this.changeDetectionRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    if (this.rangeUpdate$) {\n      this.rangeUpdate$.unsubscribe();\n    }\n  }\n\n  private formatToDateString(date: Date, format: string): string {\n    return this.datePipe.transform(date, format);\n  }\n\n  openCalendar(event) {\n    const overlayRef: OverlayRef = this.calendarOverlayService.open(\n      this.options.calendarOverlayConfig,\n      this.calendarInput\n    );\n  }\n\n  public resetDates(range: Range) {\n    this.rangeStoreService.updateRange(\n      range.fromDate,\n      range.toDate\n    );\n  }\n}\n",
    "import { Injectable, ElementRef, Injector } from '@angular/core';\nimport { Overlay, OverlayConfig, OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal, PortalInjector } from '@angular/cdk/portal';\nimport { NgxDrpOptions, CalendarOverlayConfig } from '../model/model';\nimport { takeWhile } from 'rxjs/operators';\nimport { PickerOverlayComponent } from '../picker-overlay/picker-overlay.component';\n\nconst DEFAULT_CONFIG: CalendarOverlayConfig = {\n  panelClass: 'ngx-mat-drp-overlay',\n  hasBackdrop: true,\n  backdropClass: 'ngx-mat-drp-overlay-backdrop',\n  shouldCloseOnBackdropClick: true\n};\n\n@Injectable()\nexport class CalendarOverlayService {\n  private hostElemRef: ElementRef;\n\n  constructor(private overlay: Overlay, private injector: Injector) {}\n\n  open(\n    config: CalendarOverlayConfig = {},\n    hostElemRef: ElementRef\n  ): OverlayRef {\n    this.hostElemRef = hostElemRef;\n    const overlayConfig = { ...DEFAULT_CONFIG, ...config };\n    const overlayRef = this.createOverlay(overlayConfig);\n    const portalInjector = this.createInjector(overlayRef);\n    const calendarPortal = new ComponentPortal(\n      PickerOverlayComponent,\n      null,\n      portalInjector\n    );\n    overlayRef.attach(calendarPortal);\n\n    overlayRef\n      .backdropClick()\n      .pipe(takeWhile(() => overlayConfig.shouldCloseOnBackdropClick))\n      .subscribe(() => overlayRef.dispose());\n\n    return overlayRef;\n  }\n\n  private createOverlay(config: CalendarOverlayConfig): OverlayRef {\n    const overlayConfig = this.getOverlayConfig(config);\n    return this.overlay.create(overlayConfig);\n  }\n\n  private getOverlayConfig(config: CalendarOverlayConfig): OverlayConfig {\n    const positionStrategy = this.overlay\n      .position()\n      .flexibleConnectedTo(this.hostElemRef)\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withDefaultOffsetY(12)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n\n    const overlayConfig = new OverlayConfig({\n      hasBackdrop: config.hasBackdrop,\n      backdropClass: config.backdropClass,\n      panelClass: config.panelClass,\n      scrollStrategy: this.overlay.scrollStrategies.block(),\n      positionStrategy\n    });\n\n    return overlayConfig;\n  }\n\n  private createInjector(overlayRef: OverlayRef): PortalInjector {\n    const injectionTokens = new WeakMap();\n    injectionTokens.set(OverlayRef, overlayRef);\n\n    return new PortalInjector(this.injector, injectionTokens);\n  }\n}\n",
    "import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { PresetItem, NgxDrpOptions } from '../model/model';\nimport { RangeStoreService } from '../services/range-store.service';\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { ConfigStoreService } from '../services/config-store.service';\nimport { pickerOverlayAnimations } from './picker-overlay.animations';\n\n@Component({\n  selector: 'ngx-mat-drp-picker-overlay',\n  template: `<div [@transformPickerOverlay]=\"shouldAnimate\" class=\"ngx-mat-drp-calendar-container\">\n\n  <div class=\"ngx-mat-drp-calendar-item\">\n    <calendar-wrapper \n    [prefixLabel]=\"startDatePrefix\"\n    [selectedDate]=\"fromDate\"\n    [minDate]=\"fromMinDate\"\n    [maxDate]=\"fromMaxDate\"\n    (selectedDateChange)=\"updateFromDate($event)\">\n  </calendar-wrapper>\n  </div>\n  <div class=\"ngx-mat-drp-calendar-item\">\n    <calendar-wrapper \n    [prefixLabel]=\"endDatePrefix\"\n    [selectedDate]=\"toDate\"\n    [minDate]=\"toMinDate\"\n    [maxDate]=\"toMaxDate\" \n    (selectedDateChange)=\"updateToDate($event)\">\n  </calendar-wrapper>\n  </div>\n  <div class=\"ngx-mat-drp-calendar-item\">\n    <div class=\"ngx-mat-drp-menu\">\n      <mat-drp-presets [presets]=\"presets\" (presetChanged)=\"updateRangeByPreset($event)\"></mat-drp-presets>\n      <div class=\"ngx-mat-drp-controls\">\n        <button mat-button color=\"primary\" (click)=\"applyNewDates($event)\">{{applyLabel}}</button>\n        <button mat-button (click)=\"discardNewDates($event)\">{{cancelLabel}}</button>\n      </div>\n    </div>\n  </div>\n</div>\n`,\n  styles: [`.ngx-mat-drp-calendar-container{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-pack:distribute;justify-content:space-around;min-width:650px;height:300px}.ngx-mat-drp-calendar-item{-ms-flex-preferred-size:33.33%;flex-basis:33.33%;min-width:210px;padding:1em;font-family:Roboto,\"Helvetica Neue\",sans-serif;font-size:14px;font-weight:400}.ngx-mat-drp-menu{height:100%}.ngx-mat-drp-controls{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-pack:distribute;justify-content:space-around;margin:10% auto}.ngx-mat-drp-overlay{-webkit-box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);background:#fff;border-radius:2px}.ngx-mat-drp-overlay-backdrop{background-color:rgba(0,0,0,.2);opacity:.2}`],\n  animations: [pickerOverlayAnimations.transformPanel],\n  encapsulation: ViewEncapsulation.None\n})\nexport class PickerOverlayComponent implements OnInit {\n  fromDate: Date;\n  toDate: Date;\n  fromMinDate: Date;\n  fromMaxDate: Date;\n  toMinDate: Date;\n  toMaxDate: Date;\n  presets: Array<PresetItem> = [];\n  startDatePrefix: string;\n  endDatePrefix: string;\n  applyLabel: string;\n  cancelLabel: string;\n  shouldAnimate: string;\n\n  constructor(\n    private rangeStoreService: RangeStoreService,\n    private configStoreService: ConfigStoreService,\n    private overlayRef: OverlayRef\n  ) {}\n\n  ngOnInit() {\n    this.fromDate = this.rangeStoreService.fromDate;\n    this.toDate = this.rangeStoreService.toDate;\n    this.startDatePrefix = this.configStoreService.ngxDrpOptions.startDatePrefix || 'FROM:';\n    this.endDatePrefix = this.configStoreService.ngxDrpOptions.endDatePrefix || 'TO:';\n    this.applyLabel = this.configStoreService.ngxDrpOptions.applyLabel || 'Apply';\n    this.cancelLabel = this.configStoreService.ngxDrpOptions.cancelLabel || 'Cancel';\n    this.presets = this.configStoreService.ngxDrpOptions.presets;\n    this.shouldAnimate = this.configStoreService.ngxDrpOptions.animation\n      ? 'enter'\n      : 'noop';\n    ({\n      fromDate: this.fromMinDate,\n      toDate: this.fromMaxDate\n    } = this.configStoreService.ngxDrpOptions.fromMinMax);\n    ({\n      fromDate: this.toMinDate,\n      toDate: this.toMaxDate\n    } = this.configStoreService.ngxDrpOptions.toMinMax);\n  }\n\n  updateFromDate(date) {\n    this.fromDate = date;\n  }\n\n  updateToDate(date) {\n    this.toDate = date;\n  }\n\n  updateRangeByPreset(presetItem: PresetItem) {\n    this.updateFromDate(presetItem.range.fromDate);\n    this.updateToDate(presetItem.range.toDate);\n  }\n\n  applyNewDates(e) {\n    this.rangeStoreService.updateRange(this.fromDate, this.toDate);\n    this.disposeOverLay();\n  }\n\n  discardNewDates(e) {\n    // this.rangeStoreService.updateRange();\n    this.disposeOverLay();\n  }\n\n  private disposeOverLay() {\n    this.overlayRef.dispose();\n  }\n}\n",
    "import {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group\n} from '@angular/animations';\n\nexport const pickerOverlayAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the picker overlay content. */\n  transformPanel: trigger('transformPickerOverlay', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ])\n};\n",
    "import { Injectable } from '@angular/core';\nimport { NgxDrpOptions } from '../model/model';\n\n@Injectable()\nexport class ConfigStoreService {\n  private _ngxDrpOptions: NgxDrpOptions;\n  private defaultOptions = {\n    excludeWeekends: false,\n    animation: true,\n    locale: 'en-US',\n    fromMinMax: { fromDate: null, toDate: null },\n    toMinMax: { fromDate: null, toDate: null }\n  };\n\n  constructor() {}\n\n  get ngxDrpOptions(): NgxDrpOptions {\n    return this._ngxDrpOptions;\n  }\n\n  set ngxDrpOptions(options: NgxDrpOptions) {\n    this._ngxDrpOptions = { ...this.defaultOptions, ...options };\n  }\n}\n",
    "import { Injectable, Inject, InjectionToken } from '@angular/core';\nimport { Range } from '../model/model';\nimport { Subject } from 'rxjs';\n/* import { DATE } from '../ngx-drp.module'; */\n\nexport const DATE = new InjectionToken<Date>('date');\n\n@Injectable()\nexport class RangeStoreService {\n  rangeUpdate$: Subject<Range> = new Subject<Range>();\n\n  constructor(\n    @Inject(DATE) private _fromDate: Date,\n    @Inject(DATE) private _toDate: Date\n  ) {}\n\n  /* set fromDate(fromDate:Date) {\n    this._fromDate = fromDate;\n  } */\n\n  get fromDate(): Date {\n    return this._fromDate;\n  }\n\n  /* set toDate(toDate:Date) {\n    this._toDate = toDate;\n  } */\n\n  get toDate(): Date {\n    return this._toDate;\n  }\n\n  updateRange(fromDate: Date = this._fromDate, toDate: Date = this._toDate) {\n    this._fromDate = fromDate;\n    this._toDate = toDate;\n    this.rangeUpdate$.next({ fromDate: this._fromDate, toDate: this._toDate });\n  }\n}\n"
  ],
  "names": [
    "OverlayModule",
    "MatTooltipModule",
    "MatButtonModule",
    "MatInputModule",
    "MatNativeDateModule",
    "MatDatepickerModule",
    "MatFormFieldModule",
    "CommonModule",
    "NgModule",
    "Output",
    "Input",
    "ChangeDetectionStrategy",
    "Component",
    "EventEmitter",
    "ViewChild",
    "MatCalendar",
    "DatePipe",
    "ChangeDetectorRef",
    "Injector",
    "Overlay",
    "Injectable",
    "PortalInjector",
    "OverlayRef",
    "OverlayConfig",
    "takeWhile",
    "ComponentPortal",
    "overlay",
    "ViewEncapsulation",
    "transition",
    "animate",
    "style",
    "group",
    "state",
    "trigger",
    "Inject",
    "Subject",
    "InjectionToken"
  ],
  "mappings": "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"
}
