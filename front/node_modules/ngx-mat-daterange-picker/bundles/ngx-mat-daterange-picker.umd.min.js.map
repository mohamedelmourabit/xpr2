{
  "version": 3,
  "file": "ngx-mat-daterange-picker.umd.min.js",
  "sources": [
    "ng://ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/services/range-store.service.ts",
    "ng://ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/services/config-store.service.ts",
    "ng://ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/picker-overlay/picker-overlay.animations.ts",
    "ng://ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/picker-overlay/picker-overlay.component.ts",
    "ng://ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/services/calendar-overlay.service.ts",
    "ng://ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/ngx-mat-drp/ngx-mat-drp.component.ts",
    "ng://ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/calendar-wrapper/calendar-wrapper.component.ts",
    "ng://ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/presets/presets.component.ts",
    "ng://ngx-mat-daterange-picker/out/src/app/modules/ngx-mat-drp/ngx-mat-drp.module.ts"
  ],
  "sourcesContent": [
    "import { Injectable, Inject, InjectionToken } from '@angular/core';\nimport { Range } from '../model/model';\nimport { Subject } from 'rxjs';\n/* import { DATE } from '../ngx-drp.module'; */\n\nexport const DATE = new InjectionToken<Date>('date');\n\n@Injectable()\nexport class RangeStoreService {\n  rangeUpdate$: Subject<Range> = new Subject<Range>();\n\n  constructor(\n    @Inject(DATE) private _fromDate: Date,\n    @Inject(DATE) private _toDate: Date\n  ) {}\n\n  /* set fromDate(fromDate:Date) {\n    this._fromDate = fromDate;\n  } */\n\n  get fromDate(): Date {\n    return this._fromDate;\n  }\n\n  /* set toDate(toDate:Date) {\n    this._toDate = toDate;\n  } */\n\n  get toDate(): Date {\n    return this._toDate;\n  }\n\n  updateRange(fromDate: Date = this._fromDate, toDate: Date = this._toDate) {\n    this._fromDate = fromDate;\n    this._toDate = toDate;\n    this.rangeUpdate$.next({ fromDate: this._fromDate, toDate: this._toDate });\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { NgxDrpOptions } from '../model/model';\n\n@Injectable()\nexport class ConfigStoreService {\n  private _ngxDrpOptions: NgxDrpOptions;\n  private defaultOptions = {\n    excludeWeekends: false,\n    animation: true,\n    locale: 'en-US',\n    fromMinMax: { fromDate: null, toDate: null },\n    toMinMax: { fromDate: null, toDate: null }\n  };\n\n  constructor() {}\n\n  get ngxDrpOptions(): NgxDrpOptions {\n    return this._ngxDrpOptions;\n  }\n\n  set ngxDrpOptions(options: NgxDrpOptions) {\n    this._ngxDrpOptions = { ...this.defaultOptions, ...options };\n  }\n}\n",
    "import {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group\n} from '@angular/animations';\n\nexport const pickerOverlayAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the picker overlay content. */\n  transformPanel: trigger('transformPickerOverlay', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ])\n};\n",
    "import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { PresetItem, NgxDrpOptions } from '../model/model';\nimport { RangeStoreService } from '../services/range-store.service';\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { ConfigStoreService } from '../services/config-store.service';\nimport { pickerOverlayAnimations } from './picker-overlay.animations';\n\n@Component({\n  selector: 'ngx-mat-drp-picker-overlay',\n  template: `<div [@transformPickerOverlay]=\"shouldAnimate\" class=\"ngx-mat-drp-calendar-container\">\n\n  <div class=\"ngx-mat-drp-calendar-item\">\n    <calendar-wrapper \n    [prefixLabel]=\"startDatePrefix\"\n    [selectedDate]=\"fromDate\"\n    [minDate]=\"fromMinDate\"\n    [maxDate]=\"fromMaxDate\"\n    (selectedDateChange)=\"updateFromDate($event)\">\n  </calendar-wrapper>\n  </div>\n  <div class=\"ngx-mat-drp-calendar-item\">\n    <calendar-wrapper \n    [prefixLabel]=\"endDatePrefix\"\n    [selectedDate]=\"toDate\"\n    [minDate]=\"toMinDate\"\n    [maxDate]=\"toMaxDate\" \n    (selectedDateChange)=\"updateToDate($event)\">\n  </calendar-wrapper>\n  </div>\n  <div class=\"ngx-mat-drp-calendar-item\">\n    <div class=\"ngx-mat-drp-menu\">\n      <mat-drp-presets [presets]=\"presets\" (presetChanged)=\"updateRangeByPreset($event)\"></mat-drp-presets>\n      <div class=\"ngx-mat-drp-controls\">\n        <button mat-button color=\"primary\" (click)=\"applyNewDates($event)\">{{applyLabel}}</button>\n        <button mat-button (click)=\"discardNewDates($event)\">{{cancelLabel}}</button>\n      </div>\n    </div>\n  </div>\n</div>\n`,\n  styles: [`.ngx-mat-drp-calendar-container{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-pack:distribute;justify-content:space-around;min-width:650px;height:300px}.ngx-mat-drp-calendar-item{-ms-flex-preferred-size:33.33%;flex-basis:33.33%;min-width:210px;padding:1em;font-family:Roboto,\"Helvetica Neue\",sans-serif;font-size:14px;font-weight:400}.ngx-mat-drp-menu{height:100%}.ngx-mat-drp-controls{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-pack:distribute;justify-content:space-around;margin:10% auto}.ngx-mat-drp-overlay{-webkit-box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);background:#fff;border-radius:2px}.ngx-mat-drp-overlay-backdrop{background-color:rgba(0,0,0,.2);opacity:.2}`],\n  animations: [pickerOverlayAnimations.transformPanel],\n  encapsulation: ViewEncapsulation.None\n})\nexport class PickerOverlayComponent implements OnInit {\n  fromDate: Date;\n  toDate: Date;\n  fromMinDate: Date;\n  fromMaxDate: Date;\n  toMinDate: Date;\n  toMaxDate: Date;\n  presets: Array<PresetItem> = [];\n  startDatePrefix: string;\n  endDatePrefix: string;\n  applyLabel: string;\n  cancelLabel: string;\n  shouldAnimate: string;\n\n  constructor(\n    private rangeStoreService: RangeStoreService,\n    private configStoreService: ConfigStoreService,\n    private overlayRef: OverlayRef\n  ) {}\n\n  ngOnInit() {\n    this.fromDate = this.rangeStoreService.fromDate;\n    this.toDate = this.rangeStoreService.toDate;\n    this.startDatePrefix = this.configStoreService.ngxDrpOptions.startDatePrefix || 'FROM:';\n    this.endDatePrefix = this.configStoreService.ngxDrpOptions.endDatePrefix || 'TO:';\n    this.applyLabel = this.configStoreService.ngxDrpOptions.applyLabel || 'Apply';\n    this.cancelLabel = this.configStoreService.ngxDrpOptions.cancelLabel || 'Cancel';\n    this.presets = this.configStoreService.ngxDrpOptions.presets;\n    this.shouldAnimate = this.configStoreService.ngxDrpOptions.animation\n      ? 'enter'\n      : 'noop';\n    ({\n      fromDate: this.fromMinDate,\n      toDate: this.fromMaxDate\n    } = this.configStoreService.ngxDrpOptions.fromMinMax);\n    ({\n      fromDate: this.toMinDate,\n      toDate: this.toMaxDate\n    } = this.configStoreService.ngxDrpOptions.toMinMax);\n  }\n\n  updateFromDate(date) {\n    this.fromDate = date;\n  }\n\n  updateToDate(date) {\n    this.toDate = date;\n  }\n\n  updateRangeByPreset(presetItem: PresetItem) {\n    this.updateFromDate(presetItem.range.fromDate);\n    this.updateToDate(presetItem.range.toDate);\n  }\n\n  applyNewDates(e) {\n    this.rangeStoreService.updateRange(this.fromDate, this.toDate);\n    this.disposeOverLay();\n  }\n\n  discardNewDates(e) {\n    // this.rangeStoreService.updateRange();\n    this.disposeOverLay();\n  }\n\n  private disposeOverLay() {\n    this.overlayRef.dispose();\n  }\n}\n",
    "import { Injectable, ElementRef, Injector } from '@angular/core';\nimport { Overlay, OverlayConfig, OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal, PortalInjector } from '@angular/cdk/portal';\nimport { NgxDrpOptions, CalendarOverlayConfig } from '../model/model';\nimport { takeWhile } from 'rxjs/operators';\nimport { PickerOverlayComponent } from '../picker-overlay/picker-overlay.component';\n\nconst DEFAULT_CONFIG: CalendarOverlayConfig = {\n  panelClass: 'ngx-mat-drp-overlay',\n  hasBackdrop: true,\n  backdropClass: 'ngx-mat-drp-overlay-backdrop',\n  shouldCloseOnBackdropClick: true\n};\n\n@Injectable()\nexport class CalendarOverlayService {\n  private hostElemRef: ElementRef;\n\n  constructor(private overlay: Overlay, private injector: Injector) {}\n\n  open(\n    config: CalendarOverlayConfig = {},\n    hostElemRef: ElementRef\n  ): OverlayRef {\n    this.hostElemRef = hostElemRef;\n    const overlayConfig = { ...DEFAULT_CONFIG, ...config };\n    const overlayRef = this.createOverlay(overlayConfig);\n    const portalInjector = this.createInjector(overlayRef);\n    const calendarPortal = new ComponentPortal(\n      PickerOverlayComponent,\n      null,\n      portalInjector\n    );\n    overlayRef.attach(calendarPortal);\n\n    overlayRef\n      .backdropClick()\n      .pipe(takeWhile(() => overlayConfig.shouldCloseOnBackdropClick))\n      .subscribe(() => overlayRef.dispose());\n\n    return overlayRef;\n  }\n\n  private createOverlay(config: CalendarOverlayConfig): OverlayRef {\n    const overlayConfig = this.getOverlayConfig(config);\n    return this.overlay.create(overlayConfig);\n  }\n\n  private getOverlayConfig(config: CalendarOverlayConfig): OverlayConfig {\n    const positionStrategy = this.overlay\n      .position()\n      .flexibleConnectedTo(this.hostElemRef)\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withDefaultOffsetY(12)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n\n    const overlayConfig = new OverlayConfig({\n      hasBackdrop: config.hasBackdrop,\n      backdropClass: config.backdropClass,\n      panelClass: config.panelClass,\n      scrollStrategy: this.overlay.scrollStrategies.block(),\n      positionStrategy\n    });\n\n    return overlayConfig;\n  }\n\n  private createInjector(overlayRef: OverlayRef): PortalInjector {\n    const injectionTokens = new WeakMap();\n    injectionTokens.set(OverlayRef, overlayRef);\n\n    return new PortalInjector(this.injector, injectionTokens);\n  }\n}\n",
    "import {\n  Component,\n  OnInit,\n  ViewChild,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { DatePipe } from '@angular/common';\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { CalendarOverlayService } from '../services/calendar-overlay.service';\nimport { RangeStoreService } from '../services/range-store.service';\nimport { Range, NgxDrpOptions } from '../model/model';\nimport { ConfigStoreService } from '../services/config-store.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'ngx-mat-drp',\n  template: `<div> \n  \n  <mat-form-field class=\"ngx-mat-drp-date-display\">\n    <input class=\"ngx-mat-drp-date-input\"\n          matInput [placeholder]=\"options.placeholder\"\n          [value]=\"selectedDateRange\"\n          [matTooltip]=\"selectedDateRange\"\n          (click)=\"openCalendar($event)\"\n          readonly\n          #calendarInput >\n    <div matSuffix \n          class=\"ngx-mat-drp-calendar\"\n          (click)=\"openCalendar($event)\">\n    </div>\n  </mat-form-field>\n  \n</div>    \n`,\n  styles: [`.ngx-mat-drp-date-display{min-width:230px}.ngx-mat-drp-date-input{text-overflow:ellipsis;color:#4169e1}.ngx-mat-drp-calendar{background-image:url('data:image/svg+xml,<svg fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">    <path d=\"M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z\"/>    <path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>');width:24px;height:24px}`],\n  providers: [\n    CalendarOverlayService,\n    RangeStoreService,\n    ConfigStoreService,\n    DatePipe\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMatDrpComponent implements OnInit, OnDestroy {\n  @ViewChild('calendarInput')\n  calendarInput;\n  @Output()\n  readonly selectedDateRangeChanged: EventEmitter<Range> = new EventEmitter<Range>();\n  @Input()\n  options: NgxDrpOptions;\n  private rangeUpdate$: Subscription;\n  selectedDateRange = '';\n\n  constructor(\n    private changeDetectionRef: ChangeDetectorRef,\n    private calendarOverlayService: CalendarOverlayService,\n    public rangeStoreService: RangeStoreService,\n    public configStoreService: ConfigStoreService,\n    private datePipe: DatePipe\n  ) {}\n\n  ngOnInit() {\n    this.configStoreService.ngxDrpOptions = this.options;\n    this.options.placeholder = this.options.placeholder || 'Choose a date';\n    this.rangeUpdate$ = this.rangeStoreService.rangeUpdate$.subscribe(range => {\n      const from: string = this.formatToDateString(\n        range.fromDate,\n        this.options.format\n      );\n      const to: string = this.formatToDateString(\n        range.toDate,\n        this.options.format\n      );\n      this.selectedDateRange = `${from} - ${to}`;\n      this.selectedDateRangeChanged.emit(range);\n    });\n\n    this.rangeStoreService.updateRange(\n      this.options.range.fromDate,\n      this.options.range.toDate\n    );\n    this.changeDetectionRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    if (this.rangeUpdate$) {\n      this.rangeUpdate$.unsubscribe();\n    }\n  }\n\n  private formatToDateString(date: Date, format: string): string {\n    return this.datePipe.transform(date, format);\n  }\n\n  openCalendar(event) {\n    const overlayRef: OverlayRef = this.calendarOverlayService.open(\n      this.options.calendarOverlayConfig,\n      this.calendarInput\n    );\n  }\n\n  public resetDates(range: Range) {\n    this.rangeStoreService.updateRange(\n      range.fromDate,\n      range.toDate\n    );\n  }\n}\n",
    "import {\n  Component,\n  ViewChild,\n  Output,\n  Input,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  OnChanges,\n  SimpleChanges\n} from '@angular/core';\nimport { MatCalendar } from '@angular/material/datepicker';\nimport { ConfigStoreService } from '../services/config-store.service';\n\n@Component({\n  selector: 'calendar-wrapper',\n  template: `<div>\n\n  <!-- <mat-divider></mat-divider> -->\n  <span class=\"ngx-mat-drp-date-label\">\n    <label>{{prefixLabel}}</label>\n    <label class=\"ngx-mat-drp-selected-date-label\">{{selectedDate | date:dateFormat}}</label>\n  </span>\n  <!-- <mat-divider></mat-divider> -->\n\n  <mat-calendar \n    [startAt]=\"selectedDate\"\n    [selected]=\"selectedDate\"\n    [minDate]=\"minDate\"\n    [maxDate]=\"maxDate\"\n    (selectedChange)=\"onSelectedChange($event)\"\n    (yearSelected)=\"onYearSelected($event)\"\n    (_userSelection)=\"onUserSelection($event)\"\n    [dateFilter]=\"weekendFilter\">\n  </mat-calendar>\n\n</div>`,\n  styles: [`.ngx-mat-drp-date-label{background:#fafafa;margin:15px;padding:4px 2px;width:100%;font-size:14px;font-weight:500}.ngx-mat-drp-selected-date-label{color:rgba(0,0,0,.38);padding-left:5%}`],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CalendarWrapperComponent implements OnChanges {\n  @ViewChild(MatCalendar)\n  matCalendar: MatCalendar<Date>;\n\n  @Output()\n  readonly selectedDateChange: EventEmitter<Date> = new EventEmitter<Date>();\n\n  dateFormat: string;\n  @Input() selectedDate: Date;\n  @Input() prefixLabel: string;\n  @Input() minDate: Date;\n  @Input() maxDate: Date;\n  weekendFilter = (d: Date) => true;\n\n  constructor(private configStore: ConfigStoreService) {\n    this.dateFormat = configStore.ngxDrpOptions.format;\n    if (configStore.ngxDrpOptions.excludeWeekends) {\n      this.weekendFilter = (d: Date): boolean => {\n        const day = d.getDay();\n        return day !== 0 && day !== 6;\n      };\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Necessary to force view refresh\n    this.matCalendar.activeDate = changes.selectedDate.currentValue;\n  }\n\n  onSelectedChange(date) {\n    this.selectedDateChange.emit(date);\n  }\n\n  onYearSelected(e) {}\n\n  onUserSelection(e) {}\n}\n",
    "import {\n  Component,\n  OnInit,\n  Output,\n  EventEmitter,\n  Input,\n  ChangeDetectionStrategy,\n  ViewEncapsulation\n} from '@angular/core';\nimport { PresetItem } from '../model/model';\n\n@Component({\n  selector: 'mat-drp-presets',\n  template: `<div>\n  <ul class=\"ngx-mat-drp-presets-list\">\n    <li *ngFor=\"let preset of presets\" (click)=\"setPresetPeriod(preset)\"> {{preset.presetLabel}} </li>\n  </ul>\n</div>`,\n  styles: [`.ngx-mat-drp-presets-list{list-style-type:none;margin:0;padding:0}.ngx-mat-drp-presets-list li{margin:5px 0;padding:4%;cursor:pointer;background:#fafafa;color:#3f51b5;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ngx-mat-drp-presets-list li:hover{background:#3f51b5;color:#fff}`],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PresetsComponent implements OnInit {\n  @Input()\n  presets: Array<PresetItem>;\n  @Output()\n  readonly presetChanged: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor() {}\n\n  ngOnInit() {}\n\n  setPresetPeriod(event) {\n    this.presetChanged.emit(event);\n  }\n}\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxMatDrpComponent } from './ngx-mat-drp/ngx-mat-drp.component';\nimport { PickerOverlayComponent } from './picker-overlay/picker-overlay.component';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { OverlayModule } from '@angular/cdk/overlay';\n\nimport { CalendarWrapperComponent } from './calendar-wrapper/calendar-wrapper.component';\nimport { PresetsComponent } from './presets/presets.component';\nimport { DATE } from './services/range-store.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatInputModule,\n    MatButtonModule,\n    MatTooltipModule,\n    OverlayModule\n  ],\n  declarations: [\n    NgxMatDrpComponent,\n    CalendarWrapperComponent,\n    PickerOverlayComponent,\n    PresetsComponent\n  ],\n  providers: [\n    {provide: DATE, useValue: new Date()}\n  ],\n  entryComponents: [PickerOverlayComponent],\n  exports: [NgxMatDrpComponent]\n})\nexport class NgxMatDrpModule { }\n"
  ],
  "names": [
    "DATE",
    "InjectionToken",
    "RangeStoreService",
    "_fromDate",
    "_toDate",
    "this",
    "rangeUpdate$",
    "Subject",
    "Object",
    "defineProperty",
    "prototype",
    "get",
    "updateRange",
    "fromDate",
    "toDate",
    "next",
    "type",
    "Injectable",
    "Date",
    "decorators",
    "Inject",
    "args",
    "ConfigStoreService",
    "defaultOptions",
    "excludeWeekends",
    "animation",
    "locale",
    "fromMinMax",
    "toMinMax",
    "_ngxDrpOptions",
    "set",
    "options",
    "assign",
    "pickerOverlayAnimations",
    "transformPanel",
    "trigger",
    "state",
    "style",
    "opacity",
    "transform",
    "transition",
    "group",
    "animate",
    "PickerOverlayComponent",
    "rangeStoreService",
    "configStoreService",
    "overlayRef",
    "presets",
    "ngOnInit",
    "startDatePrefix",
    "ngxDrpOptions",
    "endDatePrefix",
    "applyLabel",
    "cancelLabel",
    "shouldAnimate",
    "_a",
    "fromMinDate",
    "fromMaxDate",
    "_b",
    "toMinDate",
    "toMaxDate",
    "updateFromDate",
    "date",
    "updateToDate",
    "updateRangeByPreset",
    "presetItem",
    "range",
    "applyNewDates",
    "e",
    "disposeOverLay",
    "discardNewDates",
    "dispose",
    "Component",
    "selector",
    "template",
    "styles",
    "animations",
    "encapsulation",
    "ViewEncapsulation",
    "None",
    "OverlayRef",
    "DEFAULT_CONFIG",
    "panelClass",
    "hasBackdrop",
    "backdropClass",
    "shouldCloseOnBackdropClick",
    "CalendarOverlayService",
    "overlay",
    "injector",
    "open",
    "config",
    "hostElemRef",
    "overlayConfig",
    "createOverlay",
    "portalInjector",
    "createInjector",
    "calendarPortal",
    "ComponentPortal",
    "attach",
    "backdropClick",
    "pipe",
    "takeWhile",
    "subscribe",
    "getOverlayConfig",
    "create",
    "positionStrategy",
    "position",
    "flexibleConnectedTo",
    "withFlexibleDimensions",
    "withViewportMargin",
    "withDefaultOffsetY",
    "withPositions",
    "originX",
    "originY",
    "overlayX",
    "overlayY",
    "OverlayConfig",
    "scrollStrategy",
    "scrollStrategies",
    "block",
    "injectionTokens",
    "WeakMap",
    "PortalInjector",
    "Overlay",
    "Injector",
    "NgxMatDrpComponent",
    "changeDetectionRef",
    "calendarOverlayService",
    "datePipe",
    "selectedDateRangeChanged",
    "EventEmitter",
    "selectedDateRange",
    "_this",
    "placeholder",
    "from",
    "formatToDateString",
    "format",
    "to",
    "emit",
    "detectChanges",
    "ngOnDestroy",
    "unsubscribe",
    "openCalendar",
    "event",
    "calendarOverlayConfig",
    "calendarInput",
    "resetDates",
    "providers",
    "DatePipe",
    "changeDetection",
    "ChangeDetectionStrategy",
    "OnPush",
    "ChangeDetectorRef",
    "ViewChild",
    "Output",
    "Input",
    "CalendarWrapperComponent",
    "configStore",
    "selectedDateChange",
    "weekendFilter",
    "d",
    "dateFormat",
    "day",
    "getDay",
    "ngOnChanges",
    "changes",
    "matCalendar",
    "activeDate",
    "currentValue",
    "onSelectedChange",
    "onYearSelected",
    "onUserSelection",
    "MatCalendar",
    "selectedDate",
    "prefixLabel",
    "minDate",
    "maxDate",
    "PresetsComponent",
    "presetChanged",
    "setPresetPeriod",
    "ɵ0",
    "NgxMatDrpModule",
    "NgModule",
    "imports",
    "CommonModule",
    "MatFormFieldModule",
    "MatDatepickerModule",
    "MatNativeDateModule",
    "MatInputModule",
    "MatButtonModule",
    "MatTooltipModule",
    "OverlayModule",
    "declarations",
    "provide",
    "useValue",
    "entryComponents",
    "exports"
  ],
  "mappings": "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"
}
