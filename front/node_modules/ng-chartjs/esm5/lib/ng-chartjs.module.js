import { __decorate } from "tslib";
import { NgModule } from '@angular/core';
import { NgChartjsDirective } from './ng-chartjs.directive';
import { NgChartjsCustomPluginToken } from './plugin-token';
import { PluginConfig } from './plugins-config';
import { NgChartjsService } from './ng-chartjs.service';
export function ngChartjsCustomPluginsFactory(plugins) {
    var pluginConfig = new PluginConfig();
    pluginConfig.plugins = plugins;
    return pluginConfig;
}
var NgChartjsModule = /** @class */ (function () {
    function NgChartjsModule() {
    }
    NgChartjsModule_1 = NgChartjsModule;
    /**
     * Register a plugin.
     * @param plugin
     */
    NgChartjsModule.registerPlugin = function (plugins) {
        if (plugins === void 0) { plugins = []; }
        return {
            ngModule: NgChartjsModule_1,
            providers: [
                {
                    provide: NgChartjsCustomPluginToken,
                    useValue: plugins
                },
                {
                    deps: [NgChartjsCustomPluginToken],
                    provide: PluginConfig,
                    useFactory: ngChartjsCustomPluginsFactory
                }
            ]
        };
    };
    var NgChartjsModule_1;
    NgChartjsModule = NgChartjsModule_1 = __decorate([
        NgModule({
            imports: [],
            declarations: [NgChartjsDirective],
            exports: [NgChartjsDirective],
            providers: [NgChartjsService]
        })
    ], NgChartjsModule);
    return NgChartjsModule;
}());
export { NgChartjsModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctY2hhcnRqcy5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1jaGFydGpzLyIsInNvdXJjZXMiOlsibGliL25nLWNoYXJ0anMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUEyQyxNQUFNLGVBQWUsQ0FBQztBQUNsRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFeEQsTUFBTSxVQUFVLDZCQUE2QixDQUFDLE9BQWM7SUFDMUQsSUFBTSxZQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUN4QyxZQUFZLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUMvQixPQUFPLFlBQVksQ0FBQztBQUN0QixDQUFDO0FBUUQ7SUFBQTtJQXFCQSxDQUFDO3dCQXJCWSxlQUFlO0lBQzFCOzs7T0FHRztJQUNXLDhCQUFjLEdBQTVCLFVBQTZCLE9BQW1CO1FBQW5CLHdCQUFBLEVBQUEsWUFBbUI7UUFDOUMsT0FBTztZQUNMLFFBQVEsRUFBRSxpQkFBZTtZQUN6QixTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLDBCQUEwQjtvQkFDbkMsUUFBUSxFQUFFLE9BQU87aUJBQ2xCO2dCQUNEO29CQUNFLElBQUksRUFBRSxDQUFDLDBCQUEwQixDQUFDO29CQUNsQyxPQUFPLEVBQUcsWUFBWTtvQkFDdEIsVUFBVSxFQUFFLDZCQUE2QjtpQkFDMUM7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDOztJQXBCVSxlQUFlO1FBTjNCLFFBQVEsQ0FBQztZQUNSLE9BQU8sRUFBRSxFQUFFO1lBQ1gsWUFBWSxFQUFFLENBQUMsa0JBQWtCLENBQUM7WUFDbEMsT0FBTyxFQUFFLENBQUMsa0JBQWtCLENBQUM7WUFDN0IsU0FBUyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7U0FDOUIsQ0FBQztPQUNXLGVBQWUsQ0FxQjNCO0lBQUQsc0JBQUM7Q0FBQSxBQXJCRCxJQXFCQztTQXJCWSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIE9wdGlvbmFsLCBTa2lwU2VsZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdDaGFydGpzRGlyZWN0aXZlIH0gZnJvbSAnLi9uZy1jaGFydGpzLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBOZ0NoYXJ0anNDdXN0b21QbHVnaW5Ub2tlbiB9IGZyb20gJy4vcGx1Z2luLXRva2VuJztcbmltcG9ydCB7IFBsdWdpbkNvbmZpZyB9IGZyb20gJy4vcGx1Z2lucy1jb25maWcnO1xuaW1wb3J0IHsgTmdDaGFydGpzU2VydmljZSB9IGZyb20gJy4vbmctY2hhcnRqcy5zZXJ2aWNlJztcblxuZXhwb3J0IGZ1bmN0aW9uIG5nQ2hhcnRqc0N1c3RvbVBsdWdpbnNGYWN0b3J5KHBsdWdpbnM6IGFueVtdKTogUGx1Z2luQ29uZmlnIHtcbiAgY29uc3QgcGx1Z2luQ29uZmlnID0gbmV3IFBsdWdpbkNvbmZpZygpO1xuICBwbHVnaW5Db25maWcucGx1Z2lucyA9IHBsdWdpbnM7XG4gIHJldHVybiBwbHVnaW5Db25maWc7XG59XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtdLFxuICBkZWNsYXJhdGlvbnM6IFtOZ0NoYXJ0anNEaXJlY3RpdmVdLFxuICBleHBvcnRzOiBbTmdDaGFydGpzRGlyZWN0aXZlXSxcbiAgcHJvdmlkZXJzOiBbTmdDaGFydGpzU2VydmljZV1cbn0pXG5leHBvcnQgY2xhc3MgTmdDaGFydGpzTW9kdWxlIHtcbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgcGx1Z2luLlxuICAgKiBAcGFyYW0gcGx1Z2luXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHJlZ2lzdGVyUGx1Z2luKHBsdWdpbnM6IGFueVtdID0gW10pOiBNb2R1bGVXaXRoUHJvdmlkZXJzPE5nQ2hhcnRqc01vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTmdDaGFydGpzTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBOZ0NoYXJ0anNDdXN0b21QbHVnaW5Ub2tlbixcbiAgICAgICAgICB1c2VWYWx1ZTogcGx1Z2luc1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZGVwczogW05nQ2hhcnRqc0N1c3RvbVBsdWdpblRva2VuXSxcbiAgICAgICAgICBwcm92aWRlOiAgUGx1Z2luQ29uZmlnLFxuICAgICAgICAgIHVzZUZhY3Rvcnk6IG5nQ2hhcnRqc0N1c3RvbVBsdWdpbnNGYWN0b3J5XG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG4iXX0=