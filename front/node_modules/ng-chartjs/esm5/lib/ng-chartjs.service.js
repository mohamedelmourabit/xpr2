import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import * as Chart from 'chart.js';
import { PluginConfig } from './plugins-config';
import { StoreService } from './store.service';
import * as i0 from "@angular/core";
import * as i1 from "./store.service";
import * as i2 from "./plugins-config";
var NgChartjsService = /** @class */ (function () {
    function NgChartjsService(storeService, pluginConfig) {
        this.storeService = storeService;
        this.pluginConfig = pluginConfig;
        var plugins = pluginConfig.plugins;
        if (plugins.length !== 0 || plugins) {
            for (var i = 0; i < plugins.length; i++) {
                if (plugins[i]) {
                    Chart.plugins.register(plugins[i]);
                }
            }
        }
    }
    // get chart instance by id
    NgChartjsService.prototype.getChart = function (id) {
        return this.storeService.getChart(id);
    };
    NgChartjsService.ctorParameters = function () { return [
        { type: StoreService },
        { type: PluginConfig }
    ]; };
    NgChartjsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgChartjsService_Factory() { return new NgChartjsService(i0.ɵɵinject(i1.StoreService), i0.ɵɵinject(i2.PluginConfig)); }, token: NgChartjsService, providedIn: "root" });
    NgChartjsService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [StoreService,
            PluginConfig])
    ], NgChartjsService);
    return NgChartjsService;
}());
export { NgChartjsService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctY2hhcnRqcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctY2hhcnRqcy8iLCJzb3VyY2VzIjpbImxpYi9uZy1jaGFydGpzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxLQUFLLEtBQUssTUFBTSxVQUFVLENBQUM7QUFDbEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7OztBQUsvQztJQUVJLDBCQUNVLFlBQTBCLEVBQzFCLFlBQTBCO1FBRDFCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQzFCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQ2xDLElBQU0sT0FBTyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUM7UUFDckMsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxPQUFPLEVBQUU7WUFDbkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3ZDLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUNkLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNwQzthQUNGO1NBQ0Y7SUFDSCxDQUFDO0lBQ0QsMkJBQTJCO0lBQzNCLG1DQUFRLEdBQVIsVUFBUyxFQUFVO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDeEMsQ0FBQzs7Z0JBZHVCLFlBQVk7Z0JBQ1osWUFBWTs7O0lBSjNCLGdCQUFnQjtRQUg1QixVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtTQUNuQixDQUFDO3lDQUkwQixZQUFZO1lBQ1osWUFBWTtPQUozQixnQkFBZ0IsQ0FrQjVCOzJCQTFCRDtDQTBCQyxBQWxCRCxJQWtCQztTQWxCWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBDaGFydCBmcm9tICdjaGFydC5qcyc7XG5pbXBvcnQgeyBQbHVnaW5Db25maWcgfSBmcm9tICcuL3BsdWdpbnMtY29uZmlnJztcbmltcG9ydCB7IFN0b3JlU2VydmljZSB9IGZyb20gJy4vc3RvcmUuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5nQ2hhcnRqc1NlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICBwcml2YXRlIHN0b3JlU2VydmljZTogU3RvcmVTZXJ2aWNlLFxuICAgICAgcHJpdmF0ZSBwbHVnaW5Db25maWc6IFBsdWdpbkNvbmZpZykge1xuICAgICAgY29uc3QgcGx1Z2lucyA9IHBsdWdpbkNvbmZpZy5wbHVnaW5zO1xuICAgICAgaWYgKHBsdWdpbnMubGVuZ3RoICE9PSAwIHx8IHBsdWdpbnMpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwbHVnaW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHBsdWdpbnNbaV0pIHtcbiAgICAgICAgICAgIENoYXJ0LnBsdWdpbnMucmVnaXN0ZXIocGx1Z2luc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGdldCBjaGFydCBpbnN0YW5jZSBieSBpZFxuICAgIGdldENoYXJ0KGlkOiBzdHJpbmcpOiBhbnkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RvcmVTZXJ2aWNlLmdldENoYXJ0KGlkKTtcbiAgICB9XG59XG4iXX0=