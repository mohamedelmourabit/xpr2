import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import * as Chart from 'chart.js';
import { PluginConfig } from './plugins-config';
import { StoreService } from './store.service';
import * as i0 from "@angular/core";
import * as i1 from "./store.service";
import * as i2 from "./plugins-config";
let NgChartjsService = class NgChartjsService {
    constructor(storeService, pluginConfig) {
        this.storeService = storeService;
        this.pluginConfig = pluginConfig;
        const plugins = pluginConfig.plugins;
        if (plugins.length !== 0 || plugins) {
            for (let i = 0; i < plugins.length; i++) {
                if (plugins[i]) {
                    Chart.plugins.register(plugins[i]);
                }
            }
        }
    }
    // get chart instance by id
    getChart(id) {
        return this.storeService.getChart(id);
    }
};
NgChartjsService.ctorParameters = () => [
    { type: StoreService },
    { type: PluginConfig }
];
NgChartjsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgChartjsService_Factory() { return new NgChartjsService(i0.ɵɵinject(i1.StoreService), i0.ɵɵinject(i2.PluginConfig)); }, token: NgChartjsService, providedIn: "root" });
NgChartjsService = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __metadata("design:paramtypes", [StoreService,
        PluginConfig])
], NgChartjsService);
export { NgChartjsService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctY2hhcnRqcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctY2hhcnRqcy8iLCJzb3VyY2VzIjpbImxpYi9uZy1jaGFydGpzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxLQUFLLEtBQUssTUFBTSxVQUFVLENBQUM7QUFDbEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7OztBQUsvQyxJQUFhLGdCQUFnQixHQUE3QixNQUFhLGdCQUFnQjtJQUV6QixZQUNVLFlBQTBCLEVBQzFCLFlBQTBCO1FBRDFCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQzFCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQ2xDLE1BQU0sT0FBTyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUM7UUFDckMsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxPQUFPLEVBQUU7WUFDbkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3ZDLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUNkLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNwQzthQUNGO1NBQ0Y7SUFDSCxDQUFDO0lBQ0QsMkJBQTJCO0lBQzNCLFFBQVEsQ0FBQyxFQUFVO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDeEMsQ0FBQztDQUNKLENBQUE7O1lBZjJCLFlBQVk7WUFDWixZQUFZOzs7QUFKM0IsZ0JBQWdCO0lBSDVCLFVBQVUsQ0FBQztRQUNWLFVBQVUsRUFBRSxNQUFNO0tBQ25CLENBQUM7cUNBSTBCLFlBQVk7UUFDWixZQUFZO0dBSjNCLGdCQUFnQixDQWtCNUI7U0FsQlksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgQ2hhcnQgZnJvbSAnY2hhcnQuanMnO1xuaW1wb3J0IHsgUGx1Z2luQ29uZmlnIH0gZnJvbSAnLi9wbHVnaW5zLWNvbmZpZyc7XG5pbXBvcnQgeyBTdG9yZVNlcnZpY2UgfSBmcm9tICcuL3N0b3JlLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOZ0NoYXJ0anNTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgcHJpdmF0ZSBzdG9yZVNlcnZpY2U6IFN0b3JlU2VydmljZSxcbiAgICAgIHByaXZhdGUgcGx1Z2luQ29uZmlnOiBQbHVnaW5Db25maWcpIHtcbiAgICAgIGNvbnN0IHBsdWdpbnMgPSBwbHVnaW5Db25maWcucGx1Z2lucztcbiAgICAgIGlmIChwbHVnaW5zLmxlbmd0aCAhPT0gMCB8fCBwbHVnaW5zKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChwbHVnaW5zW2ldKSB7XG4gICAgICAgICAgICBDaGFydC5wbHVnaW5zLnJlZ2lzdGVyKHBsdWdpbnNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBnZXQgY2hhcnQgaW5zdGFuY2UgYnkgaWRcbiAgICBnZXRDaGFydChpZDogc3RyaW5nKTogYW55IHtcbiAgICAgIHJldHVybiB0aGlzLnN0b3JlU2VydmljZS5nZXRDaGFydChpZCk7XG4gICAgfVxufVxuIl19