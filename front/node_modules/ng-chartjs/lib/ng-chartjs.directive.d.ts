import { OnDestroy, OnInit, OnChanges, EventEmitter, ElementRef, SimpleChanges, NgZone } from '@angular/core';
import * as Chart from 'chart.js';
import { StoreService } from './store.service';
import { NgChartjsService } from './ng-chartjs.service';
import { Colors } from './colors';
export declare type Labels = Array<string | string[] | number | number[] | Date | Date[] | any | any[]>;
export declare type Orientation = 'oldest' | 'latest';
export interface NgChartjsEvent {
    event: MouseEvent;
    active: Array<{}>;
}
export declare class NgChartjsDirective implements OnDestroy, OnChanges, OnInit {
    private ngChartjsService;
    private storeService;
    private zone;
    data: number[] | any[];
    datasets: Chart.ChartDataSets[];
    labels: Labels;
    options: Chart.ChartOptions;
    inlinePlugins: any[];
    chartType: Chart.ChartType;
    colors: Colors[];
    legend: boolean;
    adding: {
        labels: Labels[];
        data: any[][];
    };
    removing: {
        orientation: Orientation;
    };
    resetOption: Chart.ChartType;
    noZone: boolean;
    id: string;
    chartClick: EventEmitter<NgChartjsEvent>;
    chartHover: EventEmitter<NgChartjsEvent>;
    chart: Chart;
    private ctx;
    private initFlag;
    private hasChanges;
    private element;
    constructor(element: ElementRef, ngChartjsService: NgChartjsService, storeService: StoreService, zone: NgZone);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    update(): void;
    addData(labels: Labels[], data: any[][]): void;
    removeData(orientation: Orientation): void;
    private refresh;
    private removeChart;
    private addChart;
    private updateChartData;
    private getChartBuilder;
    private getDatasets;
    private updateColors;
    private addData_;
    private removeData_;
}
