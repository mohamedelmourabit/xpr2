(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('chart.js')) :
    typeof define === 'function' && define.amd ? define('ng-chartjs', ['exports', '@angular/core', 'chart.js'], factory) :
    (global = global || self, factory(global['ng-chartjs'] = {}, global.ng.core, global.chart_js));
}(this, (function (exports, core, Chart) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var StoreService = /** @class */ (function () {
        function StoreService() {
            this._chartInstances = [];
            this._chartId = [];
        }
        StoreService.prototype.addChart = function (id, chart) {
            for (var i = 0; i < this._chartId.length; i++) {
                if (id === this._chartId[i]) {
                    return;
                }
            }
            this._chartId.push(id);
            this._chartInstances.push(chart);
        };
        StoreService.prototype.removeChart = function (id) {
            for (var i = 0; i < this._chartId.length; i++) {
                if (id === this._chartId[i]) {
                    this._chartId.splice(i, 1);
                    this._chartInstances.splice(i, 1); // delete chart instance.
                }
            }
        };
        StoreService.prototype.getChart = function (id) {
            for (var i = 0; i < this._chartId.length; i++) {
                if (id === this._chartId[i]) {
                    return this._chartInstances[i];
                }
            }
            return null;
        };
        StoreService.ɵprov = core["ɵɵdefineInjectable"]({ factory: function StoreService_Factory() { return new StoreService(); }, token: StoreService, providedIn: "root" });
        StoreService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], StoreService);
        return StoreService;
    }());

    var PluginConfig = /** @class */ (function () {
        function PluginConfig() {
            this.plugins = [];
        }
        PluginConfig.ɵprov = core["ɵɵdefineInjectable"]({ factory: function PluginConfig_Factory() { return new PluginConfig(); }, token: PluginConfig, providedIn: "root" });
        PluginConfig = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], PluginConfig);
        return PluginConfig;
    }());

    var NgChartjsService = /** @class */ (function () {
        function NgChartjsService(storeService, pluginConfig) {
            this.storeService = storeService;
            this.pluginConfig = pluginConfig;
            var plugins$1 = pluginConfig.plugins;
            if (plugins$1.length !== 0 || plugins$1) {
                for (var i = 0; i < plugins$1.length; i++) {
                    if (plugins$1[i]) {
                        Chart.plugins.register(plugins$1[i]);
                    }
                }
            }
        }
        // get chart instance by id
        NgChartjsService.prototype.getChart = function (id) {
            return this.storeService.getChart(id);
        };
        NgChartjsService.ctorParameters = function () { return [
            { type: StoreService },
            { type: PluginConfig }
        ]; };
        NgChartjsService.ɵprov = core["ɵɵdefineInjectable"]({ factory: function NgChartjsService_Factory() { return new NgChartjsService(core["ɵɵinject"](StoreService), core["ɵɵinject"](PluginConfig)); }, token: NgChartjsService, providedIn: "root" });
        NgChartjsService = __decorate([
            core.Injectable({
                providedIn: 'root'
            }),
            __metadata("design:paramtypes", [StoreService,
                PluginConfig])
        ], NgChartjsService);
        return NgChartjsService;
    }());

    // Default colors
    var DefaultColors = [
        [63, 81, 181],
        [0, 150, 136],
        [255, 152, 0],
        [233, 30, 99],
        [156, 39, 176],
        [0, 188, 212],
        [3, 169, 244],
        [96, 125, 139],
        [255, 193, 7],
        [37, 155, 36],
        [205, 220, 57],
        [86, 119, 252] // Blue
    ];
    function rgba(colour, alpha) {
        return 'rgba(' + colour.concat(alpha).join(',') + ')';
    }
    function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
    function formatLineColor(colors) {
        return {
            backgroundColor: rgba(colors, 0.35),
            borderColor: rgba(colors, 1),
            pointBackgroundColor: rgba(colors, 1),
            pointBorderColor: '#fff',
            pointHoverBackgroundColor: '#fff',
            pointHoverBorderColor: rgba(colors, 0.95)
        };
    }
    function formatBarColor(colors) {
        return {
            backgroundColor: rgba(colors, 0.75),
            borderColor: rgba(colors, 1),
            hoverBackgroundColor: rgba(colors, 1),
            hoverBorderColor: rgba(colors, 1)
        };
    }
    function formatPieColors(colors) {
        return {
            backgroundColor: colors.map(function (color) { return rgba(color, 0.76); }),
            borderColor: colors.map(function () { return '#fff'; }),
            pointBackgroundColor: colors.map(function (color) { return rgba(color, 1); }),
            pointBorderColor: colors.map(function () { return '#fff'; }),
            pointHoverBackgroundColor: colors.map(function (color) { return rgba(color, 1); }),
            pointHoverBorderColor: colors.map(function (color) { return rgba(color, 1); })
        };
    }
    function formatPolarAreaColors(colors) {
        return {
            backgroundColor: colors.map(function (color) { return rgba(color, 0.75); }),
            borderColor: colors.map(function (color) { return rgba(color, 1); }),
            hoverBackgroundColor: colors.map(function (color) { return rgba(color, 1); }),
            hoverBorderColor: colors.map(function (color) { return rgba(color, 1); })
        };
    }
    function getRandomColor() {
        return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];
    }
    /**
    * @method Generate colors for line|bar charts
    * @param index he index of the default color array. eg. 0, 1
    * @return number[]
    * @author vincent 2019-01-22
    * @version 0.0.0
    * @example
    * @log 1. vincent,2019-01-22,done
    */
    function generateColor(index) {
        return DefaultColors[index] || getRandomColor();
    }
    /**
    * @method Generate colors for pie|doughnut charts
    * @param count Length of data. eg. datasets.data.length
    * @return number[][]
    * @author vincent 2019-01-22
    * @version 0.0.0
    * @example
    * @log 1. vincent,2019-01-22,done
    */
    function generateColors(count) {
        var colorsArr = new Array(count);
        for (var i = 0; i < count; i++) {
            colorsArr[i] = DefaultColors[i] || getRandomColor();
        }
        return colorsArr;
    }
    /**
    * @method Generate colors by chart type
    * @param chartType The type of chart you are using. eg. line,bar
    * @param index The index of the default color array. eg. DefaultColors[index]
    * @param count Length of data. eg. datasets.data.length
    * @return Color or number[]
    * @author vincent 2019-01-22
    * @version 0.0.0
    * @example
    * @log 1. vincent,2019-01-22,done
    */
    function getColors(chartType, index, count) {
        if (chartType === 'pie' ||
            chartType === 'doughnut' ||
            chartType === 'bubble' ||
            chartType === 'scatter') {
            return formatPieColors(generateColors(count));
        }
        if (chartType === 'polarArea') {
            return formatPolarAreaColors(generateColors(count));
        }
        if (chartType === 'line' || chartType === 'radar') {
            return formatLineColor(generateColor(index));
        }
        if (chartType === 'bar' || chartType === 'horizontalBar') {
            return formatBarColor(generateColor(index));
        }
        return generateColor(index);
    }

    /* tslint:disable-next-line */
    var NgChartjsDirective = /** @class */ (function () {
        function NgChartjsDirective(element, ngChartjsService, storeService, zone) {
            this.ngChartjsService = ngChartjsService;
            this.storeService = storeService;
            this.zone = zone;
            // x轴标签。这对图表来说是必要的：线，条和雷达。并且只是图表的标签（悬停）：polarArea，pie和doughnut
            this.labels = [];
            // 相当于chart.js的option
            this.options = {};
            this.noZone = true; // disable angular NgZone
            this.id = null; // chart instance id
            // 鼠标点击图表所有的区域
            this.chartClick = new core.EventEmitter();
            // 鼠标悬浮在标签或者活跃的点上面时
            this.chartHover = new core.EventEmitter();
            this.initFlag = false;
            this.hasChanges = false;
            this.element = element; // 获取指令所在canvas元素
        }
        NgChartjsDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.ctx = this.element.nativeElement.getContext('2d'); // 获取元素的ctx
            this.initFlag = true; // 是否初始化了的标志
            if (this.data || this.datasets) { // 判断data和datasets有一个有数据就刷新
                if (this.noZone) {
                    this.zone.runOutsideAngular(function () {
                        _this.refresh();
                    });
                }
                else {
                    this.refresh();
                }
            }
        };
        NgChartjsDirective.prototype.ngOnChanges = function (changes) {
            // TODO: 插件变化刷新，开放刷新按钮
            if (this.initFlag) {
                // Check if the changes are in the data or datasets
                if (changes.hasOwnProperty('data') || changes.hasOwnProperty('datasets')) {
                    if (changes.data) {
                        this.updateChartData(changes.data.currentValue);
                    }
                    else {
                        this.updateChartData(changes.datasets.currentValue);
                    }
                    this.hasChanges = true;
                }
                if (changes.hasOwnProperty('labels')) {
                    this.chart.data.labels = changes.labels.currentValue;
                    this.hasChanges = true;
                }
                if (changes.hasOwnProperty('legend')) {
                    if (changes.legend.currentValue !== changes.legend.previousValue) {
                        this.chart.options.legend.display = changes.legend.currentValue;
                        this.hasChanges = true;
                    }
                }
                if (changes.hasOwnProperty('adding')) {
                    this.addData_(changes.adding.currentValue.labels, changes.adding.currentValue.data);
                    this.hasChanges = true;
                }
                if (changes.hasOwnProperty('removing')) {
                    if (changes.removing.currentValue.orientation === 'oldest' || changes.removing.currentValue.orientation === 'latest') {
                        this.removeData_(changes.removing.currentValue.orientation);
                        this.hasChanges = true;
                    }
                }
                if (changes.hasOwnProperty('chartType')) {
                    this.refresh();
                }
                if (changes.hasOwnProperty('resetOption')) {
                    Object.assign(this.chart.options, changes.resetOption.currentValue);
                    this.hasChanges = true;
                }
                if (this.hasChanges) {
                    this.chart.update();
                    this.hasChanges = false;
                }
                // change chart id
                if (changes.hasOwnProperty('id')) {
                    this.removeChart(changes.id.previousValue);
                    this.addChart(changes.id.currentValue);
                }
            }
        };
        NgChartjsDirective.prototype.ngOnDestroy = function () {
            if (this.chart) {
                this.chart.destroy();
                this.chart = void 0;
                this.removeChart(this.id);
            }
        };
        // update chartjs
        NgChartjsDirective.prototype.update = function () {
            this.chart.update();
        };
        // Dynamic add data
        NgChartjsDirective.prototype.addData = function (labels, data) {
            this.addData_(labels, data);
            this.update();
        };
        // Dynamic remove data, orientation is 'ildest' or 'latest'
        NgChartjsDirective.prototype.removeData = function (orientation) {
            this.removeData_(orientation);
            this.update();
        };
        NgChartjsDirective.prototype.refresh = function () {
            this.ngOnDestroy();
            this.chart = this.getChartBuilder(this.ctx /*, data, this.options*/);
            this.addChart(this.id);
        };
        NgChartjsDirective.prototype.removeChart = function (id) {
            if (this.element.nativeElement.hasAttribute('id')) {
                this.storeService.removeChart(this.element.nativeElement.id);
                return;
            }
            if (id !== null && id !== undefined) {
                this.storeService.removeChart(id); // delete chart instance.
            }
        };
        NgChartjsDirective.prototype.addChart = function (id) {
            if (this.element.nativeElement.hasAttribute('id')) {
                this.storeService.addChart(this.element.nativeElement.id, this.chart);
                return;
            }
            if (id !== null && id !== undefined) {
                this.storeService.addChart(id, this.chart);
            }
        };
        NgChartjsDirective.prototype.updateChartData = function (newDataValues) {
            if (Array.isArray(newDataValues[0].data)) {
                this.chart.data.datasets.forEach(function (dataset, i) {
                    dataset.data = newDataValues[i].data;
                    if (newDataValues[i].label) {
                        dataset.label = newDataValues[i].label;
                    }
                });
            }
            else {
                this.chart.data.datasets[0].data = newDataValues;
            }
            // update colors
            this.chart.data.datasets = this.updateColors(this.chart.data.datasets);
        };
        NgChartjsDirective.prototype.getChartBuilder = function (ctx /*, data:Array<any>, options:any*/) {
            var _this = this;
            var datasets = this.getDatasets();
            var options = Object.assign({}, this.options); // 深复制options
            if (this.legend === false) { // 设置options的legend TODO: 后续这个属性去除，直接在options内设置
                options.legend = { display: false };
            }
            // hock for onHover and onClick events
            options.hover = options.hover || {};
            if (!options.hover.onHover) {
                options.hover.onHover = function (event, active) {
                    if (active && !active.length) {
                        return;
                    }
                    _this.chartHover.emit({ event: event, active: active });
                };
            }
            if (!options.onClick) {
                options.onClick = function (event, active) {
                    _this.chartClick.emit({ event: event, active: active });
                };
            }
            var opts = {
                type: this.chartType,
                data: {
                    labels: this.labels,
                    datasets: datasets // TODO: 后续更改这个属性名字，否则警告
                },
                options: options,
                plugins: this.inlinePlugins
            };
            return new Chart(ctx, opts);
        };
        // 获取 chart.js的datasets数据
        NgChartjsDirective.prototype.getDatasets = function () {
            var _this = this;
            var datasets = void 0;
            // in case if datasets is not provided, but data is present
            if (!this.datasets || !this.datasets.length && (this.data && this.data.length)) {
                if (Array.isArray(this.data[0])) {
                    datasets = this.data.map(function (data, index) {
                        return { data: data, label: _this.labels[index] || "Label " + index };
                    });
                }
                else {
                    datasets = [{ data: this.data, label: "Label 0" }];
                }
            }
            datasets = this.updateColors(datasets); // update colors
            if (!datasets) {
                throw new Error("ng-chartjs configuration error,\n      data or datasets field are required to render char " + this.chartType);
            }
            return datasets;
        };
        // update dataset colors
        NgChartjsDirective.prototype.updateColors = function (datasets) {
            var _this = this;
            if (this.datasets && this.datasets.length || (datasets && datasets.length)) {
                // fix elm type, pre type is number
                datasets = (this.datasets || datasets).map(function (elm, index) {
                    var newElm = Object.assign({}, elm);
                    if (_this.colors && _this.colors.length) {
                        Object.assign(newElm, _this.colors[index]);
                    }
                    else {
                        Object.assign(newElm, getColors(_this.chartType, index, newElm.data.length));
                    }
                    return newElm;
                });
            }
            return datasets;
        };
        NgChartjsDirective.prototype.addData_ = function (labels, data) {
            var _this = this;
            if (labels.length === 0 || data.length === 0) {
                return;
            }
            // update labels
            labels.forEach(function (label) { _this.chart.data.labels.push(label); });
            this.chart.data.datasets.forEach(function (dataset, index) {
                if (data[index]) {
                    for (var i = 0; i < data[index].length; i++) {
                        dataset.data.push(data[index][i]);
                    }
                }
                else {
                    console.log('The added data does not match the original data');
                    return;
                }
            });
        };
        NgChartjsDirective.prototype.removeData_ = function (orientation) {
            // fix: support to oldest feature
            if (orientation === 'latest') {
                this.chart.data.labels.pop();
                this.chart.data.datasets.forEach(function (dataset) {
                    dataset.data.pop();
                });
            }
            else if (orientation === 'oldest') {
                this.chart.data.labels.shift();
                this.chart.data.datasets.forEach(function (dataset) {
                    dataset.data.shift();
                });
            }
        };
        NgChartjsDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: NgChartjsService },
            { type: StoreService },
            { type: core.NgZone }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", Array)
        ], NgChartjsDirective.prototype, "data", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Array)
        ], NgChartjsDirective.prototype, "datasets", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Array)
        ], NgChartjsDirective.prototype, "labels", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], NgChartjsDirective.prototype, "options", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Array)
        ], NgChartjsDirective.prototype, "inlinePlugins", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], NgChartjsDirective.prototype, "chartType", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Array)
        ], NgChartjsDirective.prototype, "colors", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], NgChartjsDirective.prototype, "legend", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], NgChartjsDirective.prototype, "adding", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], NgChartjsDirective.prototype, "removing", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], NgChartjsDirective.prototype, "resetOption", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], NgChartjsDirective.prototype, "noZone", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], NgChartjsDirective.prototype, "id", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], NgChartjsDirective.prototype, "chartClick", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", core.EventEmitter)
        ], NgChartjsDirective.prototype, "chartHover", void 0);
        NgChartjsDirective = __decorate([
            core.Directive({ selector: 'canvas[ngChartjs]', exportAs: 'ngChartjs' }),
            __metadata("design:paramtypes", [core.ElementRef,
                NgChartjsService,
                StoreService,
                core.NgZone])
        ], NgChartjsDirective);
        return NgChartjsDirective;
    }());

    var NgChartjsCustomPluginToken = new core.InjectionToken('[ngx-chart-js] Global Default Plugin');

    function ngChartjsCustomPluginsFactory(plugins) {
        var pluginConfig = new PluginConfig();
        pluginConfig.plugins = plugins;
        return pluginConfig;
    }
    var NgChartjsModule = /** @class */ (function () {
        function NgChartjsModule() {
        }
        NgChartjsModule_1 = NgChartjsModule;
        /**
         * Register a plugin.
         * @param plugin
         */
        NgChartjsModule.registerPlugin = function (plugins) {
            if (plugins === void 0) { plugins = []; }
            return {
                ngModule: NgChartjsModule_1,
                providers: [
                    {
                        provide: NgChartjsCustomPluginToken,
                        useValue: plugins
                    },
                    {
                        deps: [NgChartjsCustomPluginToken],
                        provide: PluginConfig,
                        useFactory: ngChartjsCustomPluginsFactory
                    }
                ]
            };
        };
        var NgChartjsModule_1;
        NgChartjsModule = NgChartjsModule_1 = __decorate([
            core.NgModule({
                imports: [],
                declarations: [NgChartjsDirective],
                exports: [NgChartjsDirective],
                providers: [NgChartjsService]
            })
        ], NgChartjsModule);
        return NgChartjsModule;
    }());

    exports.DefaultColors = DefaultColors;
    exports.NgChartjsDirective = NgChartjsDirective;
    exports.NgChartjsModule = NgChartjsModule;
    exports.NgChartjsService = NgChartjsService;
    exports.formatBarColor = formatBarColor;
    exports.formatLineColor = formatLineColor;
    exports.formatPieColors = formatPieColors;
    exports.formatPolarAreaColors = formatPolarAreaColors;
    exports.generateColor = generateColor;
    exports.generateColors = generateColors;
    exports.getColors = getColors;
    exports.getRandomColor = getRandomColor;
    exports.getRandomInt = getRandomInt;
    exports.ngChartjsCustomPluginsFactory = ngChartjsCustomPluginsFactory;
    exports.rgba = rgba;
    exports.ɵa = StoreService;
    exports.ɵb = PluginConfig;
    exports.ɵc = NgChartjsCustomPluginToken;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ng-chartjs.umd.js.map
