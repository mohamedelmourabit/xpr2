{"ast":null,"code":"import _createClass from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { EventEmitter, Directive, ElementRef, ChangeDetectorRef, Optional, Inject, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injector, TemplateRef, Type, Injectable, SkipSelf, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { FocusTrapFactory, FocusMonitor } from '@angular/cdk/a11y';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) {}\n\nvar MatDialogConfig = function MatDialogConfig() {\n  _classCallCheck(this, MatDialogConfig);\n\n  /** The ARIA role of the dialog element. */\n  this.role = 'dialog';\n  /** Custom class for the overlay pane. */\n\n  this.panelClass = '';\n  /** Whether the dialog has a backdrop. */\n\n  this.hasBackdrop = true;\n  /** Custom class for the backdrop. */\n\n  this.backdropClass = '';\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n\n  this.disableClose = false;\n  /** Width of the dialog. */\n\n  this.width = '';\n  /** Height of the dialog. */\n\n  this.height = '';\n  /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n\n  this.maxWidth = '80vw';\n  /** Data being injected into the child component. */\n\n  this.data = null;\n  /** ID of the element that describes the dialog. */\n\n  this.ariaDescribedBy = null;\n  /** ID of the element that labels the dialog. */\n\n  this.ariaLabelledBy = null;\n  /** Aria label to assign to the dialog element. */\n\n  this.ariaLabel = null;\n  /** Whether the dialog should focus the first focusable element on open. */\n\n  this.autoFocus = true;\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n\n  this.restoreFocus = true;\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n\n  this.closeOnNavigation = true; // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\n\n\nvar matDialogAnimations = {\n  /** Animation that is applied on the dialog container by default. */\n  dialogContainer: trigger('dialogContainer', [// Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({\n    opacity: 0,\n    transform: 'scale(0.7)'\n  })), state('enter', style({\n    transform: 'none'\n  })), transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({\n    transform: 'none',\n    opacity: 1\n  }))), transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({\n    opacity: 0\n  })))])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\n\nfunction throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Base class for the `MatDialogContainer`. The base class does not implement\n * animations as these are left to implementers of the dialog container.\n */\n\n\nvar _MatDialogContainerBase = /*#__PURE__*/function (_BasePortalOutlet) {\n  _inherits(_MatDialogContainerBase, _BasePortalOutlet);\n\n  var _super = _createSuper(_MatDialogContainerBase);\n\n  function _MatDialogContainerBase(_elementRef, _focusTrapFactory, _changeDetectorRef, _document,\n  /** The dialog configuration. */\n  _config, _focusMonitor) {\n    var _this;\n\n    _classCallCheck(this, _MatDialogContainerBase);\n\n    _this = _super.call(this);\n    _this._elementRef = _elementRef;\n    _this._focusTrapFactory = _focusTrapFactory;\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this._config = _config;\n    _this._focusMonitor = _focusMonitor;\n    /** Emits when an animation state changes. */\n\n    _this._animationStateChanged = new EventEmitter();\n    /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n\n    _this._elementFocusedBeforeDialogWasOpened = null;\n    /**\n     * Type of interaction that led to the dialog being closed. This is used to determine\n     * whether the focus style will be applied when returning focus to its original location\n     * after the dialog is closed.\n     */\n\n    _this._closeInteractionType = null;\n    /**\n     * Attaches a DOM portal to the dialog container.\n     * @param portal Portal to be attached.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n\n    _this.attachDomPortal = function (portal) {\n      if (_this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatDialogContentAlreadyAttachedError();\n      }\n\n      return _this._portalOutlet.attachDomPortal(portal);\n    };\n\n    _this._ariaLabelledBy = _config.ariaLabelledBy || null;\n    _this._document = _document;\n    return _this;\n  }\n  /** Initializes the dialog container with the attached content. */\n\n\n  _createClass(_MatDialogContainerBase, [{\n    key: \"_initializeWithAttachedContent\",\n    value: function _initializeWithAttachedContent() {\n      this._setupFocusTrap(); // Save the previously focused element. This element will be re-focused\n      // when the dialog closes.\n\n\n      this._capturePreviouslyFocusedElement(); // Move focus onto the dialog immediately in order to prevent the user\n      // from accidentally opening multiple dialogs at the same time.\n\n\n      this._focusDialogContainer();\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n\n  }, {\n    key: \"attachComponentPortal\",\n    value: function attachComponentPortal(portal) {\n      if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatDialogContentAlreadyAttachedError();\n      }\n\n      return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n\n  }, {\n    key: \"attachTemplatePortal\",\n    value: function attachTemplatePortal(portal) {\n      if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatDialogContentAlreadyAttachedError();\n      }\n\n      return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Moves focus back into the dialog if it was moved out. */\n\n  }, {\n    key: \"_recaptureFocus\",\n    value: function _recaptureFocus() {\n      if (!this._containsFocus()) {\n        var focusContainer = !this._config.autoFocus || !this._focusTrap.focusInitialElement();\n\n        if (focusContainer) {\n          this._elementRef.nativeElement.focus();\n        }\n      }\n    }\n    /** Moves the focus inside the focus trap. */\n\n  }, {\n    key: \"_trapFocus\",\n    value: function _trapFocus() {\n      // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n      // ready in instances where change detection has to run first. To deal with this, we simply\n      // wait for the microtask queue to be empty.\n      if (this._config.autoFocus) {\n        this._focusTrap.focusInitialElementWhenReady();\n      } else if (!this._containsFocus()) {\n        // Otherwise ensure that focus is on the dialog container. It's possible that a different\n        // component tried to move focus while the open animation was running. See:\n        // https://github.com/angular/components/issues/16215. Note that we only want to do this\n        // if the focus isn't inside the dialog already, because it's possible that the consumer\n        // turned off `autoFocus` in order to move focus themselves.\n        this._elementRef.nativeElement.focus();\n      }\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n\n  }, {\n    key: \"_restoreFocus\",\n    value: function _restoreFocus() {\n      var previousElement = this._elementFocusedBeforeDialogWasOpened; // We need the extra check, because IE can set the `activeElement` to null in some cases.\n\n      if (this._config.restoreFocus && previousElement && typeof previousElement.focus === 'function') {\n        var activeElement = this._getActiveElement();\n\n        var element = this._elementRef.nativeElement; // Make sure that focus is still inside the dialog or is on the body (usually because a\n        // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n        // the consumer moved it themselves before the animation was done, in which case we shouldn't\n        // do anything.\n\n        if (!activeElement || activeElement === this._document.body || activeElement === element || element.contains(activeElement)) {\n          if (this._focusMonitor) {\n            this._focusMonitor.focusVia(previousElement, this._closeInteractionType);\n\n            this._closeInteractionType = null;\n          } else {\n            previousElement.focus();\n          }\n        }\n      }\n\n      if (this._focusTrap) {\n        this._focusTrap.destroy();\n      }\n    }\n    /** Sets up the focus trap. */\n\n  }, {\n    key: \"_setupFocusTrap\",\n    value: function _setupFocusTrap() {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n    /** Captures the element that was focused before the dialog was opened. */\n\n  }, {\n    key: \"_capturePreviouslyFocusedElement\",\n    value: function _capturePreviouslyFocusedElement() {\n      if (this._document) {\n        this._elementFocusedBeforeDialogWasOpened = this._getActiveElement();\n      }\n    }\n    /** Focuses the dialog container. */\n\n  }, {\n    key: \"_focusDialogContainer\",\n    value: function _focusDialogContainer() {\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        this._elementRef.nativeElement.focus();\n      }\n    }\n    /** Returns whether focus is inside the dialog. */\n\n  }, {\n    key: \"_containsFocus\",\n    value: function _containsFocus() {\n      var element = this._elementRef.nativeElement;\n\n      var activeElement = this._getActiveElement();\n\n      return element === activeElement || element.contains(activeElement);\n    }\n    /** Gets the currently-focused element on the page. */\n\n  }, {\n    key: \"_getActiveElement\",\n    value: function _getActiveElement() {\n      var _a; // If the `activeElement` is inside a shadow root, `document.activeElement` will\n      // point to the shadow root so we have to descend into it ourselves.\n\n\n      var activeElement = this._document.activeElement;\n      return ((_a = activeElement === null || activeElement === void 0 ? void 0 : activeElement.shadowRoot) === null || _a === void 0 ? void 0 : _a.activeElement) || activeElement;\n    }\n  }]);\n\n  return _MatDialogContainerBase;\n}(BasePortalOutlet);\n\n_MatDialogContainerBase.ɵfac = function _MatDialogContainerBase_Factory(t) {\n  return new (t || _MatDialogContainerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor));\n};\n\n_MatDialogContainerBase.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: _MatDialogContainerBase,\n  viewQuery: function _MatDialogContainerBase_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 3);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    }\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\n_MatDialogContainerBase.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: FocusTrapFactory\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: MatDialogConfig\n  }, {\n    type: FocusMonitor\n  }];\n};\n\n_MatDialogContainerBase.propDecorators = {\n  _portalOutlet: [{\n    type: ViewChild,\n    args: [CdkPortalOutlet, {\n      static: true\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatDialogContainerBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.FocusTrapFactory\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MatDialogConfig\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }];\n  }, {\n    _portalOutlet: [{\n      type: ViewChild,\n      args: [CdkPortalOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n\n\nvar MatDialogContainer = /*#__PURE__*/function (_MatDialogContainerBa) {\n  _inherits(MatDialogContainer, _MatDialogContainerBa);\n\n  var _super2 = _createSuper(MatDialogContainer);\n\n  function MatDialogContainer() {\n    var _this2;\n\n    _classCallCheck(this, MatDialogContainer);\n\n    _this2 = _super2.apply(this, arguments);\n    /** State of the dialog animation. */\n\n    _this2._state = 'enter';\n    return _this2;\n  }\n  /** Callback, invoked whenever an animation on the host completes. */\n\n\n  _createClass(MatDialogContainer, [{\n    key: \"_onAnimationDone\",\n    value: function _onAnimationDone(_ref) {\n      var toState = _ref.toState,\n          totalTime = _ref.totalTime;\n\n      if (toState === 'enter') {\n        this._trapFocus();\n\n        this._animationStateChanged.next({\n          state: 'opened',\n          totalTime: totalTime\n        });\n      } else if (toState === 'exit') {\n        this._restoreFocus();\n\n        this._animationStateChanged.next({\n          state: 'closed',\n          totalTime: totalTime\n        });\n      }\n    }\n    /** Callback, invoked when an animation on the host starts. */\n\n  }, {\n    key: \"_onAnimationStart\",\n    value: function _onAnimationStart(_ref2) {\n      var toState = _ref2.toState,\n          totalTime = _ref2.totalTime;\n\n      if (toState === 'enter') {\n        this._animationStateChanged.next({\n          state: 'opening',\n          totalTime: totalTime\n        });\n      } else if (toState === 'exit' || toState === 'void') {\n        this._animationStateChanged.next({\n          state: 'closing',\n          totalTime: totalTime\n        });\n      }\n    }\n    /** Starts the dialog exit animation. */\n\n  }, {\n    key: \"_startExitAnimation\",\n    value: function _startExitAnimation() {\n      this._state = 'exit'; // Mark the container for check so it can react if the\n      // view container is using OnPush change detection.\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }]);\n\n  return MatDialogContainer;\n}(_MatDialogContainerBase);\n\nMatDialogContainer.ɵfac = function MatDialogContainer_Factory(t) {\n  return ɵMatDialogContainer_BaseFactory(t || MatDialogContainer);\n};\n\nMatDialogContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatDialogContainer,\n  selectors: [[\"mat-dialog-container\"]],\n  hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"],\n  hostVars: 6,\n  hostBindings: function MatDialogContainer_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) {\n        return ctx._onAnimationStart($event);\n      })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) {\n        return ctx._onAnimationDone($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx._id);\n      ɵngcc0.ɵɵattribute(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n      ɵngcc0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._state);\n    }\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkPortalOutlet\", \"\"]],\n  template: function MatDialogContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    }\n  },\n  directives: [ɵngcc2.CdkPortalOutlet],\n  styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matDialogAnimations.dialogContainer]\n  }\n});\nvar ɵMatDialogContainer_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatDialogContainer);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContainer, [{\n    type: Component,\n    args: [{\n      selector: 'mat-dialog-container',\n      template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n      encapsulation: ViewEncapsulation.None,\n      // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      animations: [matDialogAnimations.dialogContainer],\n      host: {\n        'class': 'mat-dialog-container',\n        'tabindex': '-1',\n        'aria-modal': 'true',\n        '[id]': '_id',\n        '[attr.role]': '_config.role',\n        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n        '[attr.aria-label]': '_config.ariaLabel',\n        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n        '[@dialogContainer]': '_state',\n        '(@dialogContainer.start)': '_onAnimationStart($event)',\n        '(@dialogContainer.done)': '_onAnimationDone($event)'\n      },\n      styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\n\n\nvar uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\n\nvar MatDialogRef = /*#__PURE__*/function () {\n  function MatDialogRef(_overlayRef, _containerInstance) {\n    var _this3 = this;\n\n    var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"mat-dialog-\".concat(uniqueId++);\n\n    _classCallCheck(this, MatDialogRef);\n\n    this._overlayRef = _overlayRef;\n    this._containerInstance = _containerInstance;\n    this.id = id;\n    /** Whether the user is allowed to close the dialog. */\n\n    this.disableClose = this._containerInstance._config.disableClose;\n    /** Subject for notifying the user that the dialog has finished opening. */\n\n    this._afterOpened = new Subject();\n    /** Subject for notifying the user that the dialog has finished closing. */\n\n    this._afterClosed = new Subject();\n    /** Subject for notifying the user that the dialog has started closing. */\n\n    this._beforeClosed = new Subject();\n    /** Current state of the dialog. */\n\n    this._state = 0\n    /* OPEN */\n    ; // Pass the id along to the container.\n\n    _containerInstance._id = id; // Emit when opening animation completes\n\n    _containerInstance._animationStateChanged.pipe(filter(function (event) {\n      return event.state === 'opened';\n    }), take(1)).subscribe(function () {\n      _this3._afterOpened.next();\n\n      _this3._afterOpened.complete();\n    }); // Dispose overlay when closing animation is complete\n\n\n    _containerInstance._animationStateChanged.pipe(filter(function (event) {\n      return event.state === 'closed';\n    }), take(1)).subscribe(function () {\n      clearTimeout(_this3._closeFallbackTimeout);\n\n      _this3._finishDialogClose();\n    });\n\n    _overlayRef.detachments().subscribe(function () {\n      _this3._beforeClosed.next(_this3._result);\n\n      _this3._beforeClosed.complete();\n\n      _this3._afterClosed.next(_this3._result);\n\n      _this3._afterClosed.complete();\n\n      _this3.componentInstance = null;\n\n      _this3._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents().pipe(filter(function (event) {\n      return event.keyCode === ESCAPE && !_this3.disableClose && !hasModifierKey(event);\n    })).subscribe(function (event) {\n      event.preventDefault();\n\n      _closeDialogVia(_this3, 'keyboard');\n    });\n\n    _overlayRef.backdropClick().subscribe(function () {\n      if (_this3.disableClose) {\n        _this3._containerInstance._recaptureFocus();\n      } else {\n        _closeDialogVia(_this3, 'mouse');\n      }\n    });\n  }\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n\n\n  _createClass(MatDialogRef, [{\n    key: \"close\",\n    value: function close(dialogResult) {\n      var _this4 = this;\n\n      this._result = dialogResult; // Transition the backdrop in parallel to the dialog.\n\n      this._containerInstance._animationStateChanged.pipe(filter(function (event) {\n        return event.state === 'closing';\n      }), take(1)).subscribe(function (event) {\n        _this4._beforeClosed.next(dialogResult);\n\n        _this4._beforeClosed.complete();\n\n        _this4._overlayRef.detachBackdrop(); // The logic that disposes of the overlay depends on the exit animation completing, however\n        // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n        // timeout which will clean everything up if the animation hasn't fired within the specified\n        // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n        // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n\n\n        _this4._closeFallbackTimeout = setTimeout(function () {\n          return _this4._finishDialogClose();\n        }, event.totalTime + 100);\n      });\n\n      this._state = 1\n      /* CLOSING */\n      ;\n\n      this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n\n  }, {\n    key: \"afterOpened\",\n    value: function afterOpened() {\n      return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n\n  }, {\n    key: \"afterClosed\",\n    value: function afterClosed() {\n      return this._afterClosed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n\n  }, {\n    key: \"beforeClosed\",\n    value: function beforeClosed() {\n      return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n\n  }, {\n    key: \"backdropClick\",\n    value: function backdropClick() {\n      return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n\n  }, {\n    key: \"keydownEvents\",\n    value: function keydownEvents() {\n      return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition(position) {\n      var strategy = this._getPositionStrategy();\n\n      if (position && (position.left || position.right)) {\n        position.left ? strategy.left(position.left) : strategy.right(position.right);\n      } else {\n        strategy.centerHorizontally();\n      }\n\n      if (position && (position.top || position.bottom)) {\n        position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n      } else {\n        strategy.centerVertically();\n      }\n\n      this._overlayRef.updatePosition();\n\n      return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n\n  }, {\n    key: \"updateSize\",\n    value: function updateSize() {\n      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      this._overlayRef.updateSize({\n        width: width,\n        height: height\n      });\n\n      this._overlayRef.updatePosition();\n\n      return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n\n  }, {\n    key: \"addPanelClass\",\n    value: function addPanelClass(classes) {\n      this._overlayRef.addPanelClass(classes);\n\n      return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n\n  }, {\n    key: \"removePanelClass\",\n    value: function removePanelClass(classes) {\n      this._overlayRef.removePanelClass(classes);\n\n      return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n\n  }, {\n    key: \"_finishDialogClose\",\n    value: function _finishDialogClose() {\n      this._state = 2\n      /* CLOSED */\n      ;\n\n      this._overlayRef.dispose();\n    }\n    /** Fetches the position strategy object from the overlay ref. */\n\n  }, {\n    key: \"_getPositionStrategy\",\n    value: function _getPositionStrategy() {\n      return this._overlayRef.getConfig().positionStrategy;\n    }\n  }]);\n\n  return MatDialogRef;\n}();\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\n\n\nfunction _closeDialogVia(ref, interactionType, result) {\n  // Some mock dialog ref instances in tests do not have the `_containerInstance` property.\n  // For those, we keep the behavior as is and do not deal with the interaction type.\n  if (ref._containerInstance !== undefined) {\n    ref._containerInstance._closeInteractionType = interactionType;\n  }\n\n  return ref.close(result);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\n\n\nvar MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\n\nvar MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\n\nvar MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.block();\n  };\n}\n/** @docs-private */\n\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.block();\n  };\n}\n/** @docs-private */\n\n\nvar MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Base class for dialog services. The base dialog service allows\n * for arbitrary dialog refs and dialog container components.\n */\n\nvar _MatDialogBase = /*#__PURE__*/function () {\n  function _MatDialogBase(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken) {\n    var _this5 = this;\n\n    _classCallCheck(this, _MatDialogBase);\n\n    this._overlay = _overlay;\n    this._injector = _injector;\n    this._defaultOptions = _defaultOptions;\n    this._parentDialog = _parentDialog;\n    this._overlayContainer = _overlayContainer;\n    this._dialogRefConstructor = _dialogRefConstructor;\n    this._dialogContainerType = _dialogContainerType;\n    this._dialogDataToken = _dialogDataToken;\n    this._openDialogsAtThisLevel = [];\n    this._afterAllClosedAtThisLevel = new Subject();\n    this._afterOpenedAtThisLevel = new Subject();\n    this._ariaHiddenElements = new Map(); // TODO (jelbourn): tighten the typing right-hand side of this expression.\n\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n\n    this.afterAllClosed = defer(function () {\n      return _this5.openDialogs.length ? _this5._getAfterAllClosed() : _this5._getAfterAllClosed().pipe(startWith(undefined));\n    });\n    this._scrollStrategy = scrollStrategy;\n  }\n  /** Keeps track of the currently-open dialogs. */\n\n\n  _createClass(_MatDialogBase, [{\n    key: \"openDialogs\",\n    get: function get() {\n      return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n\n  }, {\n    key: \"afterOpened\",\n    get: function get() {\n      return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n  }, {\n    key: \"_getAfterAllClosed\",\n    value: function _getAfterAllClosed() {\n      var parent = this._parentDialog;\n      return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n  }, {\n    key: \"open\",\n    value: function open(componentOrTemplateRef, config) {\n      var _this6 = this;\n\n      config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n      if (config.id && this.getDialogById(config.id) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error(\"Dialog with id \\\"\".concat(config.id, \"\\\" exists already. The dialog id must be unique.\"));\n      }\n\n      var overlayRef = this._createOverlay(config);\n\n      var dialogContainer = this._attachDialogContainer(overlayRef, config);\n\n      var dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config); // If this is the first dialog that we're opening, hide all the non-overlay content.\n\n\n      if (!this.openDialogs.length) {\n        this._hideNonDialogContentFromAssistiveTechnology();\n      }\n\n      this.openDialogs.push(dialogRef);\n      dialogRef.afterClosed().subscribe(function () {\n        return _this6._removeOpenDialog(dialogRef);\n      });\n      this.afterOpened.next(dialogRef); // Notify the dialog container that the content has been attached.\n\n      dialogContainer._initializeWithAttachedContent();\n\n      return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n\n  }, {\n    key: \"closeAll\",\n    value: function closeAll() {\n      this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n\n  }, {\n    key: \"getDialogById\",\n    value: function getDialogById(id) {\n      return this.openDialogs.find(function (dialog) {\n        return dialog.id === id;\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      // Only close the dialogs at this level on destroy\n      // since the parent service may still be active.\n      this._closeDialogs(this._openDialogsAtThisLevel);\n\n      this._afterAllClosedAtThisLevel.complete();\n\n      this._afterOpenedAtThisLevel.complete();\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the OverlayRef for the created overlay.\n     */\n\n  }, {\n    key: \"_createOverlay\",\n    value: function _createOverlay(config) {\n      var overlayConfig = this._getOverlayConfig(config);\n\n      return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param dialogConfig The dialog configuration.\n     * @returns The overlay configuration.\n     */\n\n  }, {\n    key: \"_getOverlayConfig\",\n    value: function _getOverlayConfig(dialogConfig) {\n      var state = new OverlayConfig({\n        positionStrategy: this._overlay.position().global(),\n        scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n        panelClass: dialogConfig.panelClass,\n        hasBackdrop: dialogConfig.hasBackdrop,\n        direction: dialogConfig.direction,\n        minWidth: dialogConfig.minWidth,\n        minHeight: dialogConfig.minHeight,\n        maxWidth: dialogConfig.maxWidth,\n        maxHeight: dialogConfig.maxHeight,\n        disposeOnNavigation: dialogConfig.closeOnNavigation\n      });\n\n      if (dialogConfig.backdropClass) {\n        state.backdropClass = dialogConfig.backdropClass;\n      }\n\n      return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n\n  }, {\n    key: \"_attachDialogContainer\",\n    value: function _attachDialogContainer(overlay, config) {\n      var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n      var injector = Injector.create({\n        parent: userInjector || this._injector,\n        providers: [{\n          provide: MatDialogConfig,\n          useValue: config\n        }]\n      });\n      var containerPortal = new ComponentPortal(this._dialogContainerType, config.viewContainerRef, injector, config.componentFactoryResolver);\n      var containerRef = overlay.attach(containerPortal);\n      return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogContainer Reference to the wrapping dialog container.\n     * @param overlayRef Reference to the overlay in which the dialog resides.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n\n  }, {\n    key: \"_attachDialogContent\",\n    value: function _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n      // Create a reference to the dialog we're creating in order to give the user a handle\n      // to modify and close it.\n      var dialogRef = new this._dialogRefConstructor(overlayRef, dialogContainer, config.id);\n\n      if (componentOrTemplateRef instanceof TemplateRef) {\n        dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, {\n          $implicit: config.data,\n          dialogRef: dialogRef\n        }));\n      } else {\n        var injector = this._createInjector(config, dialogRef, dialogContainer);\n\n        var contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n        dialogRef.componentInstance = contentRef.instance;\n      }\n\n      dialogRef.updateSize(config.width, config.height).updatePosition(config.position);\n      return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog.\n     * @param dialogContainer Dialog container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n\n  }, {\n    key: \"_createInjector\",\n    value: function _createInjector(config, dialogRef, dialogContainer) {\n      var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector; // The dialog container should be provided as the dialog container and the dialog's\n      // content are created out of the same `ViewContainerRef` and as such, are siblings\n      // for injector purposes. To allow the hierarchy that is expected, the dialog\n      // container is explicitly provided in the injector.\n\n      var providers = [{\n        provide: this._dialogContainerType,\n        useValue: dialogContainer\n      }, {\n        provide: this._dialogDataToken,\n        useValue: config.data\n      }, {\n        provide: this._dialogRefConstructor,\n        useValue: dialogRef\n      }];\n\n      if (config.direction && (!userInjector || !userInjector.get(Directionality, null))) {\n        providers.push({\n          provide: Directionality,\n          useValue: {\n            value: config.direction,\n            change: of()\n          }\n        });\n      }\n\n      return Injector.create({\n        parent: userInjector || this._injector,\n        providers: providers\n      });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     */\n\n  }, {\n    key: \"_removeOpenDialog\",\n    value: function _removeOpenDialog(dialogRef) {\n      var index = this.openDialogs.indexOf(dialogRef);\n\n      if (index > -1) {\n        this.openDialogs.splice(index, 1); // If all the dialogs were closed, remove/restore the `aria-hidden`\n        // to a the siblings and emit to the `afterAllClosed` stream.\n\n        if (!this.openDialogs.length) {\n          this._ariaHiddenElements.forEach(function (previousValue, element) {\n            if (previousValue) {\n              element.setAttribute('aria-hidden', previousValue);\n            } else {\n              element.removeAttribute('aria-hidden');\n            }\n          });\n\n          this._ariaHiddenElements.clear();\n\n          this._getAfterAllClosed().next();\n        }\n      }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     */\n\n  }, {\n    key: \"_hideNonDialogContentFromAssistiveTechnology\",\n    value: function _hideNonDialogContentFromAssistiveTechnology() {\n      var overlayContainer = this._overlayContainer.getContainerElement(); // Ensure that the overlay container is attached to the DOM.\n\n\n      if (overlayContainer.parentElement) {\n        var siblings = overlayContainer.parentElement.children;\n\n        for (var i = siblings.length - 1; i > -1; i--) {\n          var sibling = siblings[i];\n\n          if (sibling !== overlayContainer && sibling.nodeName !== 'SCRIPT' && sibling.nodeName !== 'STYLE' && !sibling.hasAttribute('aria-live')) {\n            this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n\n            sibling.setAttribute('aria-hidden', 'true');\n          }\n        }\n      }\n    }\n    /** Closes all of the dialogs in an array. */\n\n  }, {\n    key: \"_closeDialogs\",\n    value: function _closeDialogs(dialogs) {\n      var i = dialogs.length;\n\n      while (i--) {\n        // The `_openDialogs` property isn't updated after close until the rxjs subscription\n        // runs on the next microtask, in addition to modifying the array as we're going\n        // through it. We loop through all of them and call close without assuming that\n        // they'll be removed from the list instantaneously.\n        dialogs[i].close();\n      }\n    }\n  }]);\n\n  return _MatDialogBase;\n}();\n\n_MatDialogBase.ɵfac = function _MatDialogBase_Factory(t) {\n  return new (t || _MatDialogBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.OverlayContainer), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Type), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Type), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.InjectionToken));\n};\n\n_MatDialogBase.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: _MatDialogBase\n});\n\n_MatDialogBase.ctorParameters = function () {\n  return [{\n    type: Overlay\n  }, {\n    type: Injector\n  }, {\n    type: undefined\n  }, {\n    type: undefined\n  }, {\n    type: OverlayContainer\n  }, {\n    type: undefined\n  }, {\n    type: Type\n  }, {\n    type: Type\n  }, {\n    type: InjectionToken\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatDialogBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc3.Overlay\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: undefined\n    }, {\n      type: undefined\n    }, {\n      type: ɵngcc3.OverlayContainer\n    }, {\n      type: undefined\n    }, {\n      type: ɵngcc0.Type\n    }, {\n      type: ɵngcc0.Type\n    }, {\n      type: ɵngcc0.InjectionToken\n    }];\n  }, null);\n})();\n/**\n * Service to open Material Design modal dialogs.\n */\n\n\nvar MatDialog = /*#__PURE__*/function (_MatDialogBase2) {\n  _inherits(MatDialog, _MatDialogBase2);\n\n  var _super3 = _createSuper(MatDialog);\n\n  function MatDialog(overlay, injector,\n  /**\n   * @deprecated `_location` parameter to be removed.\n   * @breaking-change 10.0.0\n   */\n  location, defaultOptions, scrollStrategy, parentDialog, overlayContainer) {\n    _classCallCheck(this, MatDialog);\n\n    return _super3.call(this, overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA);\n  }\n\n  return MatDialog;\n}(_MatDialogBase);\n\nMatDialog.ɵfac = function MatDialog_Factory(t) {\n  return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer));\n};\n\nMatDialog.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MatDialog,\n  factory: MatDialog.ɵfac\n});\n\nMatDialog.ctorParameters = function () {\n  return [{\n    type: Overlay\n  }, {\n    type: Injector\n  }, {\n    type: Location,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: MatDialogConfig,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_DIALOG_DEFAULT_OPTIONS]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_DIALOG_SCROLL_STRATEGY]\n    }]\n  }, {\n    type: MatDialog,\n    decorators: [{\n      type: Optional\n    }, {\n      type: SkipSelf\n    }]\n  }, {\n    type: OverlayContainer\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialog, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc3.Overlay\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc4.Location,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: MatDialogConfig,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DIALOG_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_DIALOG_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: MatDialog,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: ɵngcc3.OverlayContainer\n    }];\n  }, null);\n})();\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\n\n\nfunction _applyConfigDefaults(config, defaultOptions) {\n  return Object.assign(Object.assign({}, defaultOptions), config);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Counter used to generate unique IDs for dialog elements. */\n\n\nvar dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\n\nvar MatDialogClose = /*#__PURE__*/function () {\n  function MatDialogClose( // The dialog title directive is always used in combination with a `MatDialogRef`.\n  // tslint:disable-next-line: lightweight-tokens\n  dialogRef, _elementRef, _dialog) {\n    _classCallCheck(this, MatDialogClose);\n\n    this.dialogRef = dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    /** Default to \"button\" to prevents accidental form submits. */\n\n    this.type = 'button';\n  }\n\n  _createClass(MatDialogClose, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (!this.dialogRef) {\n        // When this directive is included in a dialog via TemplateRef (rather than being\n        // in a Component), the DialogRef isn't available via injection because embedded\n        // views cannot be given a custom injector. Instead, we look up the DialogRef by\n        // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n        // be resolved at constructor time.\n        this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n      if (proxiedChange) {\n        this.dialogResult = proxiedChange.currentValue;\n      }\n    }\n  }, {\n    key: \"_onButtonClick\",\n    value: function _onButtonClick(event) {\n      // Determinate the focus origin using the click event, because using the FocusMonitor will\n      // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n      // dialog, and therefore clicking the button won't result in a focus change. This means that\n      // the FocusMonitor won't detect any origin change, and will always output `program`.\n      _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n  }]);\n\n  return MatDialogClose;\n}();\n\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) {\n  return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog));\n};\n\nMatDialogClose.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogClose,\n  selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]],\n  hostVars: 2,\n  hostBindings: function MatDialogClose_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler($event) {\n        return ctx._onButtonClick($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n    }\n  },\n  inputs: {\n    type: \"type\",\n    dialogResult: [\"mat-dialog-close\", \"dialogResult\"],\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"]\n  },\n  exportAs: [\"matDialogClose\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nMatDialogClose.ctorParameters = function () {\n  return [{\n    type: MatDialogRef,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ElementRef\n  }, {\n    type: MatDialog\n  }];\n};\n\nMatDialogClose.propDecorators = {\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  type: [{\n    type: Input\n  }],\n  dialogResult: [{\n    type: Input,\n    args: ['mat-dialog-close']\n  }],\n  _matDialogClose: [{\n    type: Input,\n    args: ['matDialogClose']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogClose, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-dialog-close], [matDialogClose]',\n      exportAs: 'matDialogClose',\n      host: {\n        '(click)': '_onButtonClick($event)',\n        '[attr.aria-label]': 'ariaLabel || null',\n        '[attr.type]': 'type'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: MatDialog\n    }];\n  }, {\n    type: [{\n      type: Input\n    }],\n    dialogResult: [{\n      type: Input,\n      args: ['mat-dialog-close']\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    _matDialogClose: [{\n      type: Input,\n      args: ['matDialogClose']\n    }]\n  });\n})();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n\n\nvar MatDialogTitle = /*#__PURE__*/function () {\n  function MatDialogTitle( // The dialog title directive is always used in combination with a `MatDialogRef`.\n  // tslint:disable-next-line: lightweight-tokens\n  _dialogRef, _elementRef, _dialog) {\n    _classCallCheck(this, MatDialogTitle);\n\n    this._dialogRef = _dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    this.id = \"mat-dialog-title-\".concat(dialogElementUid++);\n  }\n\n  _createClass(MatDialogTitle, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this7 = this;\n\n      if (!this._dialogRef) {\n        this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n      }\n\n      if (this._dialogRef) {\n        Promise.resolve().then(function () {\n          var container = _this7._dialogRef._containerInstance;\n\n          if (container && !container._ariaLabelledBy) {\n            container._ariaLabelledBy = _this7.id;\n          }\n        });\n      }\n    }\n  }]);\n\n  return MatDialogTitle;\n}();\n\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) {\n  return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog));\n};\n\nMatDialogTitle.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogTitle,\n  selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-title\"],\n  hostVars: 1,\n  hostBindings: function MatDialogTitle_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n    }\n  },\n  inputs: {\n    id: \"id\"\n  },\n  exportAs: [\"matDialogTitle\"]\n});\n\nMatDialogTitle.ctorParameters = function () {\n  return [{\n    type: MatDialogRef,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ElementRef\n  }, {\n    type: MatDialog\n  }];\n};\n\nMatDialogTitle.propDecorators = {\n  id: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogTitle, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-dialog-title], [matDialogTitle]',\n      exportAs: 'matDialogTitle',\n      host: {\n        'class': 'mat-dialog-title',\n        '[id]': 'id'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: MatDialog\n    }];\n  }, {\n    id: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Scrollable content container of a dialog.\n */\n\n\nvar MatDialogContent = function MatDialogContent() {\n  _classCallCheck(this, MatDialogContent);\n};\n\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) {\n  return new (t || MatDialogContent)();\n};\n\nMatDialogContent.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogContent,\n  selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-content\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContent, [{\n    type: Directive,\n    args: [{\n      selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\",\n      host: {\n        'class': 'mat-dialog-content'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n\n\nvar MatDialogActions = function MatDialogActions() {\n  _classCallCheck(this, MatDialogActions);\n};\n\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) {\n  return new (t || MatDialogActions)();\n};\n\nMatDialogActions.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogActions,\n  selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-actions\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogActions, [{\n    type: Directive,\n    args: [{\n      selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\",\n      host: {\n        'class': 'mat-dialog-actions'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\n\n\nfunction getClosestDialog(element, openDialogs) {\n  var parent = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(function (dialog) {\n    return dialog.id === parent.id;\n  }) : null;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatDialogModule = function MatDialogModule() {\n  _classCallCheck(this, MatDialogModule);\n};\n\nMatDialogModule.ɵfac = function MatDialogModule_Factory(t) {\n  return new (t || MatDialogModule)();\n};\n\nMatDialogModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatDialogModule\n});\nMatDialogModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n  imports: [[OverlayModule, PortalModule, MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, {\n    declarations: function declarations() {\n      return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent];\n    },\n    imports: function imports() {\n      return [OverlayModule, PortalModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, PortalModule, MatCommonModule],\n      exports: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule],\n      declarations: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent],\n      providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n      entryComponents: [MatDialogContainer]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, matDialogAnimations, throwMatDialogContentAlreadyAttachedError }; //# sourceMappingURL=dialog.js.map","map":{"version":3,"sources":["/Users/mohammedelmourabit/xrp/xpr/node_modules/@angular/material/__ivy_ngcc__/fesm2015/dialog.js"],"names":["Overlay","OverlayConfig","OverlayContainer","OverlayModule","BasePortalOutlet","CdkPortalOutlet","ComponentPortal","TemplatePortal","PortalModule","EventEmitter","Directive","ElementRef","ChangeDetectorRef","Optional","Inject","ViewChild","Component","ViewEncapsulation","ChangeDetectionStrategy","InjectionToken","Injector","TemplateRef","Type","Injectable","SkipSelf","Input","NgModule","MatCommonModule","Directionality","DOCUMENT","Location","Subject","defer","of","filter","take","startWith","FocusTrapFactory","FocusMonitor","trigger","state","style","transition","animate","ESCAPE","hasModifierKey","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","MatDialogContainer_ng_template_0_Template","rf","ctx","MatDialogConfig","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","maxWidth","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","autoFocus","restoreFocus","closeOnNavigation","matDialogAnimations","dialogContainer","opacity","transform","throwMatDialogContentAlreadyAttachedError","Error","_MatDialogContainerBase","_elementRef","_focusTrapFactory","_changeDetectorRef","_document","_config","_focusMonitor","_animationStateChanged","_elementFocusedBeforeDialogWasOpened","_closeInteractionType","attachDomPortal","portal","_portalOutlet","hasAttached","ngDevMode","_ariaLabelledBy","_setupFocusTrap","_capturePreviouslyFocusedElement","_focusDialogContainer","attachComponentPortal","attachTemplatePortal","_containsFocus","focusContainer","_focusTrap","focusInitialElement","nativeElement","focus","focusInitialElementWhenReady","previousElement","activeElement","_getActiveElement","element","body","contains","focusVia","destroy","create","_a","shadowRoot","ɵfac","_MatDialogContainerBase_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","viewQuery","_MatDialogContainerBase_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","features","ɵɵInheritDefinitionFeature","ctorParameters","undefined","decorators","args","propDecorators","static","ɵsetClassMetadata","MatDialogContainer","arguments","_state","toState","totalTime","_trapFocus","next","_restoreFocus","markForCheck","MatDialogContainer_Factory","ɵMatDialogContainer_BaseFactory","ɵcmp","ɵɵdefineComponent","selectors","hostAttrs","hostVars","hostBindings","MatDialogContainer_HostBindings","ɵɵsyntheticHostListener","MatDialogContainer_animation_dialogContainer_start_HostBindingHandler","$event","_onAnimationStart","MatDialogContainer_animation_dialogContainer_done_HostBindingHandler","_onAnimationDone","ɵɵhostProperty","_id","ɵɵattribute","ɵɵsyntheticHostProperty","decls","vars","consts","template","MatDialogContainer_Template","ɵɵtemplate","directives","styles","encapsulation","animation","ɵɵgetInheritedFactory","selector","None","changeDetection","Default","animations","host","uniqueId","MatDialogRef","_overlayRef","_containerInstance","id","_afterOpened","_afterClosed","_beforeClosed","pipe","event","subscribe","complete","clearTimeout","_closeFallbackTimeout","_finishDialogClose","detachments","_result","componentInstance","dispose","keydownEvents","keyCode","preventDefault","_closeDialogVia","backdropClick","_recaptureFocus","dialogResult","detachBackdrop","setTimeout","_startExitAnimation","position","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updatePosition","updateSize","classes","addPanelClass","removePanelClass","getConfig","positionStrategy","ref","interactionType","result","close","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","_MatDialogBase","_overlay","_injector","_defaultOptions","_parentDialog","_overlayContainer","scrollStrategy","_dialogRefConstructor","_dialogContainerType","_dialogDataToken","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","Map","afterAllClosed","openDialogs","length","_getAfterAllClosed","_scrollStrategy","afterOpened","parent","componentOrTemplateRef","config","_applyConfigDefaults","getDialogById","overlayRef","_createOverlay","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","push","afterClosed","_removeOpenDialog","_initializeWithAttachedContent","_closeDialogs","find","dialog","overlayConfig","_getOverlayConfig","dialogConfig","global","direction","minWidth","minHeight","maxHeight","disposeOnNavigation","userInjector","viewContainerRef","injector","providers","useValue","containerPortal","componentFactoryResolver","containerRef","attach","instance","$implicit","_createInjector","contentRef","get","value","change","index","indexOf","splice","forEach","previousValue","setAttribute","removeAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","set","getAttribute","dialogs","_MatDialogBase_Factory","MatDialog","location","defaultOptions","parentDialog","MatDialog_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","Object","assign","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","changes","proxiedChange","currentValue","screenX","screenY","MatDialogClose_Factory","MatDialogClose_HostBindings","ɵɵlistener","MatDialogClose_click_HostBindingHandler","_onButtonClick","inputs","_matDialogClose","exportAs","ɵɵNgOnChangesFeature","MatDialogTitle","_dialogRef","Promise","resolve","then","container","MatDialogTitle_Factory","MatDialogTitle_HostBindings","MatDialogContent","MatDialogContent_Factory","MatDialogActions","MatDialogActions_Factory","classList","MatDialogModule","MatDialogModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports","entryComponents"],"mappings":"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","sourcesContent":["import { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { EventEmitter, Directive, ElementRef, ChangeDetectorRef, Optional, Inject, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injector, TemplateRef, Type, Injectable, SkipSelf, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { FocusTrapFactory, FocusMonitor } from '@angular/cdk/a11y';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) { }\nclass MatDialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Custom class for the overlay pane. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Custom class for the backdrop. */\n        this.backdropClass = '';\n        /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n        this.maxWidth = '80vw';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Aria label to assign to the dialog element. */\n        this.ariaLabel = null;\n        /** Whether the dialog should focus the first focusable element on open. */\n        this.autoFocus = true;\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nconst matDialogAnimations = {\n    /** Animation that is applied on the dialog container by default. */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 }))),\n        transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nfunction throwMatDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Base class for the `MatDialogContainer`. The base class does not implement\n * animations as these are left to implementers of the dialog container.\n */\nclass _MatDialogContainerBase extends BasePortalOutlet {\n    constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, \n    /** The dialog configuration. */\n    _config, _focusMonitor) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._config = _config;\n        this._focusMonitor = _focusMonitor;\n        /** Emits when an animation state changes. */\n        this._animationStateChanged = new EventEmitter();\n        /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * Type of interaction that led to the dialog being closed. This is used to determine\n         * whether the focus style will be applied when returning focus to its original location\n         * after the dialog is closed.\n         */\n        this._closeInteractionType = null;\n        /**\n         * Attaches a DOM portal to the dialog container.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatDialogContentAlreadyAttachedError();\n            }\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        this._ariaLabelledBy = _config.ariaLabelledBy || null;\n        this._document = _document;\n    }\n    /** Initializes the dialog container with the attached content. */\n    _initializeWithAttachedContent() {\n        this._setupFocusTrap();\n        // Save the previously focused element. This element will be re-focused\n        // when the dialog closes.\n        this._capturePreviouslyFocusedElement();\n        // Move focus onto the dialog immediately in order to prevent the user\n        // from accidentally opening multiple dialogs at the same time.\n        this._focusDialogContainer();\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Moves focus back into the dialog if it was moved out. */\n    _recaptureFocus() {\n        if (!this._containsFocus()) {\n            const focusContainer = !this._config.autoFocus || !this._focusTrap.focusInitialElement();\n            if (focusContainer) {\n                this._elementRef.nativeElement.focus();\n            }\n        }\n    }\n    /** Moves the focus inside the focus trap. */\n    _trapFocus() {\n        // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty.\n        if (this._config.autoFocus) {\n            this._focusTrap.focusInitialElementWhenReady();\n        }\n        else if (!this._containsFocus()) {\n            // Otherwise ensure that focus is on the dialog container. It's possible that a different\n            // component tried to move focus while the open animation was running. See:\n            // https://github.com/angular/components/issues/16215. Note that we only want to do this\n            // if the focus isn't inside the dialog already, because it's possible that the consumer\n            // turned off `autoFocus` in order to move focus themselves.\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n    _restoreFocus() {\n        const previousElement = this._elementFocusedBeforeDialogWasOpened;\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus && previousElement &&\n            typeof previousElement.focus === 'function') {\n            const activeElement = this._getActiveElement();\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement || activeElement === this._document.body || activeElement === element ||\n                element.contains(activeElement)) {\n                if (this._focusMonitor) {\n                    this._focusMonitor.focusVia(previousElement, this._closeInteractionType);\n                    this._closeInteractionType = null;\n                }\n                else {\n                    previousElement.focus();\n                }\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /** Sets up the focus trap. */\n    _setupFocusTrap() {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n    /** Captures the element that was focused before the dialog was opened. */\n    _capturePreviouslyFocusedElement() {\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = this._getActiveElement();\n        }\n    }\n    /** Focuses the dialog container. */\n    _focusDialogContainer() {\n        // Note that there is no focus method when rendering on the server.\n        if (this._elementRef.nativeElement.focus) {\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Returns whether focus is inside the dialog. */\n    _containsFocus() {\n        const element = this._elementRef.nativeElement;\n        const activeElement = this._getActiveElement();\n        return element === activeElement || element.contains(activeElement);\n    }\n    /** Gets the currently-focused element on the page. */\n    _getActiveElement() {\n        var _a;\n        // If the `activeElement` is inside a shadow root, `document.activeElement` will\n        // point to the shadow root so we have to descend into it ourselves.\n        const activeElement = this._document.activeElement;\n        return ((_a = activeElement === null || activeElement === void 0 ? void 0 : activeElement.shadowRoot) === null || _a === void 0 ? void 0 : _a.activeElement) || activeElement;\n    }\n}\n_MatDialogContainerBase.ɵfac = function _MatDialogContainerBase_Factory(t) { return new (t || _MatDialogContainerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor)); };\n_MatDialogContainerBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatDialogContainerBase, viewQuery: function _MatDialogContainerBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 3);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatDialogContainerBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: MatDialogConfig },\n    { type: FocusMonitor }\n];\n_MatDialogContainerBase.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatDialogContainerBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusTrapFactory }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: MatDialogConfig }, { type: ɵngcc1.FocusMonitor }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\nclass MatDialogContainer extends _MatDialogContainerBase {\n    constructor() {\n        super(...arguments);\n        /** State of the dialog animation. */\n        this._state = 'enter';\n    }\n    /** Callback, invoked whenever an animation on the host completes. */\n    _onAnimationDone({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._trapFocus();\n            this._animationStateChanged.next({ state: 'opened', totalTime });\n        }\n        else if (toState === 'exit') {\n            this._restoreFocus();\n            this._animationStateChanged.next({ state: 'closed', totalTime });\n        }\n    }\n    /** Callback, invoked when an animation on the host starts. */\n    _onAnimationStart({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._animationStateChanged.next({ state: 'opening', totalTime });\n        }\n        else if (toState === 'exit' || toState === 'void') {\n            this._animationStateChanged.next({ state: 'closing', totalTime });\n        }\n    }\n    /** Starts the dialog exit animation. */\n    _startExitAnimation() {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatDialogContainer.ɵfac = function MatDialogContainer_Factory(t) { return ɵMatDialogContainer_BaseFactory(t || MatDialogContainer); };\nMatDialogContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDialogContainer, selectors: [[\"mat-dialog-container\"]], hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"], hostVars: 6, hostBindings: function MatDialogContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) { return ctx._onAnimationStart($event); })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) { return ctx._onAnimationDone($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._id);\n        ɵngcc0.ɵɵattribute(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._state);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatDialogContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, directives: [ɵngcc2.CdkPortalOutlet], styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], encapsulation: 2, data: { animation: [matDialogAnimations.dialogContainer] } });\nconst ɵMatDialogContainer_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatDialogContainer);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContainer, [{\n        type: Component,\n        args: [{\n                selector: 'mat-dialog-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                animations: [matDialogAnimations.dialogContainer],\n                host: {\n                    'class': 'mat-dialog-container',\n                    'tabindex': '-1',\n                    'aria-modal': 'true',\n                    '[id]': '_id',\n                    '[attr.role]': '_config.role',\n                    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                    '[attr.aria-label]': '_config.ariaLabel',\n                    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    '[@dialogContainer]': '_state',\n                    '(@dialogContainer.start)': '_onAnimationStart($event)',\n                    '(@dialogContainer.done)': '_onAnimationDone($event)'\n                },\n                styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nclass MatDialogRef {\n    constructor(_overlayRef, _containerInstance, id = `mat-dialog-${uniqueId++}`) {\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        this.id = id;\n        /** Whether the user is allowed to close the dialog. */\n        this.disableClose = this._containerInstance._config.disableClose;\n        /** Subject for notifying the user that the dialog has finished opening. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the dialog has finished closing. */\n        this._afterClosed = new Subject();\n        /** Subject for notifying the user that the dialog has started closing. */\n        this._beforeClosed = new Subject();\n        /** Current state of the dialog. */\n        this._state = 0 /* OPEN */;\n        // Pass the id along to the container.\n        _containerInstance._id = id;\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'opened'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closed'), take(1)).subscribe(() => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        });\n        _overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._afterClosed.next(this._result);\n            this._afterClosed.complete();\n            this.componentInstance = null;\n            this._overlayRef.dispose();\n        });\n        _overlayRef.keydownEvents()\n            .pipe(filter(event => {\n            return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n        }))\n            .subscribe(event => {\n            event.preventDefault();\n            _closeDialogVia(this, 'keyboard');\n        });\n        _overlayRef.backdropClick().subscribe(() => {\n            if (this.disableClose) {\n                this._containerInstance._recaptureFocus();\n            }\n            else {\n                _closeDialogVia(this, 'mouse');\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closing'), take(1))\n            .subscribe(event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n        });\n        this._state = 1 /* CLOSING */;\n        this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened() {\n        return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed() {\n        return this._afterClosed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed() {\n        return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick() {\n        return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents() {\n        return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position) {\n        let strategy = this._getPositionStrategy();\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this._overlayRef.updateSize({ width, height });\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this._overlayRef.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this._overlayRef.removePanelClass(classes);\n        return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n    _finishDialogClose() {\n        this._state = 2 /* CLOSED */;\n        this._overlayRef.dispose();\n    }\n    /** Fetches the position strategy object from the overlay ref. */\n    _getPositionStrategy() {\n        return this._overlayRef.getConfig().positionStrategy;\n    }\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nfunction _closeDialogVia(ref, interactionType, result) {\n    // Some mock dialog ref instances in tests do not have the `_containerInstance` property.\n    // For those, we keep the behavior as is and do not deal with the interaction type.\n    if (ref._containerInstance !== undefined) {\n        ref._containerInstance._closeInteractionType = interactionType;\n    }\n    return ref.close(result);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Base class for dialog services. The base dialog service allows\n * for arbitrary dialog refs and dialog container components.\n */\nclass _MatDialogBase {\n    constructor(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._dialogRefConstructor = _dialogRefConstructor;\n        this._dialogContainerType = _dialogContainerType;\n        this._dialogDataToken = _dialogDataToken;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        // TODO (jelbourn): tighten the typing right-hand side of this expression.\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length ?\n            this._getAfterAllClosed() :\n            this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    open(componentOrTemplateRef, config) {\n        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n        if (config.id && this.getDialogById(config.id) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        const overlayRef = this._createOverlay(config);\n        const dialogContainer = this._attachDialogContainer(overlayRef, config);\n        const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n        this.afterOpened.next(dialogRef);\n        // Notify the dialog container that the content has been attached.\n        dialogContainer._initializeWithAttachedContent();\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the OverlayRef for the created overlay.\n     */\n    _createOverlay(config) {\n        const overlayConfig = this._getOverlayConfig(config);\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param dialogConfig The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    _getOverlayConfig(dialogConfig) {\n        const state = new OverlayConfig({\n            positionStrategy: this._overlay.position().global(),\n            scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n            panelClass: dialogConfig.panelClass,\n            hasBackdrop: dialogConfig.hasBackdrop,\n            direction: dialogConfig.direction,\n            minWidth: dialogConfig.minWidth,\n            minHeight: dialogConfig.minHeight,\n            maxWidth: dialogConfig.maxWidth,\n            maxHeight: dialogConfig.maxHeight,\n            disposeOnNavigation: dialogConfig.closeOnNavigation\n        });\n        if (dialogConfig.backdropClass) {\n            state.backdropClass = dialogConfig.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachDialogContainer(overlay, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatDialogConfig, useValue: config }]\n        });\n        const containerPortal = new ComponentPortal(this._dialogContainerType, config.viewContainerRef, injector, config.componentFactoryResolver);\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogContainer Reference to the wrapping dialog container.\n     * @param overlayRef Reference to the overlay in which the dialog resides.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        // Create a reference to the dialog we're creating in order to give the user a handle\n        // to modify and close it.\n        const dialogRef = new this._dialogRefConstructor(overlayRef, dialogContainer, config.id);\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, { $implicit: config.data, dialogRef }));\n        }\n        else {\n            const injector = this._createInjector(config, dialogRef, dialogContainer);\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n        dialogRef\n            .updateSize(config.width, config.height)\n            .updatePosition(config.position);\n        return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog.\n     * @param dialogContainer Dialog container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        // The dialog container should be provided as the dialog container and the dialog's\n        // content are created out of the same `ViewContainerRef` and as such, are siblings\n        // for injector purposes. To allow the hierarchy that is expected, the dialog\n        // container is explicitly provided in the injector.\n        const providers = [\n            { provide: this._dialogContainerType, useValue: dialogContainer },\n            { provide: this._dialogDataToken, useValue: config.data },\n            { provide: this._dialogRefConstructor, useValue: dialogRef }\n        ];\n        if (config.direction &&\n            (!userInjector || !userInjector.get(Directionality, null))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() }\n            });\n        }\n        return Injector.create({ parent: userInjector || this._injector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     */\n    _removeOpenDialog(dialogRef) {\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n                this._ariaHiddenElements.clear();\n                this._getAfterAllClosed().next();\n            }\n        }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                let sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    /** Closes all of the dialogs in an array. */\n    _closeDialogs(dialogs) {\n        let i = dialogs.length;\n        while (i--) {\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\n            // runs on the next microtask, in addition to modifying the array as we're going\n            // through it. We loop through all of them and call close without assuming that\n            // they'll be removed from the list instantaneously.\n            dialogs[i].close();\n        }\n    }\n}\n_MatDialogBase.ɵfac = function _MatDialogBase_Factory(t) { return new (t || _MatDialogBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.OverlayContainer), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Type), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Type), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.InjectionToken)); };\n_MatDialogBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatDialogBase });\n_MatDialogBase.ctorParameters = () => [\n    { type: Overlay },\n    { type: Injector },\n    { type: undefined },\n    { type: undefined },\n    { type: OverlayContainer },\n    { type: undefined },\n    { type: Type },\n    { type: Type },\n    { type: InjectionToken }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatDialogBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc3.Overlay }, { type: ɵngcc0.Injector }, { type: undefined }, { type: undefined }, { type: ɵngcc3.OverlayContainer }, { type: undefined }, { type: ɵngcc0.Type }, { type: ɵngcc0.Type }, { type: ɵngcc0.InjectionToken }]; }, null); })();\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog extends _MatDialogBase {\n    constructor(overlay, injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    location, defaultOptions, scrollStrategy, parentDialog, overlayContainer) {\n        super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA);\n    }\n}\nMatDialog.ɵfac = function MatDialog_Factory(t) { return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer)); };\nMatDialog.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MatDialog, factory: MatDialog.ɵfac });\nMatDialog.ctorParameters = () => [\n    { type: Overlay },\n    { type: Injector },\n    { type: Location, decorators: [{ type: Optional }] },\n    { type: MatDialogConfig, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_SCROLL_STRATEGY,] }] },\n    { type: MatDialog, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: OverlayContainer }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialog, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc3.Overlay }, { type: ɵngcc0.Injector }, { type: ɵngcc4.Location, decorators: [{\n                type: Optional\n            }] }, { type: MatDialogConfig, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DIALOG_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_DIALOG_SCROLL_STRATEGY]\n            }] }, { type: MatDialog, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc3.OverlayContainer }]; }, null); })();\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(config, defaultOptions) {\n    return Object.assign(Object.assign({}, defaultOptions), config);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Default to \"button\" to prevents accidental form submits. */\n        this.type = 'button';\n    }\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n    }\n    ngOnChanges(changes) {\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n    _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n}\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) { return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogClose.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogClose, selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]], hostVars: 2, hostBindings: function MatDialogClose_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler($event) { return ctx._onButtonClick($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n    } }, inputs: { type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, exportAs: [\"matDialogClose\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nMatDialogClose.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogClose.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    type: [{ type: Input }],\n    dialogResult: [{ type: Input, args: ['mat-dialog-close',] }],\n    _matDialogClose: [{ type: Input, args: ['matDialogClose',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogClose, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-close], [matDialogClose]',\n                exportAs: 'matDialogClose',\n                host: {\n                    '(click)': '_onButtonClick($event)',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.type]': 'type'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { type: [{\n            type: Input\n        }], dialogResult: [{\n            type: Input,\n            args: ['mat-dialog-close']\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _matDialogClose: [{\n            type: Input,\n            args: ['matDialogClose']\n        }] }); })();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    _dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                const container = this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = this.id;\n                }\n            });\n        }\n    }\n}\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) { return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogTitle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogTitle, selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]], hostAttrs: [1, \"mat-dialog-title\"], hostVars: 1, hostBindings: function MatDialogTitle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n    } }, inputs: { id: \"id\" }, exportAs: [\"matDialogTitle\"] });\nMatDialogTitle.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogTitle.propDecorators = {\n    id: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogTitle, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-title], [matDialogTitle]',\n                exportAs: 'matDialogTitle',\n                host: {\n                    'class': 'mat-dialog-title',\n                    '[id]': 'id'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { id: [{\n            type: Input\n        }] }); })();\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n}\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) { return new (t || MatDialogContent)(); };\nMatDialogContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogContent, selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]], hostAttrs: [1, \"mat-dialog-content\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContent, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                host: { 'class': 'mat-dialog-content' }\n            }]\n    }], null, null); })();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {\n}\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) { return new (t || MatDialogActions)(); };\nMatDialogActions.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogActions, selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]], hostAttrs: [1, \"mat-dialog-actions\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogActions, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                host: { 'class': 'mat-dialog-actions' }\n            }]\n    }], null, null); })();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatDialogModule {\n}\nMatDialogModule.ɵfac = function MatDialogModule_Factory(t) { return new (t || MatDialogModule)(); };\nMatDialogModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatDialogModule });\nMatDialogModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [\n        MatDialog,\n        MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[\n            OverlayModule,\n            PortalModule,\n            MatCommonModule,\n        ], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, { declarations: function () { return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        MatCommonModule]; }, exports: function () { return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogContent,\n                    MatDialogActions,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogActions,\n                    MatDialogContent,\n                ],\n                providers: [\n                    MatDialog,\n                    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n                ],\n                entryComponents: [MatDialogContainer]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, matDialogAnimations, throwMatDialogContentAlreadyAttachedError };\n\n//# sourceMappingURL=dialog.js.map"]},"metadata":{},"sourceType":"module"}