{"ast":null,"code":"import _createClass from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { _getShadowRoot, Platform } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\n\nfunction MatProgressSpinner__svg_circle_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0._spinnerAnimationLabel)(\"stroke-dashoffset\", ctx_r0._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r0._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r0._getCircleStrokeWidth(), \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._getCircleRadius());\n  }\n}\n\nfunction MatProgressSpinner__svg_circle_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r1._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r1._getCircleStrokeWidth(), \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._getCircleRadius());\n  }\n}\n\nfunction MatSpinner__svg_circle_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0._spinnerAnimationLabel)(\"stroke-dashoffset\", ctx_r0._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r0._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r0._getCircleStrokeWidth(), \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._getCircleRadius());\n  }\n}\n\nfunction MatSpinner__svg_circle_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r1._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r1._getCircleStrokeWidth(), \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._getCircleRadius());\n  }\n}\n\nvar _c0 = \".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\";\nvar BASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\n\nvar BASE_STROKE_WIDTH = 10; // Boilerplate for applying mixins to MatProgressSpinner.\n\n/** @docs-private */\n\nvar MatProgressSpinnerBase = function MatProgressSpinnerBase(_elementRef) {\n  _classCallCheck(this, MatProgressSpinnerBase);\n\n  this._elementRef = _elementRef;\n};\n\nvar _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\n\n\nvar MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\n  providedIn: 'root',\n  factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    diameter: BASE_SIZE\n  };\n} // .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\n\n\nvar INDETERMINATE_ANIMATION_TEMPLATE = \"\\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\\n\\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\\n\\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\\n\\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\\n  }\\n\";\n/**\n * `<mat-progress-spinner>` component.\n */\n\nvar MatProgressSpinner = /*#__PURE__*/function (_MatProgressSpinnerMi) {\n  _inherits(MatProgressSpinner, _MatProgressSpinnerMi);\n\n  var _super = _createSuper(MatProgressSpinner);\n\n  function MatProgressSpinner(_elementRef, platform, _document, animationMode, defaults) {\n    var _this;\n\n    _classCallCheck(this, MatProgressSpinner);\n\n    _this = _super.call(this, _elementRef);\n    _this._elementRef = _elementRef;\n    _this._document = _document;\n    _this._diameter = BASE_SIZE;\n    _this._value = 0;\n    _this._fallbackAnimation = false;\n    /** Mode of the progress circle */\n\n    _this.mode = 'determinate';\n    var trackedDiameters = MatProgressSpinner._diameters;\n    _this._spinnerAnimationLabel = _this._getSpinnerAnimationLabel(); // The base size is already inserted via the component's structural styles. We still\n    // need to track it so we don't end up adding the same styles again.\n\n    if (!trackedDiameters.has(_document.head)) {\n      trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\n    }\n\n    _this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    _this._noopAnimations = animationMode === 'NoopAnimations' && !!defaults && !defaults._forceAnimations;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        _this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        _this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    return _this;\n  }\n  /** The diameter of the progress spinner (will set width and height of svg). */\n\n\n  _createClass(MatProgressSpinner, [{\n    key: \"diameter\",\n    get: function get() {\n      return this._diameter;\n    },\n    set: function set(size) {\n      this._diameter = coerceNumberProperty(size);\n      this._spinnerAnimationLabel = this._getSpinnerAnimationLabel(); // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n\n      if (!this._fallbackAnimation && this._styleRoot) {\n        this._attachStyleNode();\n      }\n    }\n    /** Stroke width of the progress spinner. */\n\n  }, {\n    key: \"strokeWidth\",\n    get: function get() {\n      return this._strokeWidth || this.diameter / 10;\n    },\n    set: function set(value) {\n      this._strokeWidth = coerceNumberProperty(value);\n    }\n    /** Value of the progress circle. */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.mode === 'determinate' ? this._value : 0;\n    },\n    set: function set(newValue) {\n      this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var element = this._elementRef.nativeElement; // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n      // Angular seems to create the element outside the shadow root and then moves it inside, if the\n      // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n\n      this._styleRoot = _getShadowRoot(element) || this._document.head;\n\n      this._attachStyleNode(); // On IE and Edge, we can't animate the `stroke-dashoffset`\n      // reliably so we fall back to a non-spec animation.\n\n\n      var animationClass = \"mat-progress-spinner-indeterminate\".concat(this._fallbackAnimation ? '-fallback' : '', \"-animation\");\n      element.classList.add(animationClass);\n    }\n    /** The radius of the spinner, adjusted for stroke width. */\n\n  }, {\n    key: \"_getCircleRadius\",\n    value: function _getCircleRadius() {\n      return (this.diameter - BASE_STROKE_WIDTH) / 2;\n    }\n    /** The view box of the spinner's svg element. */\n\n  }, {\n    key: \"_getViewBox\",\n    value: function _getViewBox() {\n      var viewBox = this._getCircleRadius() * 2 + this.strokeWidth;\n      return \"0 0 \".concat(viewBox, \" \").concat(viewBox);\n    }\n    /** The stroke circumference of the svg circle. */\n\n  }, {\n    key: \"_getStrokeCircumference\",\n    value: function _getStrokeCircumference() {\n      return 2 * Math.PI * this._getCircleRadius();\n    }\n    /** The dash offset of the svg circle. */\n\n  }, {\n    key: \"_getStrokeDashOffset\",\n    value: function _getStrokeDashOffset() {\n      if (this.mode === 'determinate') {\n        return this._getStrokeCircumference() * (100 - this._value) / 100;\n      } // In fallback mode set the circle to 80% and rotate it with CSS.\n\n\n      if (this._fallbackAnimation && this.mode === 'indeterminate') {\n        return this._getStrokeCircumference() * 0.2;\n      }\n\n      return null;\n    }\n    /** Stroke width of the circle in percent. */\n\n  }, {\n    key: \"_getCircleStrokeWidth\",\n    value: function _getCircleStrokeWidth() {\n      return this.strokeWidth / this.diameter * 100;\n    }\n    /** Dynamically generates a style tag containing the correct animation for this diameter. */\n\n  }, {\n    key: \"_attachStyleNode\",\n    value: function _attachStyleNode() {\n      var styleRoot = this._styleRoot;\n      var currentDiameter = this._diameter;\n      var diameters = MatProgressSpinner._diameters;\n      var diametersForElement = diameters.get(styleRoot);\n\n      if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n        var styleTag = this._document.createElement('style');\n\n        styleTag.setAttribute('mat-spinner-animation', this._spinnerAnimationLabel);\n        styleTag.textContent = this._getAnimationText();\n        styleRoot.appendChild(styleTag);\n\n        if (!diametersForElement) {\n          diametersForElement = new Set();\n          diameters.set(styleRoot, diametersForElement);\n        }\n\n        diametersForElement.add(currentDiameter);\n      }\n    }\n    /** Generates animation styles adjusted for the spinner's diameter. */\n\n  }, {\n    key: \"_getAnimationText\",\n    value: function _getAnimationText() {\n      var strokeCircumference = this._getStrokeCircumference();\n\n      return INDETERMINATE_ANIMATION_TEMPLATE // Animation should begin at 5% and end at 80%\n      .replace(/START_VALUE/g, \"\".concat(0.95 * strokeCircumference)).replace(/END_VALUE/g, \"\".concat(0.2 * strokeCircumference)).replace(/DIAMETER/g, \"\".concat(this._spinnerAnimationLabel));\n    }\n    /** Returns the circle diameter formatted for use with the animation-name CSS property. */\n\n  }, {\n    key: \"_getSpinnerAnimationLabel\",\n    value: function _getSpinnerAnimationLabel() {\n      // The string of a float point number will include a period ‘.’ character,\n      // which is not valid for a CSS animation-name.\n      return this.diameter.toString().replace('.', '_');\n    }\n  }]);\n\n  return MatProgressSpinner;\n}(_MatProgressSpinnerMixinBase);\n\nMatProgressSpinner.ɵfac = function MatProgressSpinner_Factory(t) {\n  return new (t || MatProgressSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS));\n};\n\nMatProgressSpinner.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatProgressSpinner,\n  selectors: [[\"mat-progress-spinner\"]],\n  hostAttrs: [\"role\", \"progressbar\", 1, \"mat-progress-spinner\"],\n  hostVars: 10,\n  hostBindings: function MatProgressSpinner_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-valuemin\", ctx.mode === \"determinate\" ? 0 : null)(\"aria-valuemax\", ctx.mode === \"determinate\" ? 100 : null)(\"aria-valuenow\", ctx.mode === \"determinate\" ? ctx.value : null)(\"mode\", ctx.mode);\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n      ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    mode: \"mode\",\n    diameter: \"diameter\",\n    strokeWidth: \"strokeWidth\",\n    value: \"value\"\n  },\n  exportAs: [\"matProgressSpinner\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 8,\n  consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]],\n  template: function MatProgressSpinner_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n      ɵngcc0.ɵɵtemplate(1, MatProgressSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n      ɵngcc0.ɵɵtemplate(2, MatProgressSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n      ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n      ɵngcc0.ɵɵattribute(\"viewBox\", ctx._getViewBox());\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    }\n  },\n  directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase],\n  styles: [_c0],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/**\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n * We need to keep track of which elements the diameters were attached to, because for\n * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n * than the document head.\n */\n\nMatProgressSpinner._diameters = new WeakMap();\n\nMatProgressSpinner.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Platform\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\nMatProgressSpinner.propDecorators = {\n  diameter: [{\n    type: Input\n  }],\n  strokeWidth: [{\n    type: Input\n  }],\n  mode: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatProgressSpinner, [{\n    type: Component,\n    args: [{\n      selector: 'mat-progress-spinner',\n      exportAs: 'matProgressSpinner',\n      host: {\n        'role': 'progressbar',\n        'class': 'mat-progress-spinner',\n        '[class._mat-animation-noopable]': \"_noopAnimations\",\n        '[style.width.px]': 'diameter',\n        '[style.height.px]': 'diameter',\n        '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n        '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n        '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n        '[attr.mode]': 'mode'\n      },\n      inputs: ['color'],\n      template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n</svg>\\n\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    mode: [{\n      type: Input\n    }],\n    diameter: [{\n      type: Input\n    }],\n    strokeWidth: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n\n\nvar MatSpinner = /*#__PURE__*/function (_MatProgressSpinner) {\n  _inherits(MatSpinner, _MatProgressSpinner);\n\n  var _super2 = _createSuper(MatSpinner);\n\n  function MatSpinner(elementRef, platform, document, animationMode, defaults) {\n    var _this2;\n\n    _classCallCheck(this, MatSpinner);\n\n    _this2 = _super2.call(this, elementRef, platform, document, animationMode, defaults);\n    _this2.mode = 'indeterminate';\n    return _this2;\n  }\n\n  return MatSpinner;\n}(MatProgressSpinner);\n\nMatSpinner.ɵfac = function MatSpinner_Factory(t) {\n  return new (t || MatSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS));\n};\n\nMatSpinner.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatSpinner,\n  selectors: [[\"mat-spinner\"]],\n  hostAttrs: [\"role\", \"progressbar\", \"mode\", \"indeterminate\", 1, \"mat-spinner\", \"mat-progress-spinner\"],\n  hostVars: 6,\n  hostBindings: function MatSpinner_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n      ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    }\n  },\n  inputs: {\n    color: \"color\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 8,\n  consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]],\n  template: function MatSpinner_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n      ɵngcc0.ɵɵtemplate(1, MatSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n      ɵngcc0.ɵɵtemplate(2, MatSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n      ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n      ɵngcc0.ɵɵattribute(\"viewBox\", ctx._getViewBox());\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    }\n  },\n  directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase],\n  styles: [_c0],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nMatSpinner.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Platform\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSpinner, [{\n    type: Component,\n    args: [{\n      selector: 'mat-spinner',\n      host: {\n        'role': 'progressbar',\n        'mode': 'indeterminate',\n        'class': 'mat-spinner mat-progress-spinner',\n        '[class._mat-animation-noopable]': \"_noopAnimations\",\n        '[style.width.px]': 'diameter',\n        '[style.height.px]': 'diameter'\n      },\n      inputs: ['color'],\n      template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n</svg>\\n\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatProgressSpinnerModule = function MatProgressSpinnerModule() {\n  _classCallCheck(this, MatProgressSpinnerModule);\n};\n\nMatProgressSpinnerModule.ɵfac = function MatProgressSpinnerModule_Factory(t) {\n  return new (t || MatProgressSpinnerModule)();\n};\n\nMatProgressSpinnerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatProgressSpinnerModule\n});\nMatProgressSpinnerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  imports: [[MatCommonModule, CommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatProgressSpinnerModule, {\n    declarations: function declarations() {\n      return [MatProgressSpinner, MatSpinner];\n    },\n    imports: function imports() {\n      return [MatCommonModule, CommonModule];\n    },\n    exports: function exports() {\n      return [MatProgressSpinner, MatSpinner, MatCommonModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatProgressSpinnerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule, CommonModule],\n      exports: [MatProgressSpinner, MatSpinner, MatCommonModule],\n      declarations: [MatProgressSpinner, MatSpinner]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinner, MatProgressSpinnerModule, MatSpinner }; //# sourceMappingURL=progress-spinner.js.map","map":{"version":3,"sources":["/Users/mohammedelmourabit/xrp/xpr/node_modules/@angular/material/__ivy_ngcc__/fesm2015/progress-spinner.js"],"names":["InjectionToken","Component","ChangeDetectionStrategy","ViewEncapsulation","ElementRef","Optional","Inject","Input","NgModule","DOCUMENT","CommonModule","mixinColor","MatCommonModule","coerceNumberProperty","_getShadowRoot","Platform","ANIMATION_MODULE_TYPE","ɵngcc0","ɵngcc1","ɵngcc2","MatProgressSpinner__svg_circle_1_Template","rf","ctx","ɵɵnamespaceSVG","ɵɵelement","ctx_r0","ɵɵnextContext","ɵɵstyleProp","_spinnerAnimationLabel","_getStrokeDashOffset","_getStrokeCircumference","_getCircleStrokeWidth","ɵɵattribute","_getCircleRadius","MatProgressSpinner__svg_circle_2_Template","ctx_r1","MatSpinner__svg_circle_1_Template","MatSpinner__svg_circle_2_Template","_c0","BASE_SIZE","BASE_STROKE_WIDTH","MatProgressSpinnerBase","_elementRef","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","providedIn","factory","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","diameter","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","_document","animationMode","defaults","_diameter","_value","_fallbackAnimation","mode","trackedDiameters","_diameters","_getSpinnerAnimationLabel","has","head","set","Set","EDGE","TRIDENT","_noopAnimations","_forceAnimations","strokeWidth","size","_styleRoot","_attachStyleNode","_strokeWidth","value","newValue","Math","max","min","element","nativeElement","animationClass","classList","add","viewBox","PI","styleRoot","currentDiameter","diameters","diametersForElement","get","styleTag","createElement","setAttribute","textContent","_getAnimationText","appendChild","strokeCircumference","replace","toString","ɵfac","MatProgressSpinner_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","hostVars","hostBindings","MatProgressSpinner_HostBindings","ɵɵclassProp","inputs","color","exportAs","features","ɵɵInheritDefinitionFeature","decls","vars","consts","template","MatProgressSpinner_Template","ɵɵelementStart","ɵɵtemplate","ɵɵelementEnd","ɵɵproperty","_getViewBox","ɵɵadvance","directives","NgSwitch","NgSwitchCase","styles","encapsulation","changeDetection","WeakMap","ctorParameters","undefined","decorators","args","String","propDecorators","ngDevMode","ɵsetClassMetadata","selector","host","OnPush","None","MatSpinner","elementRef","document","MatSpinner_Factory","MatSpinner_HostBindings","MatSpinner_Template","MatProgressSpinnerModule","MatProgressSpinnerModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["import { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { _getShadowRoot, Platform } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\n\nfunction MatProgressSpinner__svg_circle_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0._spinnerAnimationLabel)(\"stroke-dashoffset\", ctx_r0._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r0._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r0._getCircleStrokeWidth(), \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._getCircleRadius());\n} }\nfunction MatProgressSpinner__svg_circle_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r1._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r1._getCircleStrokeWidth(), \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._getCircleRadius());\n} }\nfunction MatSpinner__svg_circle_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0._spinnerAnimationLabel)(\"stroke-dashoffset\", ctx_r0._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r0._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r0._getCircleStrokeWidth(), \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._getCircleRadius());\n} }\nfunction MatSpinner__svg_circle_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r1._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r1._getCircleStrokeWidth(), \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._getCircleRadius());\n} }\nconst _c0 = \".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\";\nconst BASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nclass MatProgressSpinnerBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nconst MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\n    providedIn: 'root',\n    factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n    return { diameter: BASE_SIZE };\n}\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n/**\n * `<mat-progress-spinner>` component.\n */\nclass MatProgressSpinner extends _MatProgressSpinnerMixinBase {\n    constructor(_elementRef, platform, _document, animationMode, defaults) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._document = _document;\n        this._diameter = BASE_SIZE;\n        this._value = 0;\n        this._fallbackAnimation = false;\n        /** Mode of the progress circle */\n        this.mode = 'determinate';\n        const trackedDiameters = MatProgressSpinner._diameters;\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n        // The base size is already inserted via the component's structural styles. We still\n        // need to track it so we don't end up adding the same styles again.\n        if (!trackedDiameters.has(_document.head)) {\n            trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\n        }\n        this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n        this._noopAnimations = animationMode === 'NoopAnimations' &&\n            (!!defaults && !defaults._forceAnimations);\n        if (defaults) {\n            if (defaults.diameter) {\n                this.diameter = defaults.diameter;\n            }\n            if (defaults.strokeWidth) {\n                this.strokeWidth = defaults.strokeWidth;\n            }\n        }\n    }\n    /** The diameter of the progress spinner (will set width and height of svg). */\n    get diameter() { return this._diameter; }\n    set diameter(size) {\n        this._diameter = coerceNumberProperty(size);\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n        // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n        if (!this._fallbackAnimation && this._styleRoot) {\n            this._attachStyleNode();\n        }\n    }\n    /** Stroke width of the progress spinner. */\n    get strokeWidth() {\n        return this._strokeWidth || this.diameter / 10;\n    }\n    set strokeWidth(value) {\n        this._strokeWidth = coerceNumberProperty(value);\n    }\n    /** Value of the progress circle. */\n    get value() {\n        return this.mode === 'determinate' ? this._value : 0;\n    }\n    set value(newValue) {\n        this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n    }\n    ngOnInit() {\n        const element = this._elementRef.nativeElement;\n        // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n        // Angular seems to create the element outside the shadow root and then moves it inside, if the\n        // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n        this._styleRoot = _getShadowRoot(element) || this._document.head;\n        this._attachStyleNode();\n        // On IE and Edge, we can't animate the `stroke-dashoffset`\n        // reliably so we fall back to a non-spec animation.\n        const animationClass = `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n        element.classList.add(animationClass);\n    }\n    /** The radius of the spinner, adjusted for stroke width. */\n    _getCircleRadius() {\n        return (this.diameter - BASE_STROKE_WIDTH) / 2;\n    }\n    /** The view box of the spinner's svg element. */\n    _getViewBox() {\n        const viewBox = this._getCircleRadius() * 2 + this.strokeWidth;\n        return `0 0 ${viewBox} ${viewBox}`;\n    }\n    /** The stroke circumference of the svg circle. */\n    _getStrokeCircumference() {\n        return 2 * Math.PI * this._getCircleRadius();\n    }\n    /** The dash offset of the svg circle. */\n    _getStrokeDashOffset() {\n        if (this.mode === 'determinate') {\n            return this._getStrokeCircumference() * (100 - this._value) / 100;\n        }\n        // In fallback mode set the circle to 80% and rotate it with CSS.\n        if (this._fallbackAnimation && this.mode === 'indeterminate') {\n            return this._getStrokeCircumference() * 0.2;\n        }\n        return null;\n    }\n    /** Stroke width of the circle in percent. */\n    _getCircleStrokeWidth() {\n        return this.strokeWidth / this.diameter * 100;\n    }\n    /** Dynamically generates a style tag containing the correct animation for this diameter. */\n    _attachStyleNode() {\n        const styleRoot = this._styleRoot;\n        const currentDiameter = this._diameter;\n        const diameters = MatProgressSpinner._diameters;\n        let diametersForElement = diameters.get(styleRoot);\n        if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n            const styleTag = this._document.createElement('style');\n            styleTag.setAttribute('mat-spinner-animation', this._spinnerAnimationLabel);\n            styleTag.textContent = this._getAnimationText();\n            styleRoot.appendChild(styleTag);\n            if (!diametersForElement) {\n                diametersForElement = new Set();\n                diameters.set(styleRoot, diametersForElement);\n            }\n            diametersForElement.add(currentDiameter);\n        }\n    }\n    /** Generates animation styles adjusted for the spinner's diameter. */\n    _getAnimationText() {\n        const strokeCircumference = this._getStrokeCircumference();\n        return INDETERMINATE_ANIMATION_TEMPLATE\n            // Animation should begin at 5% and end at 80%\n            .replace(/START_VALUE/g, `${0.95 * strokeCircumference}`)\n            .replace(/END_VALUE/g, `${0.2 * strokeCircumference}`)\n            .replace(/DIAMETER/g, `${this._spinnerAnimationLabel}`);\n    }\n    /** Returns the circle diameter formatted for use with the animation-name CSS property. */\n    _getSpinnerAnimationLabel() {\n        // The string of a float point number will include a period ‘.’ character,\n        // which is not valid for a CSS animation-name.\n        return this.diameter.toString().replace('.', '_');\n    }\n}\nMatProgressSpinner.ɵfac = function MatProgressSpinner_Factory(t) { return new (t || MatProgressSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)); };\nMatProgressSpinner.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatProgressSpinner, selectors: [[\"mat-progress-spinner\"]], hostAttrs: [\"role\", \"progressbar\", 1, \"mat-progress-spinner\"], hostVars: 10, hostBindings: function MatProgressSpinner_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-valuemin\", ctx.mode === \"determinate\" ? 0 : null)(\"aria-valuemax\", ctx.mode === \"determinate\" ? 100 : null)(\"aria-valuenow\", ctx.mode === \"determinate\" ? ctx.value : null)(\"mode\", ctx.mode);\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    } }, inputs: { color: \"color\", mode: \"mode\", diameter: \"diameter\", strokeWidth: \"strokeWidth\", value: \"value\" }, exportAs: [\"matProgressSpinner\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 8, consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]], template: function MatProgressSpinner_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatProgressSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatProgressSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._getViewBox());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    } }, directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: [_c0], encapsulation: 2, changeDetection: 0 });\n/**\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n * We need to keep track of which elements the diameters were attached to, because for\n * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n * than the document head.\n */\nMatProgressSpinner._diameters = new WeakMap();\nMatProgressSpinner.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\n];\nMatProgressSpinner.propDecorators = {\n    diameter: [{ type: Input }],\n    strokeWidth: [{ type: Input }],\n    mode: [{ type: Input }],\n    value: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatProgressSpinner, [{\n        type: Component,\n        args: [{\n                selector: 'mat-progress-spinner',\n                exportAs: 'matProgressSpinner',\n                host: {\n                    'role': 'progressbar',\n                    'class': 'mat-progress-spinner',\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\n                    '[style.width.px]': 'diameter',\n                    '[style.height.px]': 'diameter',\n                    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n                    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n                    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n                    '[attr.mode]': 'mode'\n                },\n                inputs: ['color'],\n                template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n</svg>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n            }] }]; }, { mode: [{\n            type: Input\n        }], diameter: [{\n            type: Input\n        }], strokeWidth: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }] }); })();\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\nclass MatSpinner extends MatProgressSpinner {\n    constructor(elementRef, platform, document, animationMode, defaults) {\n        super(elementRef, platform, document, animationMode, defaults);\n        this.mode = 'indeterminate';\n    }\n}\nMatSpinner.ɵfac = function MatSpinner_Factory(t) { return new (t || MatSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)); };\nMatSpinner.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSpinner, selectors: [[\"mat-spinner\"]], hostAttrs: [\"role\", \"progressbar\", \"mode\", \"indeterminate\", 1, \"mat-spinner\", \"mat-progress-spinner\"], hostVars: 6, hostBindings: function MatSpinner_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    } }, inputs: { color: \"color\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 8, consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]], template: function MatSpinner_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._getViewBox());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    } }, directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: [_c0], encapsulation: 2, changeDetection: 0 });\nMatSpinner.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSpinner, [{\n        type: Component,\n        args: [{\n                selector: 'mat-spinner',\n                host: {\n                    'role': 'progressbar',\n                    'mode': 'indeterminate',\n                    'class': 'mat-spinner mat-progress-spinner',\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\n                    '[style.width.px]': 'diameter',\n                    '[style.height.px]': 'diameter'\n                },\n                inputs: ['color'],\n                template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n</svg>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatProgressSpinnerModule {\n}\nMatProgressSpinnerModule.ɵfac = function MatProgressSpinnerModule_Factory(t) { return new (t || MatProgressSpinnerModule)(); };\nMatProgressSpinnerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatProgressSpinnerModule });\nMatProgressSpinnerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule, CommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatProgressSpinnerModule, { declarations: function () { return [MatProgressSpinner, MatSpinner]; }, imports: function () { return [MatCommonModule, CommonModule]; }, exports: function () { return [MatProgressSpinner, MatSpinner, MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatProgressSpinnerModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, CommonModule],\n                exports: [\n                    MatProgressSpinner,\n                    MatSpinner,\n                    MatCommonModule\n                ],\n                declarations: [\n                    MatProgressSpinner,\n                    MatSpinner\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinner, MatProgressSpinnerModule, MatSpinner };\n\n//# sourceMappingURL=progress-spinner.js.map"]},"metadata":{},"sourceType":"module"}