{"ast":null,"code":"import _classCallCheck from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Optional, Self, Inject, NgZone, HostListener, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormField, MAT_FORM_FIELD, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/text-field';\nimport * as ɵngcc5 from '@angular/material/form-field';\n\nvar MatTextareaAutosize = /*#__PURE__*/function (_CdkTextareaAutosize) {\n  _inherits(MatTextareaAutosize, _CdkTextareaAutosize);\n\n  var _super = _createSuper(MatTextareaAutosize);\n\n  function MatTextareaAutosize() {\n    _classCallCheck(this, MatTextareaAutosize);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MatTextareaAutosize, [{\n    key: \"matAutosizeMinRows\",\n    get: function get() {\n      return this.minRows;\n    },\n    set: function set(value) {\n      this.minRows = value;\n    }\n  }, {\n    key: \"matAutosizeMaxRows\",\n    get: function get() {\n      return this.maxRows;\n    },\n    set: function set(value) {\n      this.maxRows = value;\n    }\n  }, {\n    key: \"matAutosize\",\n    get: function get() {\n      return this.enabled;\n    },\n    set: function set(value) {\n      this.enabled = value;\n    }\n  }, {\n    key: \"matTextareaAutosize\",\n    get: function get() {\n      return this.enabled;\n    },\n    set: function set(value) {\n      this.enabled = value;\n    }\n  }]);\n\n  return MatTextareaAutosize;\n}(CdkTextareaAutosize);\n\nMatTextareaAutosize.ɵfac = function MatTextareaAutosize_Factory(t) {\n  return ɵMatTextareaAutosize_BaseFactory(t || MatTextareaAutosize);\n};\n\nMatTextareaAutosize.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTextareaAutosize,\n  selectors: [[\"textarea\", \"mat-autosize\", \"\"], [\"textarea\", \"matTextareaAutosize\", \"\"]],\n  hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\", \"mat-autosize\"],\n  inputs: {\n    cdkAutosizeMinRows: \"cdkAutosizeMinRows\",\n    cdkAutosizeMaxRows: \"cdkAutosizeMaxRows\",\n    matAutosizeMinRows: \"matAutosizeMinRows\",\n    matAutosizeMaxRows: \"matAutosizeMaxRows\",\n    matAutosize: [\"mat-autosize\", \"matAutosize\"],\n    matTextareaAutosize: \"matTextareaAutosize\"\n  },\n  exportAs: [\"matTextareaAutosize\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatTextareaAutosize.propDecorators = {\n  matAutosizeMinRows: [{\n    type: Input\n  }],\n  matAutosizeMaxRows: [{\n    type: Input\n  }],\n  matAutosize: [{\n    type: Input,\n    args: ['mat-autosize']\n  }],\n  matTextareaAutosize: [{\n    type: Input\n  }]\n};\nvar ɵMatTextareaAutosize_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatTextareaAutosize);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTextareaAutosize, [{\n    type: Directive,\n    args: [{\n      selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n      exportAs: 'matTextareaAutosize',\n      inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n      host: {\n        'class': 'cdk-textarea-autosize mat-autosize',\n        // Textarea elements that have the directive applied should have a single row by default.\n        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n        'rows': '1'\n      }\n    }]\n  }], null, {\n    matAutosizeMinRows: [{\n      type: Input\n    }],\n    matAutosizeMaxRows: [{\n      type: Input\n    }],\n    matAutosize: [{\n      type: Input,\n      args: ['mat-autosize']\n    }],\n    matTextareaAutosize: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\n\n\nfunction getMatInputUnsupportedTypeError(type) {\n  return Error(\"Input type \\\"\".concat(type, \"\\\" isn't supported by matInput.\"));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\n\n\nvar MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\n\nvar MAT_INPUT_INVALID_TYPES = ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'range', 'reset', 'submit'];\nvar nextUniqueId = 0; // Boilerplate for applying mixins to MatInput.\n\n/** @docs-private */\n\nvar MatInputBase = function MatInputBase(_defaultErrorStateMatcher, _parentForm, _parentFormGroup,\n/** @docs-private */\nngControl) {\n  _classCallCheck(this, MatInputBase);\n\n  this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n  this._parentForm = _parentForm;\n  this._parentFormGroup = _parentFormGroup;\n  this.ngControl = ngControl;\n};\n\nvar _MatInputMixinBase = mixinErrorState(MatInputBase);\n/** Directive that allows a native input to work inside a `MatFormField`. */\n\n\nvar MatInput = /*#__PURE__*/function (_MatInputMixinBase2) {\n  _inherits(MatInput, _MatInputMixinBase2);\n\n  var _super2 = _createSuper(MatInput);\n\n  function MatInput(_elementRef, _platform,\n  /** @docs-private */\n  ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, // TODO: Remove this once the legacy appearance has been removed. We only need\n  // to inject the form-field for determining whether the placeholder has been promoted.\n  _formField) {\n    var _this;\n\n    _classCallCheck(this, MatInput);\n\n    _this = _super2.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    _this._elementRef = _elementRef;\n    _this._platform = _platform;\n    _this.ngControl = ngControl;\n    _this._autofillMonitor = _autofillMonitor;\n    _this._formField = _formField;\n    _this._uid = \"mat-input-\".concat(nextUniqueId++);\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    _this.focused = false;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    _this.stateChanges = new Subject();\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    _this.controlType = 'mat-input';\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    _this.autofilled = false;\n    _this._disabled = false;\n    _this._required = false;\n    _this._type = 'text';\n    _this._readonly = false;\n    _this._neverEmptyInputTypes = ['date', 'datetime', 'datetime-local', 'month', 'time', 'week'].filter(function (t) {\n      return getSupportedInputTypes().has(t);\n    });\n    var element = _this._elementRef.nativeElement;\n    var nodeName = element.nodeName.toLowerCase(); // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n\n    _this._inputValueAccessor = inputValueAccessor || element;\n    _this._previousNativeValue = _this.value; // Force setter to be called in case id was not specified.\n\n    _this.id = _this.id; // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(function () {\n        _elementRef.nativeElement.addEventListener('keyup', function (event) {\n          var el = event.target;\n\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    _this._isServer = !_this._platform.isBrowser;\n    _this._isNativeSelect = nodeName === 'select';\n    _this._isTextarea = nodeName === 'textarea';\n\n    if (_this._isNativeSelect) {\n      _this.controlType = element.multiple ? 'mat-native-select-multiple' : 'mat-native-select';\n    }\n\n    return _this;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  _createClass(MatInput, [{\n    key: \"disabled\",\n    get: function get() {\n      if (this.ngControl && this.ngControl.disabled !== null) {\n        return this.ngControl.disabled;\n      }\n\n      return this._disabled;\n    },\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value); // Browsers may not fire the blur event if the input is disabled too quickly.\n      // Reset from here to ensure that the element doesn't become stuck.\n\n      if (this.focused) {\n        this.focused = false;\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._id;\n    },\n    set: function set(value) {\n      this._id = value || this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"required\",\n    get: function get() {\n      return this._required;\n    },\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n    }\n    /** Input type of the element. */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    },\n    set: function set(value) {\n      this._type = value || 'text';\n\n      this._validateType(); // When using Angular inputs, developers are no longer able to set the properties on the native\n      // input element. To ensure that bindings for `type` work, we need to sync the setter\n      // with the native property. Textarea elements don't support the type property or attribute.\n\n\n      if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n        this._elementRef.nativeElement.type = this._type;\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._inputValueAccessor.value;\n    },\n    set: function set(value) {\n      if (value !== this.value) {\n        this._inputValueAccessor.value = value;\n        this.stateChanges.next();\n      }\n    }\n    /** Whether the element is readonly. */\n\n  }, {\n    key: \"readonly\",\n    get: function get() {\n      return this._readonly;\n    },\n    set: function set(value) {\n      this._readonly = coerceBooleanProperty(value);\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this2 = this;\n\n      if (this._platform.isBrowser) {\n        this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(function (event) {\n          _this2.autofilled = event.isAutofilled;\n\n          _this2.stateChanges.next();\n        });\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      this.stateChanges.next();\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.stateChanges.complete();\n\n      if (this._platform.isBrowser) {\n        this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n      }\n    }\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (this.ngControl) {\n        // We need to re-evaluate this on every change detection cycle, because there are some\n        // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n        // that whatever logic is in here has to be super lean or we risk destroying the performance.\n        this.updateErrorState();\n      } // We need to dirty-check the native element's value, because there are some cases where\n      // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n      // updating the value using `emitEvent: false`).\n\n\n      this._dirtyCheckNativeValue(); // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n      // present or not depends on a query which is prone to \"changed after checked\" errors.\n\n\n      this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n\n  }, {\n    key: \"focus\",\n    value: function focus(options) {\n      this._elementRef.nativeElement.focus(options);\n    } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n\n    /** Callback for the cases where the focused state of the input changes. */\n    // tslint:disable:no-host-decorator-in-concrete\n    // tslint:enable:no-host-decorator-in-concrete\n\n  }, {\n    key: \"_focusChanged\",\n    value: function _focusChanged(isFocused) {\n      if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n        this.focused = isFocused;\n        this.stateChanges.next();\n      }\n    } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n\n  }, {\n    key: \"_onInput\",\n    value: function _onInput() {// This is a noop function and is used to let Angular know whenever the value changes.\n      // Angular will run a new change detection each time the `input` event has been dispatched.\n      // It's necessary that Angular recognizes the value change, because when floatingLabel\n      // is set to false and Angular forms aren't used, the placeholder won't recognize the\n      // value changes and will not disappear.\n      // Listening to the input event wouldn't be necessary when the input is using the\n      // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n\n  }, {\n    key: \"_dirtyCheckPlaceholder\",\n    value: function _dirtyCheckPlaceholder() {\n      var _a, _b; // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n      // screen readers will read it out twice: once from the label and once from the attribute.\n      // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n      // the only one that supports promoting the placeholder to a label.\n\n\n      var placeholder = ((_b = (_a = this._formField) === null || _a === void 0 ? void 0 : _a._hideControlPlaceholder) === null || _b === void 0 ? void 0 : _b.call(_a)) ? null : this.placeholder;\n\n      if (placeholder !== this._previousPlaceholder) {\n        var element = this._elementRef.nativeElement;\n        this._previousPlaceholder = placeholder;\n        placeholder ? element.setAttribute('placeholder', placeholder) : element.removeAttribute('placeholder');\n      }\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n\n  }, {\n    key: \"_dirtyCheckNativeValue\",\n    value: function _dirtyCheckNativeValue() {\n      var newValue = this._elementRef.nativeElement.value;\n\n      if (this._previousNativeValue !== newValue) {\n        this._previousNativeValue = newValue;\n        this.stateChanges.next();\n      }\n    }\n    /** Make sure the input is a supported type. */\n\n  }, {\n    key: \"_validateType\",\n    value: function _validateType() {\n      if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatInputUnsupportedTypeError(this._type);\n      }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n\n  }, {\n    key: \"_isNeverEmpty\",\n    value: function _isNeverEmpty() {\n      return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n\n  }, {\n    key: \"_isBadInput\",\n    value: function _isBadInput() {\n      // The `validity` property won't be present on platform-server.\n      var validity = this._elementRef.nativeElement.validity;\n      return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() && !this.autofilled;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"shouldLabelFloat\",\n    get: function get() {\n      if (this._isNativeSelect) {\n        // For a single-selection `<select>`, the label should float when the selected option has\n        // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n        // overlapping the label with the options.\n        var selectElement = this._elementRef.nativeElement;\n        var firstOption = selectElement.options[0]; // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n        // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n\n        return this.focused || selectElement.multiple || !this.empty || !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n      } else {\n        return this.focused || !this.empty;\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"setDescribedByIds\",\n    value: function setDescribedByIds(ids) {\n      if (ids.length) {\n        this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n      } else {\n        this._elementRef.nativeElement.removeAttribute('aria-describedby');\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"onContainerClick\",\n    value: function onContainerClick() {\n      // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n      // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n      // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n      if (!this.focused) {\n        this.focus();\n      }\n    }\n  }]);\n\n  return MatInput;\n}(_MatInputMixinBase);\n\nMatInput.ɵfac = function MatInput_Factory(t) {\n  return new (t || MatInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(MAT_INPUT_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AutofillMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8));\n};\n\nMatInput.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatInput,\n  selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]],\n  hostAttrs: [1, \"mat-input-element\", \"mat-form-field-autofill-control\"],\n  hostVars: 9,\n  hostBindings: function MatInput_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focus\", function MatInput_focus_HostBindingHandler() {\n        return ctx._focusChanged(true);\n      })(\"blur\", function MatInput_blur_HostBindingHandler() {\n        return ctx._focusChanged(false);\n      })(\"input\", function MatInput_input_HostBindingHandler() {\n        return ctx._onInput();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n      ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"data-placeholder\", ctx.placeholder)(\"readonly\", ctx.readonly && !ctx._isNativeSelect || null)(\"aria-invalid\", ctx.errorState && !ctx.empty)(\"aria-required\", ctx.required);\n      ɵngcc0.ɵɵclassProp(\"mat-input-server\", ctx._isServer);\n    }\n  },\n  inputs: {\n    id: \"id\",\n    disabled: \"disabled\",\n    required: \"required\",\n    type: \"type\",\n    value: \"value\",\n    readonly: \"readonly\",\n    placeholder: \"placeholder\",\n    errorStateMatcher: \"errorStateMatcher\",\n    userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"]\n  },\n  exportAs: [\"matInput\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatInput\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nMatInput.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Platform\n  }, {\n    type: NgControl,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Self\n    }]\n  }, {\n    type: NgForm,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: FormGroupDirective,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ErrorStateMatcher\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Self\n    }, {\n      type: Inject,\n      args: [MAT_INPUT_VALUE_ACCESSOR]\n    }]\n  }, {\n    type: AutofillMonitor\n  }, {\n    type: NgZone\n  }, {\n    type: MatFormField,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_FORM_FIELD]\n    }]\n  }];\n};\n\nMatInput.propDecorators = {\n  disabled: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  type: [{\n    type: Input\n  }],\n  errorStateMatcher: [{\n    type: Input\n  }],\n  userAriaDescribedBy: [{\n    type: Input,\n    args: ['aria-describedby']\n  }],\n  value: [{\n    type: Input\n  }],\n  readonly: [{\n    type: Input\n  }],\n  _focusChanged: [{\n    type: HostListener,\n    args: ['focus', ['true']]\n  }, {\n    type: HostListener,\n    args: ['blur', ['false']]\n  }],\n  _onInput: [{\n    type: HostListener,\n    args: ['input']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatInput, [{\n    type: Directive,\n    args: [{\n      selector: \"input[matInput], textarea[matInput], select[matNativeControl],\\n      input[matNativeControl], textarea[matNativeControl]\",\n      exportAs: 'matInput',\n      host: {\n        /**\n         * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n         */\n        'class': 'mat-input-element mat-form-field-autofill-control',\n        '[class.mat-input-server]': '_isServer',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        // At the time of writing, we have a lot of customer tests that look up the input based on its\n        // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n        // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n        '[attr.data-placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n        // Only mark the input as invalid for assistive technology if it has a value since the\n        // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n        '[attr.aria-invalid]': 'errorState && !empty',\n        '[attr.aria-required]': 'required'\n      },\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatInput\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc2.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }, {\n      type: ɵngcc2.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc2.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.ErrorStateMatcher\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }, {\n        type: Inject,\n        args: [MAT_INPUT_VALUE_ACCESSOR]\n      }]\n    }, {\n      type: ɵngcc4.AutofillMonitor\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc5.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_FORM_FIELD]\n      }]\n    }];\n  }, {\n    id: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }],\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n\n    /** Callback for the cases where the focused state of the input changes. */\n    // tslint:disable:no-host-decorator-in-concrete\n    // tslint:enable:no-host-decorator-in-concrete\n    _focusChanged: [{\n      type: HostListener,\n      args: ['focus', ['true']]\n    }, {\n      type: HostListener,\n      args: ['blur', ['false']]\n    }],\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _onInput: [{\n      type: HostListener,\n      args: ['input']\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    userAriaDescribedBy: [{\n      type: Input,\n      args: ['aria-describedby']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatInputModule = function MatInputModule() {\n  _classCallCheck(this, MatInputModule);\n};\n\nMatInputModule.ɵfac = function MatInputModule_Factory(t) {\n  return new (t || MatInputModule)();\n};\n\nMatInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatInputModule\n});\nMatInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  providers: [ErrorStateMatcher],\n  imports: [[TextFieldModule, MatFormFieldModule, MatCommonModule], TextFieldModule, // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n  // be used together with `MatFormField`.\n  MatFormFieldModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatInputModule, {\n    declarations: function declarations() {\n      return [MatInput, MatTextareaAutosize];\n    },\n    imports: function imports() {\n      return [TextFieldModule, MatFormFieldModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [TextFieldModule, // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n      // be used together with `MatFormField`.\n      MatFormFieldModule, MatInput, MatTextareaAutosize];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatInputModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MatInput, MatTextareaAutosize],\n      imports: [TextFieldModule, MatFormFieldModule, MatCommonModule],\n      exports: [TextFieldModule, // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n      // be used together with `MatFormField`.\n      MatFormFieldModule, MatInput, MatTextareaAutosize],\n      providers: [ErrorStateMatcher]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, MatTextareaAutosize, getMatInputUnsupportedTypeError }; //# sourceMappingURL=input.js.map","map":{"version":3,"sources":["/Users/mohammedelmourabit/xrp/xpr/node_modules/@angular/material/__ivy_ngcc__/fesm2015/input.js"],"names":["CdkTextareaAutosize","AutofillMonitor","TextFieldModule","Directive","Input","InjectionToken","ElementRef","Optional","Self","Inject","NgZone","HostListener","NgModule","coerceBooleanProperty","getSupportedInputTypes","Platform","NgControl","NgForm","FormGroupDirective","mixinErrorState","ErrorStateMatcher","MatCommonModule","MatFormFieldControl","MatFormField","MAT_FORM_FIELD","MatFormFieldModule","Subject","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","MatTextareaAutosize","minRows","value","maxRows","enabled","ɵfac","MatTextareaAutosize_Factory","t","ɵMatTextareaAutosize_BaseFactory","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","inputs","cdkAutosizeMinRows","cdkAutosizeMaxRows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","exportAs","features","ɵɵInheritDefinitionFeature","propDecorators","args","ɵɵgetInheritedFactory","ngDevMode","ɵsetClassMetadata","selector","host","getMatInputUnsupportedTypeError","Error","MAT_INPUT_VALUE_ACCESSOR","MAT_INPUT_INVALID_TYPES","nextUniqueId","MatInputBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatInputMixinBase","MatInput","_elementRef","_platform","inputValueAccessor","_autofillMonitor","ngZone","_formField","_uid","focused","stateChanges","controlType","autofilled","_disabled","_required","_type","_readonly","_neverEmptyInputTypes","filter","has","element","nativeElement","nodeName","toLowerCase","_inputValueAccessor","_previousNativeValue","id","IOS","runOutsideAngular","addEventListener","event","el","target","selectionStart","selectionEnd","setSelectionRange","_isServer","isBrowser","_isNativeSelect","_isTextarea","multiple","disabled","next","_id","_validateType","monitor","subscribe","isAutofilled","complete","stopMonitoring","updateErrorState","_dirtyCheckNativeValue","_dirtyCheckPlaceholder","options","focus","isFocused","readonly","_a","_b","placeholder","_hideControlPlaceholder","call","_previousPlaceholder","setAttribute","removeAttribute","newValue","indexOf","validity","badInput","_isNeverEmpty","_isBadInput","selectElement","firstOption","empty","selectedIndex","label","ids","length","join","MatInput_Factory","ɵɵdirectiveInject","hostVars","hostBindings","MatInput_HostBindings","rf","ctx","ɵɵlistener","MatInput_focus_HostBindingHandler","_focusChanged","MatInput_blur_HostBindingHandler","MatInput_input_HostBindingHandler","_onInput","ɵɵhostProperty","required","ɵɵattribute","errorState","ɵɵclassProp","errorStateMatcher","userAriaDescribedBy","ɵɵProvidersFeature","provide","useExisting","ɵɵNgOnChangesFeature","ctorParameters","decorators","undefined","providers","MatInputModule","MatInputModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["import { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Optional, Self, Inject, NgZone, HostListener, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormField, MAT_FORM_FIELD, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/text-field';\nimport * as ɵngcc5 from '@angular/material/form-field';\nclass MatTextareaAutosize extends CdkTextareaAutosize {\n    get matAutosizeMinRows() { return this.minRows; }\n    set matAutosizeMinRows(value) { this.minRows = value; }\n    get matAutosizeMaxRows() { return this.maxRows; }\n    set matAutosizeMaxRows(value) { this.maxRows = value; }\n    get matAutosize() { return this.enabled; }\n    set matAutosize(value) { this.enabled = value; }\n    get matTextareaAutosize() { return this.enabled; }\n    set matTextareaAutosize(value) { this.enabled = value; }\n}\nMatTextareaAutosize.ɵfac = function MatTextareaAutosize_Factory(t) { return ɵMatTextareaAutosize_BaseFactory(t || MatTextareaAutosize); };\nMatTextareaAutosize.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTextareaAutosize, selectors: [[\"textarea\", \"mat-autosize\", \"\"], [\"textarea\", \"matTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\", \"mat-autosize\"], inputs: { cdkAutosizeMinRows: \"cdkAutosizeMinRows\", cdkAutosizeMaxRows: \"cdkAutosizeMaxRows\", matAutosizeMinRows: \"matAutosizeMinRows\", matAutosizeMaxRows: \"matAutosizeMaxRows\", matAutosize: [\"mat-autosize\", \"matAutosize\"], matTextareaAutosize: \"matTextareaAutosize\" }, exportAs: [\"matTextareaAutosize\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTextareaAutosize.propDecorators = {\n    matAutosizeMinRows: [{ type: Input }],\n    matAutosizeMaxRows: [{ type: Input }],\n    matAutosize: [{ type: Input, args: ['mat-autosize',] }],\n    matTextareaAutosize: [{ type: Input }]\n};\nconst ɵMatTextareaAutosize_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatTextareaAutosize);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n                exportAs: 'matTextareaAutosize',\n                inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n                host: {\n                    'class': 'cdk-textarea-autosize mat-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1'\n                }\n            }]\n    }], null, { matAutosizeMinRows: [{\n            type: Input\n        }], matAutosizeMaxRows: [{\n            type: Input\n        }], matAutosize: [{\n            type: Input,\n            args: ['mat-autosize']\n        }], matTextareaAutosize: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst _MatInputMixinBase = mixinErrorState(MatInputBase);\n/** Directive that allows a native input to work inside a `MatFormField`. */\nclass MatInput extends _MatInputMixinBase {\n    constructor(_elementRef, _platform, \n    /** @docs-private */\n    ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, \n    // TODO: Remove this once the legacy appearance has been removed. We only need\n    // to inject the form-field for determining whether the placeholder has been promoted.\n    _formField) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this.ngControl = ngControl;\n        this._autofillMonitor = _autofillMonitor;\n        this._formField = _formField;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._required = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week'\n        ].filter(t => getSupportedInputTypes().has(t));\n        const element = this._elementRef.nativeElement;\n        const nodeName = element.nodeName.toLowerCase();\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular(() => {\n                _elementRef.nativeElement.addEventListener('keyup', (event) => {\n                    let el = event.target;\n                    if (!el.value && !el.selectionStart && !el.selectionEnd) {\n                        // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                        // `1, 1` fixes it for the first time that you type text and\n                        // then hold delete. Toggling to `1, 1` and then back to\n                        // `0, 0` seems to completely fix it.\n                        el.setSelectionRange(1, 1);\n                        el.setSelectionRange(0, 0);\n                    }\n                });\n            });\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        if (this._isNativeSelect) {\n            this.controlType = element.multiple ? 'mat-native-select-multiple' :\n                'mat-native-select';\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() { return this._id; }\n    set id(value) { this._id = value || this._uid; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /** Input type of the element. */\n    get type() { return this._type; }\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() { return this._inputValueAccessor.value; }\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /** Whether the element is readonly. */\n    get readonly() { return this._readonly; }\n    set readonly(value) { this._readonly = coerceBooleanProperty(value); }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n        // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n        this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    /** Callback for the cases where the focused state of the input changes. */\n    // tslint:disable:no-host-decorator-in-concrete\n    // tslint:enable:no-host-decorator-in-concrete\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n        var _a, _b;\n        // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n        // screen readers will read it out twice: once from the label and once from the attribute.\n        // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n        // the only one that supports promoting the placeholder to a label.\n        const placeholder = ((_b = (_a = this._formField) === null || _a === void 0 ? void 0 : _a._hideControlPlaceholder) === null || _b === void 0 ? void 0 : _b.call(_a)) ? null : this.placeholder;\n        if (placeholder !== this._previousPlaceholder) {\n            const element = this._elementRef.nativeElement;\n            this._previousPlaceholder = placeholder;\n            placeholder ?\n                element.setAttribute('placeholder', placeholder) : element.removeAttribute('placeholder');\n        }\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        let validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n            !this.autofilled;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            const selectElement = this._elementRef.nativeElement;\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return this.focused || selectElement.multiple || !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n}\nMatInput.ɵfac = function MatInput_Factory(t) { return new (t || MatInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(MAT_INPUT_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AutofillMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8)); };\nMatInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatInput, selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]], hostAttrs: [1, \"mat-input-element\", \"mat-form-field-autofill-control\"], hostVars: 9, hostBindings: function MatInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatInput_focus_HostBindingHandler() { return ctx._focusChanged(true); })(\"blur\", function MatInput_blur_HostBindingHandler() { return ctx._focusChanged(false); })(\"input\", function MatInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"data-placeholder\", ctx.placeholder)(\"readonly\", ctx.readonly && !ctx._isNativeSelect || null)(\"aria-invalid\", ctx.errorState && !ctx.empty)(\"aria-required\", ctx.required);\n        ɵngcc0.ɵɵclassProp(\"mat-input-server\", ctx._isServer);\n    } }, inputs: { id: \"id\", disabled: \"disabled\", required: \"required\", type: \"type\", value: \"value\", readonly: \"readonly\", placeholder: \"placeholder\", errorStateMatcher: \"errorStateMatcher\", userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"] }, exportAs: [\"matInput\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatInput }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nMatInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [MAT_INPUT_VALUE_ACCESSOR,] }] },\n    { type: AutofillMonitor },\n    { type: NgZone },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] }\n];\nMatInput.propDecorators = {\n    disabled: [{ type: Input }],\n    id: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    type: [{ type: Input }],\n    errorStateMatcher: [{ type: Input }],\n    userAriaDescribedBy: [{ type: Input, args: ['aria-describedby',] }],\n    value: [{ type: Input }],\n    readonly: [{ type: Input }],\n    _focusChanged: [{ type: HostListener, args: ['focus', ['true'],] }, { type: HostListener, args: ['blur', ['false'],] }],\n    _onInput: [{ type: HostListener, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatInput, [{\n        type: Directive,\n        args: [{\n                selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                exportAs: 'matInput',\n                host: {\n                    /**\n                     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                     */\n                    'class': 'mat-input-element mat-form-field-autofill-control',\n                    '[class.mat-input-server]': '_isServer',\n                    // Native input properties that are overwritten by Angular inputs need to be synced with\n                    // the native input element. Otherwise property bindings for those don't work.\n                    '[attr.id]': 'id',\n                    // At the time of writing, we have a lot of customer tests that look up the input based on its\n                    // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n                    // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n                    '[attr.data-placeholder]': 'placeholder',\n                    '[disabled]': 'disabled',\n                    '[required]': 'required',\n                    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                    // Only mark the input as invalid for assistive technology if it has a value since the\n                    // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n                    '[attr.aria-invalid]': 'errorState && !empty',\n                    '[attr.aria-required]': 'required'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatInput }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc2.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }, { type: ɵngcc2.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.ErrorStateMatcher }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [MAT_INPUT_VALUE_ACCESSOR]\n            }] }, { type: ɵngcc4.AutofillMonitor }, { type: ɵngcc0.NgZone }, { type: ɵngcc5.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }] }]; }, { id: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], type: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], readonly: [{\n            type: Input\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    /** Callback for the cases where the focused state of the input changes. */\n    // tslint:disable:no-host-decorator-in-concrete\n    // tslint:enable:no-host-decorator-in-concrete\n    _focusChanged: [{\n            type: HostListener,\n            args: ['focus', ['true']]\n        }, {\n            type: HostListener,\n            args: ['blur', ['false']]\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _onInput: [{\n            type: HostListener,\n            args: ['input']\n        }], placeholder: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }], userAriaDescribedBy: [{\n            type: Input,\n            args: ['aria-describedby']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatInputModule {\n}\nMatInputModule.ɵfac = function MatInputModule_Factory(t) { return new (t || MatInputModule)(); };\nMatInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatInputModule });\nMatInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [ErrorStateMatcher], imports: [[\n            TextFieldModule,\n            MatFormFieldModule,\n            MatCommonModule,\n        ], TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatInputModule, { declarations: function () { return [MatInput, MatTextareaAutosize]; }, imports: function () { return [TextFieldModule,\n        MatFormFieldModule,\n        MatCommonModule]; }, exports: function () { return [TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule, MatInput, MatTextareaAutosize]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatInputModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [MatInput, MatTextareaAutosize],\n                imports: [\n                    TextFieldModule,\n                    MatFormFieldModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    TextFieldModule,\n                    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n                    // be used together with `MatFormField`.\n                    MatFormFieldModule,\n                    MatInput,\n                    MatTextareaAutosize,\n                ],\n                providers: [ErrorStateMatcher]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, MatTextareaAutosize, getMatInputUnsupportedTypeError };\n\n//# sourceMappingURL=input.js.map"]},"metadata":{},"sourceType":"module"}