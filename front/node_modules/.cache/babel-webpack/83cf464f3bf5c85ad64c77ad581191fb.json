{"ast":null,"code":"import _slicedToArray from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _inherits from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _toConsumableArray from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license Angular v7.2.16\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\nimport { Injectable, NgModule, Version } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ɵgetDOM } from '@angular/platform-browser';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar BrowserXhr = /*#__PURE__*/function () {\n  function BrowserXhr() {\n    _classCallCheck(this, BrowserXhr);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(BrowserXhr, [{\n    key: \"build\",\n    value: function build() {\n      return (\n        /** @type {?} */\n        new XMLHttpRequest()\n      );\n    }\n  }]);\n\n  return BrowserXhr;\n}();\n\nBrowserXhr.ɵfac = function BrowserXhr_Factory(t) {\n  return new (t || BrowserXhr)();\n};\n\nBrowserXhr.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: BrowserXhr,\n  factory: BrowserXhr.ɵfac\n});\n/** @nocollapse */\n\nBrowserXhr.ctorParameters = function () {\n  return [];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BrowserXhr, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @enum {number} */\n\n\nvar RequestMethod = {\n  Get: 0,\n  Post: 1,\n  Put: 2,\n  Delete: 3,\n  Options: 4,\n  Head: 5,\n  Patch: 6\n};\nRequestMethod[RequestMethod.Get] = 'Get';\nRequestMethod[RequestMethod.Post] = 'Post';\nRequestMethod[RequestMethod.Put] = 'Put';\nRequestMethod[RequestMethod.Delete] = 'Delete';\nRequestMethod[RequestMethod.Options] = 'Options';\nRequestMethod[RequestMethod.Head] = 'Head';\nRequestMethod[RequestMethod.Patch] = 'Patch';\n/** @enum {number} */\n\nvar ReadyState = {\n  Unsent: 0,\n  Open: 1,\n  HeadersReceived: 2,\n  Loading: 3,\n  Done: 4,\n  Cancelled: 5\n};\nReadyState[ReadyState.Unsent] = 'Unsent';\nReadyState[ReadyState.Open] = 'Open';\nReadyState[ReadyState.HeadersReceived] = 'HeadersReceived';\nReadyState[ReadyState.Loading] = 'Loading';\nReadyState[ReadyState.Done] = 'Done';\nReadyState[ReadyState.Cancelled] = 'Cancelled';\n/** @enum {number} */\n\nvar ResponseType = {\n  Basic: 0,\n  Cors: 1,\n  Default: 2,\n  Error: 3,\n  Opaque: 4\n};\nResponseType[ResponseType.Basic] = 'Basic';\nResponseType[ResponseType.Cors] = 'Cors';\nResponseType[ResponseType.Default] = 'Default';\nResponseType[ResponseType.Error] = 'Error';\nResponseType[ResponseType.Opaque] = 'Opaque';\n/** @enum {number} */\n\nvar ContentType = {\n  NONE: 0,\n  JSON: 1,\n  FORM: 2,\n  FORM_DATA: 3,\n  TEXT: 4,\n  BLOB: 5,\n  ARRAY_BUFFER: 6\n};\nContentType[ContentType.NONE] = 'NONE';\nContentType[ContentType.JSON] = 'JSON';\nContentType[ContentType.FORM] = 'FORM';\nContentType[ContentType.FORM_DATA] = 'FORM_DATA';\nContentType[ContentType.TEXT] = 'TEXT';\nContentType[ContentType.BLOB] = 'BLOB';\nContentType[ContentType.ARRAY_BUFFER] = 'ARRAY_BUFFER';\n/** @enum {number} */\n\nvar ResponseContentType = {\n  Text: 0,\n  Json: 1,\n  ArrayBuffer: 2,\n  Blob: 3\n};\nResponseContentType[ResponseContentType.Text] = 'Text';\nResponseContentType[ResponseContentType.Json] = 'Json';\nResponseContentType[ResponseContentType.ArrayBuffer] = 'ArrayBuffer';\nResponseContentType[ResponseContentType.Blob] = 'Blob';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Headers} from '\\@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\nvar Headers = /*#__PURE__*/function () {\n  // TODO(vicb): any -> string|string[]\n\n  /**\n   * @param {?=} headers\n   */\n  function Headers(headers) {\n    var _this = this;\n\n    _classCallCheck(this, Headers);\n\n    /**\n     * \\@internal header names are lower case\n     */\n    this._headers = new Map();\n    /**\n     * \\@internal map lower case names to actual names\n     */\n\n    this._normalizedNames = new Map();\n\n    if (!headers) {\n      return;\n    }\n\n    if (headers instanceof Headers) {\n      headers.forEach(function (values, name) {\n        values.forEach(function (value) {\n          return _this.append(name, value);\n        });\n      });\n      return;\n    }\n\n    Object.keys(headers).forEach(function (name) {\n      /** @type {?} */\n      var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n\n      _this.delete(name);\n\n      values.forEach(function (value) {\n        return _this.append(name, value);\n      });\n    });\n  }\n  /**\n   * Returns a new Headers instance from the given DOMString of Response Headers\n   * @param {?} headersString\n   * @return {?}\n   */\n\n\n  _createClass(Headers, [{\n    key: \"append\",\n    value:\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function append(name, value) {\n      /** @type {?} */\n      var values = this.getAll(name);\n\n      if (values === null) {\n        this.set(name, value);\n      } else {\n        values.push(value);\n      }\n    }\n    /**\n     * Deletes all header values for the given name.\n     * @param {?} name\n     * @return {?}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(name) {\n      /** @type {?} */\n      var lcName = name.toLowerCase();\n\n      this._normalizedNames.delete(lcName);\n\n      this._headers.delete(lcName);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(fn) {\n      var _this2 = this;\n\n      this._headers.forEach(function (values, lcName) {\n        return fn(values, _this2._normalizedNames.get(lcName), _this2._headers);\n      });\n    }\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      /** @type {?} */\n      var values = this.getAll(name);\n\n      if (values === null) {\n        return null;\n      }\n\n      return values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(name) {\n      return this._headers.has(name.toLowerCase());\n    }\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return Array.from(this._normalizedNames.values());\n    }\n    /**\n     * Sets or overrides header value for given name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(name, value) {\n      if (Array.isArray(value)) {\n        if (value.length) {\n          this._headers.set(name.toLowerCase(), [value.join(',')]);\n        }\n      } else {\n        this._headers.set(name.toLowerCase(), [value]);\n      }\n\n      this.mayBeSetNormalizedName(name);\n    }\n    /**\n     * Returns values of all headers.\n     * @return {?}\n     */\n\n  }, {\n    key: \"values\",\n    value: function values() {\n      return Array.from(this._headers.values());\n    }\n    /**\n     * Returns string of all headers.\n     * @return {?}\n     */\n    // TODO(vicb): returns {[name: string]: string[]}\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _this3 = this;\n\n      /** @type {?} */\n      var serialized = {};\n\n      this._headers.forEach(function (values, name) {\n        /** @type {?} */\n        var split = [];\n        values.forEach(function (v) {\n          return split.push.apply(split, _toConsumableArray(v.split(',')));\n        });\n        serialized[\n        /** @type {?} */\n        _this3._normalizedNames.get(name)] = split;\n      });\n\n      return serialized;\n    }\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n\n  }, {\n    key: \"getAll\",\n    value: function getAll(name) {\n      return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n    }\n    /**\n     * This method is not implemented.\n     * @return {?}\n     */\n\n  }, {\n    key: \"entries\",\n    value: function entries() {\n      throw new Error('\"entries\" method is not implemented on Headers class');\n    }\n    /**\n     * @private\n     * @param {?} name\n     * @return {?}\n     */\n\n  }, {\n    key: \"mayBeSetNormalizedName\",\n    value: function mayBeSetNormalizedName(name) {\n      /** @type {?} */\n      var lcName = name.toLowerCase();\n\n      if (!this._normalizedNames.has(lcName)) {\n        this._normalizedNames.set(lcName, name);\n      }\n    }\n  }], [{\n    key: \"fromResponseHeaderString\",\n    value: function fromResponseHeaderString(headersString) {\n      /** @type {?} */\n      var headers = new Headers();\n      headersString.split('\\n').forEach(function (line) {\n        /** @type {?} */\n        var index = line.indexOf(':');\n\n        if (index > 0) {\n          /** @type {?} */\n          var name = line.slice(0, index);\n          /** @type {?} */\n\n          var value = line.slice(index + 1).trim();\n          headers.set(name, value);\n        }\n      });\n      return headers;\n    }\n  }]);\n\n  return Headers;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar ResponseOptions = /*#__PURE__*/function () {\n  /**\n   * @param {?=} opts\n   */\n  function ResponseOptions() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ResponseOptions);\n\n    var body = opts.body,\n        status = opts.status,\n        headers = opts.headers,\n        statusText = opts.statusText,\n        type = opts.type,\n        url = opts.url;\n    this.body = body != null ? body : null;\n    this.status = status != null ? status : null;\n    this.headers = headers != null ? headers : null;\n    this.statusText = statusText != null ? statusText : null;\n    this.type = type != null ? type : null;\n    this.url = url != null ? url : null;\n  }\n  /**\n   * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n   * override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * This may be useful when sharing a base `ResponseOptions` object inside tests,\n   * where certain properties may change from test to test.\n   *\n   * \\@usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * import {ResponseOptions, Response} from '\\@angular/http';\n   *\n   * var options = new ResponseOptions({\n   *   body: {name: 'Jeff'}\n   * });\n   * var res = new Response(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('options.url:', options.url); // null\n   * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n   * console.log('res.url:', res.url); // https://google.com\n   * ```\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  _createClass(ResponseOptions, [{\n    key: \"merge\",\n    value: function merge(options) {\n      return new ResponseOptions({\n        body: options && options.body != null ? options.body : this.body,\n        status: options && options.status != null ? options.status : this.status,\n        headers: options && options.headers != null ? options.headers : this.headers,\n        statusText: options && options.statusText != null ? options.statusText : this.statusText,\n        type: options && options.type != null ? options.type : this.type,\n        url: options && options.url != null ? options.url : this.url\n      });\n    }\n  }]);\n\n  return ResponseOptions;\n}();\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n *\n * ### Example\n *\n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar BaseResponseOptions = /*#__PURE__*/function (_ResponseOptions) {\n  _inherits(BaseResponseOptions, _ResponseOptions);\n\n  var _super = _createSuper(BaseResponseOptions);\n\n  function BaseResponseOptions() {\n    _classCallCheck(this, BaseResponseOptions);\n\n    return _super.call(this, {\n      status: 200,\n      statusText: 'Ok',\n      type: ResponseType.Default,\n      headers: new Headers()\n    });\n  }\n\n  return BaseResponseOptions;\n}(ResponseOptions);\n\nBaseResponseOptions.ɵfac = function BaseResponseOptions_Factory(t) {\n  return new (t || BaseResponseOptions)();\n};\n\nBaseResponseOptions.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: BaseResponseOptions,\n  factory: BaseResponseOptions.ɵfac\n});\n/** @nocollapse */\n\nBaseResponseOptions.ctorParameters = function () {\n  return [];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseResponseOptions, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @abstract\n */\n\n\nvar ConnectionBackend = function ConnectionBackend() {\n  _classCallCheck(this, ConnectionBackend);\n};\n/**\n * Abstract class from which real connections are derived.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @abstract\n */\n\n\nvar Connection = function Connection() {\n  _classCallCheck(this, Connection);\n};\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @abstract\n */\n\n\nvar XSRFStrategy = function XSRFStrategy() {\n  _classCallCheck(this, XSRFStrategy);\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} method\n * @return {?}\n */\n\n\nfunction normalizeMethodName(method) {\n  if (typeof method !== 'string') return method;\n\n  switch (method.toUpperCase()) {\n    case 'GET':\n      return RequestMethod.Get;\n\n    case 'POST':\n      return RequestMethod.Post;\n\n    case 'PUT':\n      return RequestMethod.Put;\n\n    case 'DELETE':\n      return RequestMethod.Delete;\n\n    case 'OPTIONS':\n      return RequestMethod.Options;\n\n    case 'HEAD':\n      return RequestMethod.Head;\n\n    case 'PATCH':\n      return RequestMethod.Patch;\n  }\n\n  throw new Error(\"Invalid request method. The method \\\"\".concat(method, \"\\\" is not supported.\"));\n}\n/** @type {?} */\n\n\nvar isSuccess = function isSuccess(status) {\n  return status >= 200 && status < 300;\n};\n/**\n * @param {?} xhr\n * @return {?}\n */\n\n\nfunction getResponseURL(xhr) {\n  if ('responseURL' in xhr) {\n    return xhr.responseURL;\n  }\n\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n\n  return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\n\n\nfunction stringToArrayBuffer(input) {\n  /** @type {?} */\n  var view = new Uint16Array(input.length);\n\n  for (var i = 0, strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n\n  return view.buffer;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @param {?=} rawParams\n * @return {?}\n */\n\n\nfunction paramParser() {\n  var rawParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  /** @type {?} */\n  var map = new Map();\n\n  if (rawParams.length > 0) {\n    /** @type {?} */\n    var params = rawParams.split('&');\n    params.forEach(function (param) {\n      /** @type {?} */\n      var eqIdx = param.indexOf('=');\n\n      var _ref = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)],\n          _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          val = _ref2[1];\n      /** @type {?} */\n\n\n      var list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n\n  return map;\n}\n/**\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n *\n */\n\n\nvar QueryEncoder = /*#__PURE__*/function () {\n  function QueryEncoder() {\n    _classCallCheck(this, QueryEncoder);\n  }\n\n  _createClass(QueryEncoder, [{\n    key: \"encodeKey\",\n    value:\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    function encodeKey(key) {\n      return standardEncoding(key);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"encodeValue\",\n    value: function encodeValue(value) {\n      return standardEncoding(value);\n    }\n  }]);\n\n  return QueryEncoder;\n}();\n/**\n * @param {?} v\n * @return {?}\n */\n\n\nfunction standardEncoding(v) {\n  return encodeURIComponent(v).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/gi, '$').replace(/%2C/gi, ',').replace(/%3B/gi, ';').replace(/%2B/gi, '+').replace(/%3D/gi, '=').replace(/%3F/gi, '?').replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar URLSearchParams = /*#__PURE__*/function () {\n  /**\n   * @param {?=} rawParams\n   * @param {?=} queryEncoder\n   */\n  function URLSearchParams() {\n    var rawParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var queryEncoder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new QueryEncoder();\n\n    _classCallCheck(this, URLSearchParams);\n\n    this.rawParams = rawParams;\n    this.queryEncoder = queryEncoder;\n    this.paramsMap = paramParser(rawParams);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(URLSearchParams, [{\n    key: \"clone\",\n    value: function clone() {\n      /** @type {?} */\n      var clone = new URLSearchParams('', this.queryEncoder);\n      clone.appendAll(this);\n      return clone;\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(param) {\n      return this.paramsMap.has(param);\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(param) {\n      /** @type {?} */\n      var storedParam = this.paramsMap.get(param);\n      return Array.isArray(storedParam) ? storedParam[0] : null;\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n\n  }, {\n    key: \"getAll\",\n    value: function getAll(param) {\n      return this.paramsMap.get(param) || [];\n    }\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(param, val) {\n      if (val === void 0 || val === null) {\n        this.delete(param);\n        return;\n      }\n      /** @type {?} */\n\n\n      var list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      list.push(val);\n      this.paramsMap.set(param, list);\n    } // A merge operation\n    // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n\n  }, {\n    key: \"setAll\",\n    value: function setAll(searchParams) {\n      var _this4 = this;\n\n      searchParams.paramsMap.forEach(function (value, param) {\n        /** @type {?} */\n        var list = _this4.paramsMap.get(param) || [];\n        list.length = 0;\n        list.push(value[0]);\n\n        _this4.paramsMap.set(param, list);\n      });\n    }\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n\n  }, {\n    key: \"append\",\n    value: function append(param, val) {\n      if (val === void 0 || val === null) return;\n      /** @type {?} */\n\n      var list = this.paramsMap.get(param) || [];\n      list.push(val);\n      this.paramsMap.set(param, list);\n    } // A merge operation\n    // For each name-values pair in `searchParams`, perform `append(name, value)`\n    // for each value in `values`.\n    //\n    // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n\n  }, {\n    key: \"appendAll\",\n    value: function appendAll(searchParams) {\n      var _this5 = this;\n\n      searchParams.paramsMap.forEach(function (value, param) {\n        /** @type {?} */\n        var list = _this5.paramsMap.get(param) || [];\n\n        for (var i = 0; i < value.length; ++i) {\n          list.push(value[i]);\n        }\n\n        _this5.paramsMap.set(param, list);\n      });\n    } // A merge operation\n    // For each name-values pair in `searchParams`, perform `delete(name)`,\n    // followed by `set(name, values)`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n\n  }, {\n    key: \"replaceAll\",\n    value: function replaceAll(searchParams) {\n      var _this6 = this;\n\n      searchParams.paramsMap.forEach(function (value, param) {\n        /** @type {?} */\n        var list = _this6.paramsMap.get(param) || [];\n        list.length = 0;\n\n        for (var i = 0; i < value.length; ++i) {\n          list.push(value[i]);\n        }\n\n        _this6.paramsMap.set(param, list);\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var _this7 = this;\n\n      /** @type {?} */\n      var paramsList = [];\n      this.paramsMap.forEach(function (values, k) {\n        values.forEach(function (v) {\n          return paramsList.push(_this7.queryEncoder.encodeKey(k) + '=' + _this7.queryEncoder.encodeValue(v));\n        });\n      });\n      return paramsList.join('&');\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(param) {\n      this.paramsMap.delete(param);\n    }\n  }]);\n\n  return URLSearchParams;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\n\n\nvar Body = /*#__PURE__*/function () {\n  function Body() {\n    _classCallCheck(this, Body);\n  }\n\n  _createClass(Body, [{\n    key: \"json\",\n    value:\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     * @return {?}\n     */\n    function json() {\n      if (typeof this._body === 'string') {\n        return JSON.parse(\n        /** @type {?} */\n        this._body);\n      }\n\n      if (this._body instanceof ArrayBuffer) {\n        return JSON.parse(this.text());\n      }\n\n      return this._body;\n    }\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     * @param {?=} encodingHint\n     * @return {?}\n     */\n\n  }, {\n    key: \"text\",\n    value: function text() {\n      var encodingHint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'legacy';\n\n      if (this._body instanceof URLSearchParams) {\n        return this._body.toString();\n      }\n\n      if (this._body instanceof ArrayBuffer) {\n        switch (encodingHint) {\n          case 'legacy':\n            return String.fromCharCode.apply(null, new Uint16Array(\n            /** @type {?} */\n            this._body));\n\n          case 'iso-8859':\n            return String.fromCharCode.apply(null, new Uint8Array(\n            /** @type {?} */\n            this._body));\n\n          default:\n            throw new Error(\"Invalid value for encodingHint: \".concat(encodingHint));\n        }\n      }\n\n      if (this._body == null) {\n        return '';\n      }\n\n      if (typeof this._body === 'object') {\n        return JSON.stringify(this._body, null, 2);\n      }\n\n      return this._body.toString();\n    }\n    /**\n     * Return the body as an ArrayBuffer\n     * @return {?}\n     */\n\n  }, {\n    key: \"arrayBuffer\",\n    value: function arrayBuffer() {\n      if (this._body instanceof ArrayBuffer) {\n        return (\n          /** @type {?} */\n          this._body\n        );\n      }\n\n      return stringToArrayBuffer(this.text());\n    }\n    /**\n     * Returns the request's body as a Blob, assuming that body exists.\n     * @return {?}\n     */\n\n  }, {\n    key: \"blob\",\n    value: function blob() {\n      if (this._body instanceof Blob) {\n        return (\n          /** @type {?} */\n          this._body\n        );\n      }\n\n      if (this._body instanceof ArrayBuffer) {\n        return new Blob([this._body]);\n      }\n\n      throw new Error('The request body isn\\'t either a blob or an array buffer');\n    }\n  }]);\n\n  return Body;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar Response = /*#__PURE__*/function (_Body) {\n  _inherits(Response, _Body);\n\n  var _super2 = _createSuper(Response);\n\n  /**\n   * @param {?} responseOptions\n   */\n  function Response(responseOptions) {\n    var _this8;\n\n    _classCallCheck(this, Response);\n\n    _this8 = _super2.call(this);\n    _this8._body = responseOptions.body;\n    _this8.status =\n    /** @type {?} */\n    responseOptions.status;\n    _this8.ok = _this8.status >= 200 && _this8.status <= 299;\n    _this8.statusText = responseOptions.statusText;\n    _this8.headers = responseOptions.headers;\n    _this8.type =\n    /** @type {?} */\n    responseOptions.type;\n    _this8.url =\n    /** @type {?} */\n    responseOptions.url;\n    return _this8;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(Response, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"Response with status: \".concat(this.status, \" \").concat(this.statusText, \" for URL: \").concat(this.url);\n    }\n  }]);\n\n  return Response;\n}(Body);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar _nextRequestId = 0;\n/** @type {?} */\n\nvar JSONP_HOME = '__ng_jsonp__';\n/** @type {?} */\n\nvar _jsonpConnections = null;\n/**\n * @return {?}\n */\n\nfunction _getJsonpConnections() {\n  /** @type {?} */\n  var w = typeof window == 'object' ? window : {};\n\n  if (_jsonpConnections === null) {\n    _jsonpConnections = w[JSONP_HOME] = {};\n  }\n\n  return _jsonpConnections;\n} // Make sure not to evaluate this in a non-browser environment!\n\n\nvar BrowserJsonp = /*#__PURE__*/function () {\n  function BrowserJsonp() {\n    _classCallCheck(this, BrowserJsonp);\n  }\n\n  _createClass(BrowserJsonp, [{\n    key: \"build\",\n    value: // Construct a <script> element with the specified URL\n\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    function build(url) {\n      /** @type {?} */\n      var node = document.createElement('script');\n      node.src = url;\n      return node;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"nextRequestID\",\n    value: function nextRequestID() {\n      return \"__req\".concat(_nextRequestId++);\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n\n  }, {\n    key: \"requestCallback\",\n    value: function requestCallback(id) {\n      return \"\".concat(JSONP_HOME, \".\").concat(id, \".finished\");\n    }\n    /**\n     * @param {?} id\n     * @param {?} connection\n     * @return {?}\n     */\n\n  }, {\n    key: \"exposeConnection\",\n    value: function exposeConnection(id, connection) {\n      /** @type {?} */\n      var connections = _getJsonpConnections();\n\n      connections[id] = connection;\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeConnection\",\n    value: function removeConnection(id) {\n      /** @type {?} */\n      var connections = _getJsonpConnections();\n\n      connections[id] = null;\n    } // Attach the <script> element to the DOM\n\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(node) {\n      document.body.appendChild(\n      /** @type {?} */\n      node);\n    } // Remove <script> element from the DOM\n\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n\n  }, {\n    key: \"cleanup\",\n    value: function cleanup(node) {\n      if (node.parentNode) {\n        node.parentNode.removeChild(\n        /** @type {?} */\n        node);\n      }\n    }\n  }]);\n\n  return BrowserJsonp;\n}();\n\nBrowserJsonp.ɵfac = function BrowserJsonp_Factory(t) {\n  return new (t || BrowserJsonp)();\n};\n\nBrowserJsonp.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: BrowserJsonp,\n  factory: BrowserJsonp.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BrowserJsonp, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n/** @type {?} */\n\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Base class for an in-flight JSONP request.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\nvar JSONPConnection = /*#__PURE__*/function () {\n  /**\n   * \\@internal\n   * @param {?} req\n   * @param {?} _dom\n   * @param {?=} baseResponseOptions\n   */\n  function JSONPConnection(req, _dom, baseResponseOptions) {\n    var _this9 = this;\n\n    _classCallCheck(this, JSONPConnection);\n\n    this._dom = _dom;\n    this.baseResponseOptions = baseResponseOptions;\n    this._finished = false;\n\n    if (req.method !== RequestMethod.Get) {\n      throw new TypeError(JSONP_ERR_WRONG_METHOD);\n    }\n\n    this.request = req;\n    this.response = new Observable(function (responseObserver) {\n      _this9.readyState = ReadyState.Loading;\n      /** @type {?} */\n\n      var id = _this9._id = _dom.nextRequestID();\n\n      _dom.exposeConnection(id, _this9); // Workaround Dart\n      // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n\n      /** @type {?} */\n\n\n      var callback = _dom.requestCallback(_this9._id);\n      /** @type {?} */\n\n\n      var url = req.url;\n\n      if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n        url = url.replace('=JSONP_CALLBACK&', \"=\".concat(callback, \"&\"));\n      } else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n        url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + \"=\".concat(callback);\n      }\n      /** @type {?} */\n\n\n      var script = _this9._script = _dom.build(url);\n      /** @type {?} */\n\n\n      var onLoad = function onLoad(event) {\n        if (_this9.readyState === ReadyState.Cancelled) return;\n        _this9.readyState = ReadyState.Done;\n\n        _dom.cleanup(script);\n\n        if (!_this9._finished) {\n          /** @type {?} */\n          var _responseOptions = new ResponseOptions({\n            body: JSONP_ERR_NO_CALLBACK,\n            type: ResponseType.Error,\n            url: url\n          });\n\n          if (baseResponseOptions) {\n            _responseOptions = baseResponseOptions.merge(_responseOptions);\n          }\n\n          responseObserver.error(new Response(_responseOptions));\n          return;\n        }\n        /** @type {?} */\n\n\n        var responseOptions = new ResponseOptions({\n          body: _this9._responseData,\n          url: url\n        });\n\n        if (_this9.baseResponseOptions) {\n          responseOptions = _this9.baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.next(new Response(responseOptions));\n        responseObserver.complete();\n      };\n      /** @type {?} */\n\n\n      var onError = function onError(error) {\n        if (_this9.readyState === ReadyState.Cancelled) return;\n        _this9.readyState = ReadyState.Done;\n\n        _dom.cleanup(script);\n        /** @type {?} */\n\n\n        var responseOptions = new ResponseOptions({\n          body: error.message,\n          type: ResponseType.Error\n        });\n\n        if (baseResponseOptions) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      script.addEventListener('load', onLoad);\n      script.addEventListener('error', onError);\n\n      _dom.send(script);\n\n      return function () {\n        _this9.readyState = ReadyState.Cancelled;\n        script.removeEventListener('load', onLoad);\n        script.removeEventListener('error', onError);\n\n        _this9._dom.cleanup(script);\n      };\n    });\n  }\n  /**\n   * Callback called when the JSONP request completes, to notify the application\n   * of the new data.\n   * @param {?=} data\n   * @return {?}\n   */\n\n\n  _createClass(JSONPConnection, [{\n    key: \"finished\",\n    value: function finished(data) {\n      // Don't leak connections\n      this._finished = true;\n\n      this._dom.removeConnection(this._id);\n\n      if (this.readyState === ReadyState.Cancelled) return;\n      this._responseData = data;\n    }\n  }]);\n\n  return JSONPConnection;\n}();\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar JSONPBackend = /*#__PURE__*/function (_ConnectionBackend) {\n  _inherits(JSONPBackend, _ConnectionBackend);\n\n  var _super3 = _createSuper(JSONPBackend);\n\n  /**\n   * \\@internal\n   * @param {?} _browserJSONP\n   * @param {?} _baseResponseOptions\n   */\n  function JSONPBackend(_browserJSONP, _baseResponseOptions) {\n    var _this10;\n\n    _classCallCheck(this, JSONPBackend);\n\n    _this10 = _super3.call(this);\n    _this10._browserJSONP = _browserJSONP;\n    _this10._baseResponseOptions = _baseResponseOptions;\n    return _this10;\n  }\n  /**\n   * @param {?} request\n   * @return {?}\n   */\n\n\n  _createClass(JSONPBackend, [{\n    key: \"createConnection\",\n    value: function createConnection(request) {\n      return new JSONPConnection(request, this._browserJSONP, this._baseResponseOptions);\n    }\n  }]);\n\n  return JSONPBackend;\n}(ConnectionBackend);\n\nJSONPBackend.ɵfac = function JSONPBackend_Factory(t) {\n  return new (t || JSONPBackend)(ɵngcc0.ɵɵinject(BrowserJsonp), ɵngcc0.ɵɵinject(ResponseOptions));\n};\n\nJSONPBackend.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: JSONPBackend,\n  factory: JSONPBackend.ɵfac\n});\n/** @nocollapse */\n\nJSONPBackend.ctorParameters = function () {\n  return [{\n    type: BrowserJsonp\n  }, {\n    type: ResponseOptions\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JSONPBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: BrowserJsonp\n    }, {\n      type: ResponseOptions\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\nvar XHRConnection = /*#__PURE__*/function () {\n  /**\n   * @param {?} req\n   * @param {?} browserXHR\n   * @param {?=} baseResponseOptions\n   */\n  function XHRConnection(req, browserXHR, baseResponseOptions) {\n    var _this11 = this;\n\n    _classCallCheck(this, XHRConnection);\n\n    this.request = req;\n    this.response = new Observable(function (responseObserver) {\n      /** @type {?} */\n      var _xhr = browserXHR.build();\n\n      _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n\n      if (req.withCredentials != null) {\n        _xhr.withCredentials = req.withCredentials;\n      } // load event handler\n\n      /** @type {?} */\n\n\n      var onLoad = function onLoad() {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n\n        /** @type {?} */\n        var status = _xhr.status === 1223 ? 204 : _xhr.status;\n        /** @type {?} */\n\n        var body = null; // HTTP 204 means no content\n\n        if (status !== 204) {\n          // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n          // response/responseType properties were introduced in ResourceLoader Level2 spec\n          // (supported by IE10)\n          body = typeof _xhr.response === 'undefined' ? _xhr.responseText : _xhr.response; // Implicitly strip a potential XSSI prefix.\n\n          if (typeof body === 'string') {\n            body = body.replace(XSSI_PREFIX, '');\n          }\n        } // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n\n\n        if (status === 0) {\n          status = body ? 200 : 0;\n        }\n        /** @type {?} */\n\n\n        var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders()); // IE 9 does not provide the way to get URL of response\n\n        /** @type {?} */\n\n        var url = getResponseURL(_xhr) || req.url;\n        /** @type {?} */\n\n        var statusText = _xhr.statusText || 'OK';\n        /** @type {?} */\n\n        var responseOptions = new ResponseOptions({\n          body: body,\n          status: status,\n          headers: headers,\n          statusText: statusText,\n          url: url\n        });\n\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        /** @type {?} */\n\n\n        var response = new Response(responseOptions);\n        response.ok = isSuccess(status);\n\n        if (response.ok) {\n          responseObserver.next(response); // TODO(gdi2290): defer complete if array buffer until done\n\n          responseObserver.complete();\n          return;\n        }\n\n        responseObserver.error(response);\n      }; // error event handler\n\n      /** @type {?} */\n\n\n      var onError = function onError(err) {\n        /** @type {?} */\n        var responseOptions = new ResponseOptions({\n          body: err,\n          type: ResponseType.Error,\n          status: _xhr.status,\n          statusText: _xhr.statusText\n        });\n\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      _this11.setDetectedContentType(req, _xhr);\n\n      if (req.headers == null) {\n        req.headers = new Headers();\n      }\n\n      if (!req.headers.has('Accept')) {\n        req.headers.append('Accept', 'application/json, text/plain, */*');\n      }\n\n      req.headers.forEach(function (values, name) {\n        return _xhr.setRequestHeader(\n        /** @type {?} */\n        name, values.join(','));\n      }); // Select the correct buffer type to store the response\n\n      if (req.responseType != null && _xhr.responseType != null) {\n        switch (req.responseType) {\n          case ResponseContentType.ArrayBuffer:\n            _xhr.responseType = 'arraybuffer';\n            break;\n\n          case ResponseContentType.Json:\n            _xhr.responseType = 'json';\n            break;\n\n          case ResponseContentType.Text:\n            _xhr.responseType = 'text';\n            break;\n\n          case ResponseContentType.Blob:\n            _xhr.responseType = 'blob';\n            break;\n\n          default:\n            throw new Error('The selected responseType is not supported');\n        }\n      }\n\n      _xhr.addEventListener('load', onLoad);\n\n      _xhr.addEventListener('error', onError);\n\n      _xhr.send(_this11.request.getBody());\n\n      return function () {\n        _xhr.removeEventListener('load', onLoad);\n\n        _xhr.removeEventListener('error', onError);\n\n        _xhr.abort();\n      };\n    });\n  }\n  /**\n   * @param {?} req\n   * @param {?} _xhr\n   * @return {?}\n   */\n\n\n  _createClass(XHRConnection, [{\n    key: \"setDetectedContentType\",\n    value: function setDetectedContentType(req\n    /** TODO Request */\n    , _xhr\n    /** XMLHttpRequest */\n    ) {\n      // Skip if a custom Content-Type header is provided\n      if (req.headers != null && req.headers.get('Content-Type') != null) {\n        return;\n      } // Set the detected content type\n\n\n      switch (req.contentType) {\n        case ContentType.NONE:\n          break;\n\n        case ContentType.JSON:\n          _xhr.setRequestHeader('content-type', 'application/json');\n\n          break;\n\n        case ContentType.FORM:\n          _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n\n          break;\n\n        case ContentType.TEXT:\n          _xhr.setRequestHeader('content-type', 'text/plain');\n\n          break;\n\n        case ContentType.BLOB:\n          /** @type {?} */\n          var blob = req.blob();\n\n          if (blob.type) {\n            _xhr.setRequestHeader('content-type', blob.type);\n          }\n\n          break;\n      }\n    }\n  }]);\n\n  return XHRConnection;\n}();\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar CookieXSRFStrategy = /*#__PURE__*/function () {\n  /**\n   * @param {?=} _cookieName\n   * @param {?=} _headerName\n   */\n  function CookieXSRFStrategy() {\n    var _cookieName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'XSRF-TOKEN';\n\n    var _headerName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'X-XSRF-TOKEN';\n\n    _classCallCheck(this, CookieXSRFStrategy);\n\n    this._cookieName = _cookieName;\n    this._headerName = _headerName;\n  }\n  /**\n   * @param {?} req\n   * @return {?}\n   */\n\n\n  _createClass(CookieXSRFStrategy, [{\n    key: \"configureRequest\",\n    value: function configureRequest(req) {\n      /** @type {?} */\n      var xsrfToken = ɵgetDOM().getCookie(this._cookieName);\n\n      if (xsrfToken) {\n        req.headers.set(this._headerName, xsrfToken);\n      }\n    }\n  }]);\n\n  return CookieXSRFStrategy;\n}();\n/**\n * Creates {\\@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar XHRBackend = /*#__PURE__*/function () {\n  /**\n   * @param {?} _browserXHR\n   * @param {?} _baseResponseOptions\n   * @param {?} _xsrfStrategy\n   */\n  function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n    _classCallCheck(this, XHRBackend);\n\n    this._browserXHR = _browserXHR;\n    this._baseResponseOptions = _baseResponseOptions;\n    this._xsrfStrategy = _xsrfStrategy;\n  }\n  /**\n   * @param {?} request\n   * @return {?}\n   */\n\n\n  _createClass(XHRBackend, [{\n    key: \"createConnection\",\n    value: function createConnection(request) {\n      this._xsrfStrategy.configureRequest(request);\n\n      return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n    }\n  }]);\n\n  return XHRBackend;\n}();\n\nXHRBackend.ɵfac = function XHRBackend_Factory(t) {\n  return new (t || XHRBackend)(ɵngcc0.ɵɵinject(BrowserXhr), ɵngcc0.ɵɵinject(ResponseOptions), ɵngcc0.ɵɵinject(XSRFStrategy));\n};\n\nXHRBackend.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: XHRBackend,\n  factory: XHRBackend.ɵfac\n});\n/** @nocollapse */\n\nXHRBackend.ctorParameters = function () {\n  return [{\n    type: BrowserXhr\n  }, {\n    type: ResponseOptions\n  }, {\n    type: XSRFStrategy\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(XHRBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: BrowserXhr\n    }, {\n      type: ResponseOptions\n    }, {\n      type: XSRFStrategy\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar RequestOptions = /*#__PURE__*/function () {\n  // TODO(Dzmitry): remove search when this.search is removed\n\n  /**\n   * @param {?=} opts\n   */\n  function RequestOptions() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, RequestOptions);\n\n    var method = opts.method,\n        headers = opts.headers,\n        body = opts.body,\n        url = opts.url,\n        search = opts.search,\n        params = opts.params,\n        withCredentials = opts.withCredentials,\n        responseType = opts.responseType;\n    this.method = method != null ? normalizeMethodName(method) : null;\n    this.headers = headers != null ? headers : null;\n    this.body = body != null ? body : null;\n    this.url = url != null ? url : null;\n    this.params = this._mergeSearchParams(params || search);\n    this.withCredentials = withCredentials != null ? withCredentials : null;\n    this.responseType = responseType != null ? responseType : null;\n  }\n  /**\n   * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * Note that `headers` and `search` will override existing values completely if present in\n   * the `options` object. If these values should be merged, it should be done prior to calling\n   * `merge` on the `RequestOptions` instance.\n   *\n   * ```typescript\n   * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n   *\n   * const options = new RequestOptions({\n   *   method: RequestMethod.Post\n   * });\n   * const req = new Request(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('req.method:', RequestMethod[req.method]); // Post\n   * console.log('options.url:', options.url); // null\n   * console.log('req.url:', req.url); // https://google.com\n   * ```\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  _createClass(RequestOptions, [{\n    key: \"search\",\n    get:\n    /**\n     * @deprecated from 4.0.0. Use params instead.\n     * @return {?}\n     */\n    function get() {\n      return this.params;\n    }\n    /**\n     * @deprecated from 4.0.0. Use params instead.\n     * @param {?} params\n     * @return {?}\n     */\n    ,\n    set: function set(params) {\n      this.params = params;\n    }\n  }, {\n    key: \"merge\",\n    value: function merge(options) {\n      return new RequestOptions({\n        method: options && options.method != null ? options.method : this.method,\n        headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n        body: options && options.body != null ? options.body : this.body,\n        url: options && options.url != null ? options.url : this.url,\n        params: options && this._mergeSearchParams(options.params || options.search),\n        withCredentials: options && options.withCredentials != null ? options.withCredentials : this.withCredentials,\n        responseType: options && options.responseType != null ? options.responseType : this.responseType\n      });\n    }\n    /**\n     * @private\n     * @param {?=} params\n     * @return {?}\n     */\n\n  }, {\n    key: \"_mergeSearchParams\",\n    value: function _mergeSearchParams(params) {\n      if (!params) return this.params;\n\n      if (params instanceof URLSearchParams) {\n        return params.clone();\n      }\n\n      if (typeof params === 'string') {\n        return new URLSearchParams(params);\n      }\n\n      return this._parseParams(params);\n    }\n    /**\n     * @private\n     * @param {?=} objParams\n     * @return {?}\n     */\n\n  }, {\n    key: \"_parseParams\",\n    value: function _parseParams() {\n      var _this12 = this;\n\n      var objParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /** @type {?} */\n      var params = new URLSearchParams();\n      Object.keys(objParams).forEach(function (key) {\n        /** @type {?} */\n        var value = objParams[key];\n\n        if (Array.isArray(value)) {\n          value.forEach(function (item) {\n            return _this12._appendParam(key, item, params);\n          });\n        } else {\n          _this12._appendParam(key, value, params);\n        }\n      });\n      return params;\n    }\n    /**\n     * @private\n     * @param {?} key\n     * @param {?} value\n     * @param {?} params\n     * @return {?}\n     */\n\n  }, {\n    key: \"_appendParam\",\n    value: function _appendParam(key, value, params) {\n      if (typeof value !== 'string') {\n        value = JSON.stringify(value);\n      }\n\n      params.append(key, value);\n    }\n  }]);\n\n  return RequestOptions;\n}();\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar BaseRequestOptions = /*#__PURE__*/function (_RequestOptions) {\n  _inherits(BaseRequestOptions, _RequestOptions);\n\n  var _super4 = _createSuper(BaseRequestOptions);\n\n  function BaseRequestOptions() {\n    _classCallCheck(this, BaseRequestOptions);\n\n    return _super4.call(this, {\n      method: RequestMethod.Get,\n      headers: new Headers()\n    });\n  }\n\n  return BaseRequestOptions;\n}(RequestOptions);\n\nBaseRequestOptions.ɵfac = function BaseRequestOptions_Factory(t) {\n  return new (t || BaseRequestOptions)();\n};\n\nBaseRequestOptions.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: BaseRequestOptions,\n  factory: BaseRequestOptions.ɵfac\n});\n/** @nocollapse */\n\nBaseRequestOptions.ctorParameters = function () {\n  return [];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseRequestOptions, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(jeffbcross): properly implement body accessors\n\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n *\n * \\@Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar Request = /*#__PURE__*/function (_Body2) {\n  _inherits(Request, _Body2);\n\n  var _super5 = _createSuper(Request);\n\n  /**\n   * @param {?} requestOptions\n   */\n  function Request(requestOptions) {\n    var _this13;\n\n    _classCallCheck(this, Request);\n\n    _this13 = _super5.call(this); // TODO: assert that url is present\n\n    /** @type {?} */\n\n    var url = requestOptions.url;\n    _this13.url =\n    /** @type {?} */\n    requestOptions.url;\n    /** @type {?} */\n\n    var paramsArg = requestOptions.params || requestOptions.search;\n\n    if (paramsArg) {\n      /** @type {?} */\n      var params;\n\n      if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n        params = urlEncodeParams(paramsArg).toString();\n      } else {\n        params = paramsArg.toString();\n      }\n\n      if (params.length > 0) {\n        /** @type {?} */\n        var prefix = '?';\n\n        if (_this13.url.indexOf('?') != -1) {\n          prefix = _this13.url[_this13.url.length - 1] == '&' ? '' : '&';\n        } // TODO: just delete search-query-looking string in url?\n\n\n        _this13.url = url + prefix + params;\n      }\n    }\n\n    _this13._body = requestOptions.body;\n    _this13.method = normalizeMethodName(\n    /** @type {?} */\n    requestOptions.method); // TODO(jeffbcross): implement behavior\n    // Defaults to 'omit', consistent with browser\n\n    _this13.headers = new Headers(requestOptions.headers);\n    _this13.contentType = _this13.detectContentType();\n    _this13.withCredentials =\n    /** @type {?} */\n    requestOptions.withCredentials;\n    _this13.responseType =\n    /** @type {?} */\n    requestOptions.responseType;\n    return _this13;\n  }\n  /**\n   * Returns the content type enum based on header options.\n   * @return {?}\n   */\n\n\n  _createClass(Request, [{\n    key: \"detectContentType\",\n    value: function detectContentType() {\n      switch (this.headers.get('content-type')) {\n        case 'application/json':\n          return ContentType.JSON;\n\n        case 'application/x-www-form-urlencoded':\n          return ContentType.FORM;\n\n        case 'multipart/form-data':\n          return ContentType.FORM_DATA;\n\n        case 'text/plain':\n        case 'text/html':\n          return ContentType.TEXT;\n\n        case 'application/octet-stream':\n          return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n\n        default:\n          return this.detectContentTypeFromBody();\n      }\n    }\n    /**\n     * Returns the content type of request's body based on its type.\n     * @return {?}\n     */\n\n  }, {\n    key: \"detectContentTypeFromBody\",\n    value: function detectContentTypeFromBody() {\n      if (this._body == null) {\n        return ContentType.NONE;\n      } else if (this._body instanceof URLSearchParams) {\n        return ContentType.FORM;\n      } else if (this._body instanceof FormData) {\n        return ContentType.FORM_DATA;\n      } else if (this._body instanceof Blob$1) {\n        return ContentType.BLOB;\n      } else if (this._body instanceof ArrayBuffer$1) {\n        return ContentType.ARRAY_BUFFER;\n      } else if (this._body && typeof this._body === 'object') {\n        return ContentType.JSON;\n      } else {\n        return ContentType.TEXT;\n      }\n    }\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getBody\",\n    value: function getBody() {\n      switch (this.contentType) {\n        case ContentType.JSON:\n          return this.text();\n\n        case ContentType.FORM:\n          return this.text();\n\n        case ContentType.FORM_DATA:\n          return this._body;\n\n        case ContentType.TEXT:\n          return this.text();\n\n        case ContentType.BLOB:\n          return this.blob();\n\n        case ContentType.ARRAY_BUFFER:\n          return this.arrayBuffer();\n\n        default:\n          return null;\n      }\n    }\n  }]);\n\n  return Request;\n}(Body);\n/**\n * @param {?} params\n * @return {?}\n */\n\n\nfunction urlEncodeParams(params) {\n  /** @type {?} */\n  var searchParams = new URLSearchParams();\n  Object.keys(params).forEach(function (key) {\n    /** @type {?} */\n    var value = params[key];\n\n    if (value && Array.isArray(value)) {\n      value.forEach(function (element) {\n        return searchParams.append(key, element.toString());\n      });\n    } else {\n      searchParams.append(key, value.toString());\n    }\n  });\n  return searchParams;\n}\n/** @type {?} */\n\n\nvar noop = function noop() {};\n/** @type {?} */\n\n\nvar w = typeof window == 'object' ? window : noop;\n/** @type {?} */\n\nvar FormData =\n/** @type {?} */\nw['FormData'] || noop;\n/** @type {?} */\n\nvar Blob$1 =\n/** @type {?} */\nw['Blob'] || noop;\n/** @type {?} */\n\nvar ArrayBuffer$1 =\n/** @type {?} */\nw['ArrayBuffer'] || noop;\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\n\nfunction httpRequest(backend, request) {\n  return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\n\n\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n  /** @type {?} */\n  var newOptions = defaultOpts;\n\n  if (providedOpts) {\n    // Hack so Dart can used named parameters\n    return (\n      /** @type {?} */\n      newOptions.merge(new RequestOptions({\n        method: providedOpts.method || method,\n        url: providedOpts.url || url,\n        search: providedOpts.search,\n        params: providedOpts.params,\n        headers: providedOpts.headers,\n        body: providedOpts.body,\n        withCredentials: providedOpts.withCredentials,\n        responseType: providedOpts.responseType\n      }))\n    );\n  }\n\n  return (\n    /** @type {?} */\n    newOptions.merge(new RequestOptions({\n      method: method,\n      url: url\n    }))\n  );\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import {map} from 'rxjs/operators';\n *\n * \\@Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .pipe(map(res => res.json()))\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar Http = /*#__PURE__*/function () {\n  /**\n   * @param {?} _backend\n   * @param {?} _defaultOptions\n   */\n  function Http(_backend, _defaultOptions) {\n    _classCallCheck(this, Http);\n\n    this._backend = _backend;\n    this._defaultOptions = _defaultOptions;\n  }\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {\\@link BaseRequestOptions} before performing the request.\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  _createClass(Http, [{\n    key: \"request\",\n    value: function request(url, options) {\n      /** @type {?} */\n      var responseObservable;\n\n      if (typeof url === 'string') {\n        responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get,\n        /** @type {?} */\n        url)));\n      } else if (url instanceof Request) {\n        responseObservable = httpRequest(this._backend, url);\n      } else {\n        throw new Error('First argument must be a url string or Request instance.');\n      }\n\n      return responseObservable;\n    }\n    /**\n     * Performs a request with `get` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(url, options) {\n      return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n    }\n    /**\n     * Performs a request with `post` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"post\",\n    value: function post(url, body, options) {\n      return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({\n        body: body\n      })), options, RequestMethod.Post, url)));\n    }\n    /**\n     * Performs a request with `put` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"put\",\n    value: function put(url, body, options) {\n      return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({\n        body: body\n      })), options, RequestMethod.Put, url)));\n    }\n    /**\n     * Performs a request with `delete` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(url, options) {\n      return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n    }\n    /**\n     * Performs a request with `patch` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"patch\",\n    value: function patch(url, body, options) {\n      return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({\n        body: body\n      })), options, RequestMethod.Patch, url)));\n    }\n    /**\n     * Performs a request with `head` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"head\",\n    value: function head(url, options) {\n      return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n    }\n    /**\n     * Performs a request with `options` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"options\",\n    value: function options(url, _options) {\n      return this.request(new Request(mergeOptions(this._defaultOptions, _options, RequestMethod.Options, url)));\n    }\n  }]);\n\n  return Http;\n}();\n\nHttp.ɵfac = function Http_Factory(t) {\n  return new (t || Http)(ɵngcc0.ɵɵinject(ConnectionBackend), ɵngcc0.ɵɵinject(RequestOptions));\n};\n\nHttp.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: Http,\n  factory: Http.ɵfac\n});\n/** @nocollapse */\n\nHttp.ctorParameters = function () {\n  return [{\n    type: ConnectionBackend\n  }, {\n    type: RequestOptions\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Http, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ConnectionBackend\n    }, {\n      type: RequestOptions\n    }];\n  }, null);\n})();\n/**\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar Jsonp = /*#__PURE__*/function (_Http) {\n  _inherits(Jsonp, _Http);\n\n  var _super6 = _createSuper(Jsonp);\n\n  /**\n   * @param {?} backend\n   * @param {?} defaultOptions\n   */\n  function Jsonp(backend, defaultOptions) {\n    _classCallCheck(this, Jsonp);\n\n    return _super6.call(this, backend, defaultOptions);\n  }\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {\\@link BaseRequestOptions} before performing the request.\n   *\n   * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n   * supported by all current browsers. Because JSONP creates a `<script>` element with\n   * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n   * source could expose your application to XSS risks. Data exposed by JSONP may also be\n   * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n   * future security issues (e.g. content sniffing).  For more detail, see the\n   * [Security Guide](http://g.co/ng/security).\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  _createClass(Jsonp, [{\n    key: \"request\",\n    value: function request(url, options) {\n      /** @type {?} */\n      var responseObservable;\n\n      if (typeof url === 'string') {\n        url = new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get,\n        /** @type {?} */\n        url));\n      }\n\n      if (url instanceof Request) {\n        if (url.method !== RequestMethod.Get) {\n          throw new Error('JSONP requests must use GET request method.');\n        }\n\n        responseObservable = httpRequest(this._backend, url);\n      } else {\n        throw new Error('First argument must be a url string or Request instance.');\n      }\n\n      return responseObservable;\n    }\n  }]);\n\n  return Jsonp;\n}(Http);\n\nJsonp.ɵfac = function Jsonp_Factory(t) {\n  return new (t || Jsonp)(ɵngcc0.ɵɵinject(ConnectionBackend), ɵngcc0.ɵɵinject(RequestOptions));\n};\n\nJsonp.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: Jsonp,\n  factory: Jsonp.ɵfac\n});\n/** @nocollapse */\n\nJsonp.ctorParameters = function () {\n  return [{\n    type: ConnectionBackend\n  }, {\n    type: RequestOptions\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Jsonp, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ConnectionBackend\n    }, {\n      type: RequestOptions\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @return {?}\n */\n\n\nfunction _createDefaultCookieXSRFStrategy() {\n  return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\n\n\nfunction httpFactory(xhrBackend, requestOptions) {\n  return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\n\n\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n  return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\n\n\nvar HttpModule = function HttpModule() {\n  _classCallCheck(this, HttpModule);\n};\n\nHttpModule.ɵfac = function HttpModule_Factory(t) {\n  return new (t || HttpModule)();\n};\n\nHttpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: HttpModule\n});\nHttpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  providers: [// TODO(pascal): use factory type annotations once supported in DI\n  // issue: https://github.com/angular/angular/issues/3183\n  {\n    provide: Http,\n    useFactory: httpFactory,\n    deps: [XHRBackend, RequestOptions]\n  }, BrowserXhr, {\n    provide: RequestOptions,\n    useClass: BaseRequestOptions\n  }, {\n    provide: ResponseOptions,\n    useClass: BaseResponseOptions\n  }, XHRBackend, {\n    provide: XSRFStrategy,\n    useFactory: _createDefaultCookieXSRFStrategy\n  }]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpModule, [{\n    type: NgModule,\n    args: [{\n      providers: [// TODO(pascal): use factory type annotations once supported in DI\n      // issue: https://github.com/angular/angular/issues/3183\n      {\n        provide: Http,\n        useFactory: httpFactory,\n        deps: [XHRBackend, RequestOptions]\n      }, BrowserXhr, {\n        provide: RequestOptions,\n        useClass: BaseRequestOptions\n      }, {\n        provide: ResponseOptions,\n        useClass: BaseResponseOptions\n      }, XHRBackend, {\n        provide: XSRFStrategy,\n        useFactory: _createDefaultCookieXSRFStrategy\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * The module that includes jsonp's providers\n *\n * @deprecated see https://angular.io/api/common/http/HttpClient#jsonp\n * \\@publicApi\n */\n\n\nvar JsonpModule = function JsonpModule() {\n  _classCallCheck(this, JsonpModule);\n};\n\nJsonpModule.ɵfac = function JsonpModule_Factory(t) {\n  return new (t || JsonpModule)();\n};\n\nJsonpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: JsonpModule\n});\nJsonpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  providers: [// TODO(pascal): use factory type annotations once supported in DI\n  // issue: https://github.com/angular/angular/issues/3183\n  {\n    provide: Jsonp,\n    useFactory: jsonpFactory,\n    deps: [JSONPBackend, RequestOptions]\n  }, BrowserJsonp, {\n    provide: RequestOptions,\n    useClass: BaseRequestOptions\n  }, {\n    provide: ResponseOptions,\n    useClass: BaseResponseOptions\n  }, JSONPBackend]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpModule, [{\n    type: NgModule,\n    args: [{\n      providers: [// TODO(pascal): use factory type annotations once supported in DI\n      // issue: https://github.com/angular/angular/issues/3183\n      {\n        provide: Jsonp,\n        useFactory: jsonpFactory,\n        deps: [JSONPBackend, RequestOptions]\n      }, BrowserJsonp, {\n        provide: RequestOptions,\n        useClass: BaseRequestOptions\n      }, {\n        provide: ResponseOptions,\n        useClass: BaseResponseOptions\n      }, JSONPBackend]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @type {?}\n */\n\n\nvar VERSION = new Version('7.2.16');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BrowserJsonp as ɵangular_packages_http_http_e, Body as ɵangular_packages_http_http_f, _createDefaultCookieXSRFStrategy as ɵangular_packages_http_http_a, httpFactory as ɵangular_packages_http_http_b, jsonpFactory as ɵangular_packages_http_http_c, BrowserXhr, JSONPBackend, JSONPConnection, CookieXSRFStrategy, XHRBackend, XHRConnection, BaseRequestOptions, RequestOptions, BaseResponseOptions, ResponseOptions, ReadyState, RequestMethod, ResponseContentType, ResponseType, Headers, Http, Jsonp, HttpModule, JsonpModule, Connection, ConnectionBackend, XSRFStrategy, Request, Response, QueryEncoder, URLSearchParams, VERSION }; //# sourceMappingURL=http.js.map","map":{"version":3,"sources":["/Users/mohammedelmourabit/xrp/xpr/node_modules/@angular/http/__ivy_ngcc__/fesm2015/http.js"],"names":["Injectable","NgModule","Version","Observable","ɵgetDOM","ɵngcc0","BrowserXhr","XMLHttpRequest","ɵfac","BrowserXhr_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","ctorParameters","ngDevMode","ɵsetClassMetadata","type","RequestMethod","Get","Post","Put","Delete","Options","Head","Patch","ReadyState","Unsent","Open","HeadersReceived","Loading","Done","Cancelled","ResponseType","Basic","Cors","Default","Error","Opaque","ContentType","NONE","JSON","FORM","FORM_DATA","TEXT","BLOB","ARRAY_BUFFER","ResponseContentType","Text","Json","ArrayBuffer","Blob","Headers","headers","_headers","Map","_normalizedNames","forEach","values","name","value","append","Object","keys","Array","isArray","delete","getAll","set","push","lcName","toLowerCase","fn","get","length","has","from","join","mayBeSetNormalizedName","serialized","split","v","headersString","line","index","indexOf","slice","trim","ResponseOptions","opts","body","status","statusText","url","options","BaseResponseOptions","BaseResponseOptions_Factory","ConnectionBackend","Connection","XSRFStrategy","normalizeMethodName","method","toUpperCase","isSuccess","getResponseURL","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","stringToArrayBuffer","input","view","Uint16Array","i","strLen","charCodeAt","buffer","paramParser","rawParams","map","params","param","eqIdx","key","val","list","QueryEncoder","standardEncoding","encodeURIComponent","replace","URLSearchParams","queryEncoder","paramsMap","clone","appendAll","storedParam","searchParams","paramsList","k","encodeKey","encodeValue","Body","_body","parse","text","encodingHint","toString","String","fromCharCode","apply","Uint8Array","stringify","Response","responseOptions","ok","_nextRequestId","JSONP_HOME","_jsonpConnections","_getJsonpConnections","w","window","BrowserJsonp","node","document","createElement","src","id","connection","connections","appendChild","parentNode","removeChild","BrowserJsonp_Factory","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONPConnection","req","_dom","baseResponseOptions","_finished","TypeError","request","response","responseObserver","readyState","_id","nextRequestID","exposeConnection","callback","requestCallback","lastIndexOf","substring","script","_script","build","onLoad","event","cleanup","merge","error","_responseData","next","complete","onError","message","addEventListener","send","removeEventListener","data","removeConnection","JSONPBackend","_browserJSONP","_baseResponseOptions","JSONPBackend_Factory","ɵɵinject","XSSI_PREFIX","XHRConnection","browserXHR","_xhr","open","withCredentials","responseText","fromResponseHeaderString","err","setDetectedContentType","setRequestHeader","responseType","getBody","abort","contentType","blob","CookieXSRFStrategy","_cookieName","_headerName","xsrfToken","getCookie","XHRBackend","_browserXHR","_xsrfStrategy","configureRequest","XHRBackend_Factory","RequestOptions","search","_mergeSearchParams","_parseParams","objParams","item","_appendParam","BaseRequestOptions","BaseRequestOptions_Factory","Request","requestOptions","paramsArg","urlEncodeParams","prefix","detectContentType","ArrayBuffer$1","detectContentTypeFromBody","FormData","Blob$1","arrayBuffer","element","noop","httpRequest","backend","createConnection","mergeOptions","defaultOpts","providedOpts","newOptions","Http","_backend","_defaultOptions","responseObservable","Http_Factory","Jsonp","defaultOptions","Jsonp_Factory","_createDefaultCookieXSRFStrategy","httpFactory","xhrBackend","jsonpFactory","jsonpBackend","HttpModule","HttpModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","provide","useFactory","deps","useClass","args","JsonpModule","JsonpModule_Factory","VERSION","ɵangular_packages_http_http_e","ɵangular_packages_http_http_f","ɵangular_packages_http_http_a","ɵangular_packages_http_http_b","ɵangular_packages_http_http_c"],"mappings":"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","sourcesContent":["/**\n * @license Angular v7.2.16\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Injectable, NgModule, Version } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ɵgetDOM } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nimport * as ɵngcc0 from '@angular/core';\nclass BrowserXhr {\n    constructor() { }\n    /**\n     * @return {?}\n     */\n    build() { return (/** @type {?} */ ((new XMLHttpRequest()))); }\n}\nBrowserXhr.ɵfac = function BrowserXhr_Factory(t) { return new (t || BrowserXhr)(); };\nBrowserXhr.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BrowserXhr, factory: BrowserXhr.ɵfac });\n/** @nocollapse */\nBrowserXhr.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BrowserXhr, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst RequestMethod = {\n    Get: 0,\n    Post: 1,\n    Put: 2,\n    Delete: 3,\n    Options: 4,\n    Head: 5,\n    Patch: 6,\n};\nRequestMethod[RequestMethod.Get] = 'Get';\nRequestMethod[RequestMethod.Post] = 'Post';\nRequestMethod[RequestMethod.Put] = 'Put';\nRequestMethod[RequestMethod.Delete] = 'Delete';\nRequestMethod[RequestMethod.Options] = 'Options';\nRequestMethod[RequestMethod.Head] = 'Head';\nRequestMethod[RequestMethod.Patch] = 'Patch';\n/** @enum {number} */\nconst ReadyState = {\n    Unsent: 0,\n    Open: 1,\n    HeadersReceived: 2,\n    Loading: 3,\n    Done: 4,\n    Cancelled: 5,\n};\nReadyState[ReadyState.Unsent] = 'Unsent';\nReadyState[ReadyState.Open] = 'Open';\nReadyState[ReadyState.HeadersReceived] = 'HeadersReceived';\nReadyState[ReadyState.Loading] = 'Loading';\nReadyState[ReadyState.Done] = 'Done';\nReadyState[ReadyState.Cancelled] = 'Cancelled';\n/** @enum {number} */\nconst ResponseType = {\n    Basic: 0,\n    Cors: 1,\n    Default: 2,\n    Error: 3,\n    Opaque: 4,\n};\nResponseType[ResponseType.Basic] = 'Basic';\nResponseType[ResponseType.Cors] = 'Cors';\nResponseType[ResponseType.Default] = 'Default';\nResponseType[ResponseType.Error] = 'Error';\nResponseType[ResponseType.Opaque] = 'Opaque';\n/** @enum {number} */\nconst ContentType = {\n    NONE: 0,\n    JSON: 1,\n    FORM: 2,\n    FORM_DATA: 3,\n    TEXT: 4,\n    BLOB: 5,\n    ARRAY_BUFFER: 6,\n};\nContentType[ContentType.NONE] = 'NONE';\nContentType[ContentType.JSON] = 'JSON';\nContentType[ContentType.FORM] = 'FORM';\nContentType[ContentType.FORM_DATA] = 'FORM_DATA';\nContentType[ContentType.TEXT] = 'TEXT';\nContentType[ContentType.BLOB] = 'BLOB';\nContentType[ContentType.ARRAY_BUFFER] = 'ARRAY_BUFFER';\n/** @enum {number} */\nconst ResponseContentType = {\n    Text: 0,\n    Json: 1,\n    ArrayBuffer: 2,\n    Blob: 3,\n};\nResponseContentType[ResponseContentType.Text] = 'Text';\nResponseContentType[ResponseContentType.Json] = 'Json';\nResponseContentType[ResponseContentType.ArrayBuffer] = 'ArrayBuffer';\nResponseContentType[ResponseContentType.Blob] = 'Blob';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Headers} from '\\@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass Headers {\n    // TODO(vicb): any -> string|string[]\n    /**\n     * @param {?=} headers\n     */\n    constructor(headers) {\n        /**\n         * \\@internal header names are lower case\n         */\n        this._headers = new Map();\n        /**\n         * \\@internal map lower case names to actual names\n         */\n        this._normalizedNames = new Map();\n        if (!headers) {\n            return;\n        }\n        if (headers instanceof Headers) {\n            headers.forEach((values, name) => {\n                values.forEach(value => this.append(name, value));\n            });\n            return;\n        }\n        Object.keys(headers).forEach((name) => {\n            /** @type {?} */\n            const values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n            this.delete(name);\n            values.forEach(value => this.append(name, value));\n        });\n    }\n    /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     * @param {?} headersString\n     * @return {?}\n     */\n    static fromResponseHeaderString(headersString) {\n        /** @type {?} */\n        const headers = new Headers();\n        headersString.split('\\n').forEach(line => {\n            /** @type {?} */\n            const index = line.indexOf(':');\n            if (index > 0) {\n                /** @type {?} */\n                const name = line.slice(0, index);\n                /** @type {?} */\n                const value = line.slice(index + 1).trim();\n                headers.set(name, value);\n            }\n        });\n        return headers;\n    }\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    append(name, value) {\n        /** @type {?} */\n        const values = this.getAll(name);\n        if (values === null) {\n            this.set(name, value);\n        }\n        else {\n            values.push(value);\n        }\n    }\n    /**\n     * Deletes all header values for the given name.\n     * @param {?} name\n     * @return {?}\n     */\n    delete(name) {\n        /** @type {?} */\n        const lcName = name.toLowerCase();\n        this._normalizedNames.delete(lcName);\n        this._headers.delete(lcName);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEach(fn) {\n        this._headers.forEach((values, lcName) => fn(values, this._normalizedNames.get(lcName), this._headers));\n    }\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    get(name) {\n        /** @type {?} */\n        const values = this.getAll(name);\n        if (values === null) {\n            return null;\n        }\n        return values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    has(name) { return this._headers.has(name.toLowerCase()); }\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    keys() { return Array.from(this._normalizedNames.values()); }\n    /**\n     * Sets or overrides header value for given name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    set(name, value) {\n        if (Array.isArray(value)) {\n            if (value.length) {\n                this._headers.set(name.toLowerCase(), [value.join(',')]);\n            }\n        }\n        else {\n            this._headers.set(name.toLowerCase(), [value]);\n        }\n        this.mayBeSetNormalizedName(name);\n    }\n    /**\n     * Returns values of all headers.\n     * @return {?}\n     */\n    values() { return Array.from(this._headers.values()); }\n    /**\n     * Returns string of all headers.\n     * @return {?}\n     */\n    // TODO(vicb): returns {[name: string]: string[]}\n    toJSON() {\n        /** @type {?} */\n        const serialized = {};\n        this._headers.forEach((values, name) => {\n            /** @type {?} */\n            const split = [];\n            values.forEach(v => split.push(...v.split(',')));\n            serialized[(/** @type {?} */ (this._normalizedNames.get(name)))] = split;\n        });\n        return serialized;\n    }\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    getAll(name) {\n        return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n    }\n    /**\n     * This method is not implemented.\n     * @return {?}\n     */\n    entries() { throw new Error('\"entries\" method is not implemented on Headers class'); }\n    /**\n     * @private\n     * @param {?} name\n     * @return {?}\n     */\n    mayBeSetNormalizedName(name) {\n        /** @type {?} */\n        const lcName = name.toLowerCase();\n        if (!this._normalizedNames.has(lcName)) {\n            this._normalizedNames.set(lcName, name);\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass ResponseOptions {\n    /**\n     * @param {?=} opts\n     */\n    constructor(opts = {}) {\n        const { body, status, headers, statusText, type, url } = opts;\n        this.body = body != null ? body : null;\n        this.status = status != null ? status : null;\n        this.headers = headers != null ? headers : null;\n        this.statusText = statusText != null ? statusText : null;\n        this.type = type != null ? type : null;\n        this.url = url != null ? url : null;\n    }\n    /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '\\@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    merge(options) {\n        return new ResponseOptions({\n            body: options && options.body != null ? options.body : this.body,\n            status: options && options.status != null ? options.status : this.status,\n            headers: options && options.headers != null ? options.headers : this.headers,\n            statusText: options && options.statusText != null ? options.statusText : this.statusText,\n            type: options && options.type != null ? options.type : this.type,\n            url: options && options.url != null ? options.url : this.url,\n        });\n    }\n}\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n *\n * ### Example\n *\n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass BaseResponseOptions extends ResponseOptions {\n    constructor() {\n        super({ status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() });\n    }\n}\nBaseResponseOptions.ɵfac = function BaseResponseOptions_Factory(t) { return new (t || BaseResponseOptions)(); };\nBaseResponseOptions.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BaseResponseOptions, factory: BaseResponseOptions.ɵfac });\n/** @nocollapse */\nBaseResponseOptions.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseResponseOptions, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @abstract\n */\nclass ConnectionBackend {\n}\n/**\n * Abstract class from which real connections are derived.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @abstract\n */\nclass Connection {\n}\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @abstract\n */\nclass XSRFStrategy {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} method\n * @return {?}\n */\nfunction normalizeMethodName(method) {\n    if (typeof method !== 'string')\n        return method;\n    switch (method.toUpperCase()) {\n        case 'GET':\n            return RequestMethod.Get;\n        case 'POST':\n            return RequestMethod.Post;\n        case 'PUT':\n            return RequestMethod.Put;\n        case 'DELETE':\n            return RequestMethod.Delete;\n        case 'OPTIONS':\n            return RequestMethod.Options;\n        case 'HEAD':\n            return RequestMethod.Head;\n        case 'PATCH':\n            return RequestMethod.Patch;\n    }\n    throw new Error(`Invalid request method. The method \"${method}\" is not supported.`);\n}\n/** @type {?} */\nconst isSuccess = (status) => (status >= 200 && status < 300);\n/**\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseURL(xhr) {\n    if ('responseURL' in xhr) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\nfunction stringToArrayBuffer(input) {\n    /** @type {?} */\n    const view = new Uint16Array(input.length);\n    for (let i = 0, strLen = input.length; i < strLen; i++) {\n        view[i] = input.charCodeAt(i);\n    }\n    return view.buffer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams = '') {\n    /** @type {?} */\n    const map = new Map();\n    if (rawParams.length > 0) {\n        /** @type {?} */\n        const params = rawParams.split('&');\n        params.forEach((param) => {\n            /** @type {?} */\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)];\n            /** @type {?} */\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n *\n */\nclass QueryEncoder {\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    encodeKey(key) { return standardEncoding(key); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    encodeValue(value) { return standardEncoding(value); }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass URLSearchParams {\n    /**\n     * @param {?=} rawParams\n     * @param {?=} queryEncoder\n     */\n    constructor(rawParams = '', queryEncoder = new QueryEncoder()) {\n        this.rawParams = rawParams;\n        this.queryEncoder = queryEncoder;\n        this.paramsMap = paramParser(rawParams);\n    }\n    /**\n     * @return {?}\n     */\n    clone() {\n        /** @type {?} */\n        const clone = new URLSearchParams('', this.queryEncoder);\n        clone.appendAll(this);\n        return clone;\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    has(param) { return this.paramsMap.has(param); }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    get(param) {\n        /** @type {?} */\n        const storedParam = this.paramsMap.get(param);\n        return Array.isArray(storedParam) ? storedParam[0] : null;\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    getAll(param) { return this.paramsMap.get(param) || []; }\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    set(param, val) {\n        if (val === void 0 || val === null) {\n            this.delete(param);\n            return;\n        }\n        /** @type {?} */\n        const list = this.paramsMap.get(param) || [];\n        list.length = 0;\n        list.push(val);\n        this.paramsMap.set(param, list);\n    }\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    setAll(searchParams) {\n        searchParams.paramsMap.forEach((value, param) => {\n            /** @type {?} */\n            const list = this.paramsMap.get(param) || [];\n            list.length = 0;\n            list.push(value[0]);\n            this.paramsMap.set(param, list);\n        });\n    }\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    append(param, val) {\n        if (val === void 0 || val === null)\n            return;\n        /** @type {?} */\n        const list = this.paramsMap.get(param) || [];\n        list.push(val);\n        this.paramsMap.set(param, list);\n    }\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `append(name, value)`\n    // for each value in `values`.\n    //\n    // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    appendAll(searchParams) {\n        searchParams.paramsMap.forEach((value, param) => {\n            /** @type {?} */\n            const list = this.paramsMap.get(param) || [];\n            for (let i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            this.paramsMap.set(param, list);\n        });\n    }\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `delete(name)`,\n    // followed by `set(name, values)`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    replaceAll(searchParams) {\n        searchParams.paramsMap.forEach((value, param) => {\n            /** @type {?} */\n            const list = this.paramsMap.get(param) || [];\n            list.length = 0;\n            for (let i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            this.paramsMap.set(param, list);\n        });\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        /** @type {?} */\n        const paramsList = [];\n        this.paramsMap.forEach((values, k) => {\n            values.forEach(v => paramsList.push(this.queryEncoder.encodeKey(k) + '=' + this.queryEncoder.encodeValue(v)));\n        });\n        return paramsList.join('&');\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    delete(param) { this.paramsMap.delete(param); }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\nclass Body {\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     * @return {?}\n     */\n    json() {\n        if (typeof this._body === 'string') {\n            return JSON.parse((/** @type {?} */ (this._body)));\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return JSON.parse(this.text());\n        }\n        return this._body;\n    }\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     * @param {?=} encodingHint\n     * @return {?}\n     */\n    text(encodingHint = 'legacy') {\n        if (this._body instanceof URLSearchParams) {\n            return this._body.toString();\n        }\n        if (this._body instanceof ArrayBuffer) {\n            switch (encodingHint) {\n                case 'legacy':\n                    return String.fromCharCode.apply(null, new Uint16Array((/** @type {?} */ (this._body))));\n                case 'iso-8859':\n                    return String.fromCharCode.apply(null, new Uint8Array((/** @type {?} */ (this._body))));\n                default:\n                    throw new Error(`Invalid value for encodingHint: ${encodingHint}`);\n            }\n        }\n        if (this._body == null) {\n            return '';\n        }\n        if (typeof this._body === 'object') {\n            return JSON.stringify(this._body, null, 2);\n        }\n        return this._body.toString();\n    }\n    /**\n     * Return the body as an ArrayBuffer\n     * @return {?}\n     */\n    arrayBuffer() {\n        if (this._body instanceof ArrayBuffer) {\n            return (/** @type {?} */ (this._body));\n        }\n        return stringToArrayBuffer(this.text());\n    }\n    /**\n     * Returns the request's body as a Blob, assuming that body exists.\n     * @return {?}\n     */\n    blob() {\n        if (this._body instanceof Blob) {\n            return (/** @type {?} */ (this._body));\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return new Blob([this._body]);\n        }\n        throw new Error('The request body isn\\'t either a blob or an array buffer');\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass Response extends Body {\n    /**\n     * @param {?} responseOptions\n     */\n    constructor(responseOptions) {\n        super();\n        this._body = responseOptions.body;\n        this.status = (/** @type {?} */ (responseOptions.status));\n        this.ok = (this.status >= 200 && this.status <= 299);\n        this.statusText = responseOptions.statusText;\n        this.headers = responseOptions.headers;\n        this.type = (/** @type {?} */ (responseOptions.type));\n        this.url = (/** @type {?} */ (responseOptions.url));\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        return `Response with status: ${this.status} ${this.statusText} for URL: ${this.url}`;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet _nextRequestId = 0;\n/** @type {?} */\nconst JSONP_HOME = '__ng_jsonp__';\n/** @type {?} */\nlet _jsonpConnections = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections() {\n    /** @type {?} */\n    const w = typeof window == 'object' ? window : {};\n    if (_jsonpConnections === null) {\n        _jsonpConnections = w[JSONP_HOME] = {};\n    }\n    return _jsonpConnections;\n}\n// Make sure not to evaluate this in a non-browser environment!\nclass BrowserJsonp {\n    // Construct a <script> element with the specified URL\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    build(url) {\n        /** @type {?} */\n        const node = document.createElement('script');\n        node.src = url;\n        return node;\n    }\n    /**\n     * @return {?}\n     */\n    nextRequestID() { return `__req${_nextRequestId++}`; }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    requestCallback(id) { return `${JSONP_HOME}.${id}.finished`; }\n    /**\n     * @param {?} id\n     * @param {?} connection\n     * @return {?}\n     */\n    exposeConnection(id, connection) {\n        /** @type {?} */\n        const connections = _getJsonpConnections();\n        connections[id] = connection;\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    removeConnection(id) {\n        /** @type {?} */\n        const connections = _getJsonpConnections();\n        connections[id] = null;\n    }\n    // Attach the <script> element to the DOM\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    send(node) { document.body.appendChild((/** @type {?} */ ((node)))); }\n    // Remove <script> element from the DOM\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    cleanup(node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild((/** @type {?} */ ((node))));\n        }\n    }\n}\nBrowserJsonp.ɵfac = function BrowserJsonp_Factory(t) { return new (t || BrowserJsonp)(); };\nBrowserJsonp.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BrowserJsonp, factory: BrowserJsonp.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BrowserJsonp, [{\n        type: Injectable\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n/** @type {?} */\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Base class for an in-flight JSONP request.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass JSONPConnection {\n    /**\n     * \\@internal\n     * @param {?} req\n     * @param {?} _dom\n     * @param {?=} baseResponseOptions\n     */\n    constructor(req, _dom, baseResponseOptions) {\n        this._dom = _dom;\n        this.baseResponseOptions = baseResponseOptions;\n        this._finished = false;\n        if (req.method !== RequestMethod.Get) {\n            throw new TypeError(JSONP_ERR_WRONG_METHOD);\n        }\n        this.request = req;\n        this.response = new Observable((responseObserver) => {\n            this.readyState = ReadyState.Loading;\n            /** @type {?} */\n            const id = this._id = _dom.nextRequestID();\n            _dom.exposeConnection(id, this);\n            // Workaround Dart\n            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n            /** @type {?} */\n            const callback = _dom.requestCallback(this._id);\n            /** @type {?} */\n            let url = req.url;\n            if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n                url = url.replace('=JSONP_CALLBACK&', `=${callback}&`);\n            }\n            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + `=${callback}`;\n            }\n            /** @type {?} */\n            const script = this._script = _dom.build(url);\n            /** @type {?} */\n            const onLoad = (event) => {\n                if (this.readyState === ReadyState.Cancelled)\n                    return;\n                this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                if (!this._finished) {\n                    /** @type {?} */\n                    let responseOptions = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url });\n                    if (baseResponseOptions) {\n                        responseOptions = baseResponseOptions.merge(responseOptions);\n                    }\n                    responseObserver.error(new Response(responseOptions));\n                    return;\n                }\n                /** @type {?} */\n                let responseOptions = new ResponseOptions({ body: this._responseData, url });\n                if (this.baseResponseOptions) {\n                    responseOptions = this.baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.next(new Response(responseOptions));\n                responseObserver.complete();\n            };\n            /** @type {?} */\n            const onError = (error) => {\n                if (this.readyState === ReadyState.Cancelled)\n                    return;\n                this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                /** @type {?} */\n                let responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });\n                if (baseResponseOptions) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            script.addEventListener('load', onLoad);\n            script.addEventListener('error', onError);\n            _dom.send(script);\n            return () => {\n                this.readyState = ReadyState.Cancelled;\n                script.removeEventListener('load', onLoad);\n                script.removeEventListener('error', onError);\n                this._dom.cleanup(script);\n            };\n        });\n    }\n    /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     * @param {?=} data\n     * @return {?}\n     */\n    finished(data) {\n        // Don't leak connections\n        this._finished = true;\n        this._dom.removeConnection(this._id);\n        if (this.readyState === ReadyState.Cancelled)\n            return;\n        this._responseData = data;\n    }\n}\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass JSONPBackend extends ConnectionBackend {\n    /**\n     * \\@internal\n     * @param {?} _browserJSONP\n     * @param {?} _baseResponseOptions\n     */\n    constructor(_browserJSONP, _baseResponseOptions) {\n        super();\n        this._browserJSONP = _browserJSONP;\n        this._baseResponseOptions = _baseResponseOptions;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    createConnection(request) {\n        return new JSONPConnection(request, this._browserJSONP, this._baseResponseOptions);\n    }\n}\nJSONPBackend.ɵfac = function JSONPBackend_Factory(t) { return new (t || JSONPBackend)(ɵngcc0.ɵɵinject(BrowserJsonp), ɵngcc0.ɵɵinject(ResponseOptions)); };\nJSONPBackend.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: JSONPBackend, factory: JSONPBackend.ɵfac });\n/** @nocollapse */\nJSONPBackend.ctorParameters = () => [\n    { type: BrowserJsonp },\n    { type: ResponseOptions }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JSONPBackend, [{\n        type: Injectable\n    }], function () { return [{ type: BrowserJsonp }, { type: ResponseOptions }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass XHRConnection {\n    /**\n     * @param {?} req\n     * @param {?} browserXHR\n     * @param {?=} baseResponseOptions\n     */\n    constructor(req, browserXHR, baseResponseOptions) {\n        this.request = req;\n        this.response = new Observable((responseObserver) => {\n            /** @type {?} */\n            const _xhr = browserXHR.build();\n            _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n            if (req.withCredentials != null) {\n                _xhr.withCredentials = req.withCredentials;\n            }\n            // load event handler\n            /** @type {?} */\n            const onLoad = () => {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                /** @type {?} */\n                let status = _xhr.status === 1223 ? 204 : _xhr.status;\n                /** @type {?} */\n                let body = null;\n                // HTTP 204 means no content\n                if (status !== 204) {\n                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n                    // response/responseType properties were introduced in ResourceLoader Level2 spec\n                    // (supported by IE10)\n                    body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n                    // Implicitly strip a potential XSSI prefix.\n                    if (typeof body === 'string') {\n                        body = body.replace(XSSI_PREFIX, '');\n                    }\n                }\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status === 0) {\n                    status = body ? 200 : 0;\n                }\n                /** @type {?} */\n                const headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n                // IE 9 does not provide the way to get URL of response\n                /** @type {?} */\n                const url = getResponseURL(_xhr) || req.url;\n                /** @type {?} */\n                const statusText = _xhr.statusText || 'OK';\n                /** @type {?} */\n                let responseOptions = new ResponseOptions({ body, status, headers, statusText, url });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                /** @type {?} */\n                const response = new Response(responseOptions);\n                response.ok = isSuccess(status);\n                if (response.ok) {\n                    responseObserver.next(response);\n                    // TODO(gdi2290): defer complete if array buffer until done\n                    responseObserver.complete();\n                    return;\n                }\n                responseObserver.error(response);\n            };\n            // error event handler\n            /** @type {?} */\n            const onError = (err) => {\n                /** @type {?} */\n                let responseOptions = new ResponseOptions({\n                    body: err,\n                    type: ResponseType.Error,\n                    status: _xhr.status,\n                    statusText: _xhr.statusText,\n                });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            this.setDetectedContentType(req, _xhr);\n            if (req.headers == null) {\n                req.headers = new Headers();\n            }\n            if (!req.headers.has('Accept')) {\n                req.headers.append('Accept', 'application/json, text/plain, */*');\n            }\n            req.headers.forEach((values, name) => _xhr.setRequestHeader((/** @type {?} */ (name)), values.join(',')));\n            // Select the correct buffer type to store the response\n            if (req.responseType != null && _xhr.responseType != null) {\n                switch (req.responseType) {\n                    case ResponseContentType.ArrayBuffer:\n                        _xhr.responseType = 'arraybuffer';\n                        break;\n                    case ResponseContentType.Json:\n                        _xhr.responseType = 'json';\n                        break;\n                    case ResponseContentType.Text:\n                        _xhr.responseType = 'text';\n                        break;\n                    case ResponseContentType.Blob:\n                        _xhr.responseType = 'blob';\n                        break;\n                    default:\n                        throw new Error('The selected responseType is not supported');\n                }\n            }\n            _xhr.addEventListener('load', onLoad);\n            _xhr.addEventListener('error', onError);\n            _xhr.send(this.request.getBody());\n            return () => {\n                _xhr.removeEventListener('load', onLoad);\n                _xhr.removeEventListener('error', onError);\n                _xhr.abort();\n            };\n        });\n    }\n    /**\n     * @param {?} req\n     * @param {?} _xhr\n     * @return {?}\n     */\n    setDetectedContentType(req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n        // Skip if a custom Content-Type header is provided\n        if (req.headers != null && req.headers.get('Content-Type') != null) {\n            return;\n        }\n        // Set the detected content type\n        switch (req.contentType) {\n            case ContentType.NONE:\n                break;\n            case ContentType.JSON:\n                _xhr.setRequestHeader('content-type', 'application/json');\n                break;\n            case ContentType.FORM:\n                _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n                break;\n            case ContentType.TEXT:\n                _xhr.setRequestHeader('content-type', 'text/plain');\n                break;\n            case ContentType.BLOB:\n                /** @type {?} */\n                const blob = req.blob();\n                if (blob.type) {\n                    _xhr.setRequestHeader('content-type', blob.type);\n                }\n                break;\n        }\n    }\n}\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass CookieXSRFStrategy {\n    /**\n     * @param {?=} _cookieName\n     * @param {?=} _headerName\n     */\n    constructor(_cookieName = 'XSRF-TOKEN', _headerName = 'X-XSRF-TOKEN') {\n        this._cookieName = _cookieName;\n        this._headerName = _headerName;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    configureRequest(req) {\n        /** @type {?} */\n        const xsrfToken = ɵgetDOM().getCookie(this._cookieName);\n        if (xsrfToken) {\n            req.headers.set(this._headerName, xsrfToken);\n        }\n    }\n}\n/**\n * Creates {\\@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass XHRBackend {\n    /**\n     * @param {?} _browserXHR\n     * @param {?} _baseResponseOptions\n     * @param {?} _xsrfStrategy\n     */\n    constructor(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n        this._browserXHR = _browserXHR;\n        this._baseResponseOptions = _baseResponseOptions;\n        this._xsrfStrategy = _xsrfStrategy;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    createConnection(request) {\n        this._xsrfStrategy.configureRequest(request);\n        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n    }\n}\nXHRBackend.ɵfac = function XHRBackend_Factory(t) { return new (t || XHRBackend)(ɵngcc0.ɵɵinject(BrowserXhr), ɵngcc0.ɵɵinject(ResponseOptions), ɵngcc0.ɵɵinject(XSRFStrategy)); };\nXHRBackend.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: XHRBackend, factory: XHRBackend.ɵfac });\n/** @nocollapse */\nXHRBackend.ctorParameters = () => [\n    { type: BrowserXhr },\n    { type: ResponseOptions },\n    { type: XSRFStrategy }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(XHRBackend, [{\n        type: Injectable\n    }], function () { return [{ type: BrowserXhr }, { type: ResponseOptions }, { type: XSRFStrategy }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass RequestOptions {\n    /**\n     * @deprecated from 4.0.0. Use params instead.\n     * @return {?}\n     */\n    get search() { return this.params; }\n    /**\n     * @deprecated from 4.0.0. Use params instead.\n     * @param {?} params\n     * @return {?}\n     */\n    set search(params) { this.params = params; }\n    // TODO(Dzmitry): remove search when this.search is removed\n    /**\n     * @param {?=} opts\n     */\n    constructor(opts = {}) {\n        const { method, headers, body, url, search, params, withCredentials, responseType } = opts;\n        this.method = method != null ? normalizeMethodName(method) : null;\n        this.headers = headers != null ? headers : null;\n        this.body = body != null ? body : null;\n        this.url = url != null ? url : null;\n        this.params = this._mergeSearchParams(params || search);\n        this.withCredentials = withCredentials != null ? withCredentials : null;\n        this.responseType = responseType != null ? responseType : null;\n    }\n    /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    merge(options) {\n        return new RequestOptions({\n            method: options && options.method != null ? options.method : this.method,\n            headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n            body: options && options.body != null ? options.body : this.body,\n            url: options && options.url != null ? options.url : this.url,\n            params: options && this._mergeSearchParams(options.params || options.search),\n            withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                this.withCredentials,\n            responseType: options && options.responseType != null ? options.responseType :\n                this.responseType\n        });\n    }\n    /**\n     * @private\n     * @param {?=} params\n     * @return {?}\n     */\n    _mergeSearchParams(params) {\n        if (!params)\n            return this.params;\n        if (params instanceof URLSearchParams) {\n            return params.clone();\n        }\n        if (typeof params === 'string') {\n            return new URLSearchParams(params);\n        }\n        return this._parseParams(params);\n    }\n    /**\n     * @private\n     * @param {?=} objParams\n     * @return {?}\n     */\n    _parseParams(objParams = {}) {\n        /** @type {?} */\n        const params = new URLSearchParams();\n        Object.keys(objParams).forEach((key) => {\n            /** @type {?} */\n            const value = objParams[key];\n            if (Array.isArray(value)) {\n                value.forEach((item) => this._appendParam(key, item, params));\n            }\n            else {\n                this._appendParam(key, value, params);\n            }\n        });\n        return params;\n    }\n    /**\n     * @private\n     * @param {?} key\n     * @param {?} value\n     * @param {?} params\n     * @return {?}\n     */\n    _appendParam(key, value, params) {\n        if (typeof value !== 'string') {\n            value = JSON.stringify(value);\n        }\n        params.append(key, value);\n    }\n}\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass BaseRequestOptions extends RequestOptions {\n    constructor() { super({ method: RequestMethod.Get, headers: new Headers() }); }\n}\nBaseRequestOptions.ɵfac = function BaseRequestOptions_Factory(t) { return new (t || BaseRequestOptions)(); };\nBaseRequestOptions.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BaseRequestOptions, factory: BaseRequestOptions.ɵfac });\n/** @nocollapse */\nBaseRequestOptions.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseRequestOptions, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(jeffbcross): properly implement body accessors\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n *\n * \\@Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass Request extends Body {\n    /**\n     * @param {?} requestOptions\n     */\n    constructor(requestOptions) {\n        super();\n        // TODO: assert that url is present\n        /** @type {?} */\n        const url = requestOptions.url;\n        this.url = (/** @type {?} */ (requestOptions.url));\n        /** @type {?} */\n        const paramsArg = requestOptions.params || requestOptions.search;\n        if (paramsArg) {\n            /** @type {?} */\n            let params;\n            if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n                params = urlEncodeParams(paramsArg).toString();\n            }\n            else {\n                params = paramsArg.toString();\n            }\n            if (params.length > 0) {\n                /** @type {?} */\n                let prefix = '?';\n                if (this.url.indexOf('?') != -1) {\n                    prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';\n                }\n                // TODO: just delete search-query-looking string in url?\n                this.url = url + prefix + params;\n            }\n        }\n        this._body = requestOptions.body;\n        this.method = normalizeMethodName((/** @type {?} */ (requestOptions.method)));\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        this.headers = new Headers(requestOptions.headers);\n        this.contentType = this.detectContentType();\n        this.withCredentials = (/** @type {?} */ (requestOptions.withCredentials));\n        this.responseType = (/** @type {?} */ (requestOptions.responseType));\n    }\n    /**\n     * Returns the content type enum based on header options.\n     * @return {?}\n     */\n    detectContentType() {\n        switch (this.headers.get('content-type')) {\n            case 'application/json':\n                return ContentType.JSON;\n            case 'application/x-www-form-urlencoded':\n                return ContentType.FORM;\n            case 'multipart/form-data':\n                return ContentType.FORM_DATA;\n            case 'text/plain':\n            case 'text/html':\n                return ContentType.TEXT;\n            case 'application/octet-stream':\n                return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n            default:\n                return this.detectContentTypeFromBody();\n        }\n    }\n    /**\n     * Returns the content type of request's body based on its type.\n     * @return {?}\n     */\n    detectContentTypeFromBody() {\n        if (this._body == null) {\n            return ContentType.NONE;\n        }\n        else if (this._body instanceof URLSearchParams) {\n            return ContentType.FORM;\n        }\n        else if (this._body instanceof FormData) {\n            return ContentType.FORM_DATA;\n        }\n        else if (this._body instanceof Blob$1) {\n            return ContentType.BLOB;\n        }\n        else if (this._body instanceof ArrayBuffer$1) {\n            return ContentType.ARRAY_BUFFER;\n        }\n        else if (this._body && typeof this._body === 'object') {\n            return ContentType.JSON;\n        }\n        else {\n            return ContentType.TEXT;\n        }\n    }\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     * @return {?}\n     */\n    getBody() {\n        switch (this.contentType) {\n            case ContentType.JSON:\n                return this.text();\n            case ContentType.FORM:\n                return this.text();\n            case ContentType.FORM_DATA:\n                return this._body;\n            case ContentType.TEXT:\n                return this.text();\n            case ContentType.BLOB:\n                return this.blob();\n            case ContentType.ARRAY_BUFFER:\n                return this.arrayBuffer();\n            default:\n                return null;\n        }\n    }\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction urlEncodeParams(params) {\n    /** @type {?} */\n    const searchParams = new URLSearchParams();\n    Object.keys(params).forEach(key => {\n        /** @type {?} */\n        const value = params[key];\n        if (value && Array.isArray(value)) {\n            value.forEach(element => searchParams.append(key, element.toString()));\n        }\n        else {\n            searchParams.append(key, value.toString());\n        }\n    });\n    return searchParams;\n}\n/** @type {?} */\nconst noop = function () { };\n/** @type {?} */\nconst w = typeof window == 'object' ? window : noop;\n/** @type {?} */\nconst FormData = ((/** @type {?} */ (w)))['FormData'] || noop;\n/** @type {?} */\nconst Blob$1 = ((/** @type {?} */ (w)))['Blob'] || noop;\n/** @type {?} */\nconst ArrayBuffer$1 = ((/** @type {?} */ (w)))['ArrayBuffer'] || noop;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\nfunction httpRequest(backend, request) {\n    return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n    /** @type {?} */\n    const newOptions = defaultOpts;\n    if (providedOpts) {\n        // Hack so Dart can used named parameters\n        return (/** @type {?} */ (newOptions.merge(new RequestOptions({\n            method: providedOpts.method || method,\n            url: providedOpts.url || url,\n            search: providedOpts.search,\n            params: providedOpts.params,\n            headers: providedOpts.headers,\n            body: providedOpts.body,\n            withCredentials: providedOpts.withCredentials,\n            responseType: providedOpts.responseType\n        }))));\n    }\n    return (/** @type {?} */ (newOptions.merge(new RequestOptions({ method, url }))));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import {map} from 'rxjs/operators';\n *\n * \\@Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .pipe(map(res => res.json()))\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass Http {\n    /**\n     * @param {?} _backend\n     * @param {?} _defaultOptions\n     */\n    constructor(_backend, _defaultOptions) {\n        this._backend = _backend;\n        this._defaultOptions = _defaultOptions;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    request(url, options) {\n        /** @type {?} */\n        let responseObservable;\n        if (typeof url === 'string') {\n            responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, (/** @type {?} */ (url)))));\n        }\n        else if (url instanceof Request) {\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    }\n    /**\n     * Performs a request with `get` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    get(url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n    }\n    /**\n     * Performs a request with `post` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    post(url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));\n    }\n    /**\n     * Performs a request with `put` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    put(url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));\n    }\n    /**\n     * Performs a request with `delete` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    delete(url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n    }\n    /**\n     * Performs a request with `patch` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    patch(url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));\n    }\n    /**\n     * Performs a request with `head` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    head(url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n    }\n    /**\n     * Performs a request with `options` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    options(url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n    }\n}\nHttp.ɵfac = function Http_Factory(t) { return new (t || Http)(ɵngcc0.ɵɵinject(ConnectionBackend), ɵngcc0.ɵɵinject(RequestOptions)); };\nHttp.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Http, factory: Http.ɵfac });\n/** @nocollapse */\nHttp.ctorParameters = () => [\n    { type: ConnectionBackend },\n    { type: RequestOptions }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Http, [{\n        type: Injectable\n    }], function () { return [{ type: ConnectionBackend }, { type: RequestOptions }]; }, null); })();\n/**\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass Jsonp extends Http {\n    /**\n     * @param {?} backend\n     * @param {?} defaultOptions\n     */\n    constructor(backend, defaultOptions) {\n        super(backend, defaultOptions);\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     *\n     * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    request(url, options) {\n        /** @type {?} */\n        let responseObservable;\n        if (typeof url === 'string') {\n            url =\n                new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, (/** @type {?} */ (url))));\n        }\n        if (url instanceof Request) {\n            if (url.method !== RequestMethod.Get) {\n                throw new Error('JSONP requests must use GET request method.');\n            }\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    }\n}\nJsonp.ɵfac = function Jsonp_Factory(t) { return new (t || Jsonp)(ɵngcc0.ɵɵinject(ConnectionBackend), ɵngcc0.ɵɵinject(RequestOptions)); };\nJsonp.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Jsonp, factory: Jsonp.ɵfac });\n/** @nocollapse */\nJsonp.ctorParameters = () => [\n    { type: ConnectionBackend },\n    { type: RequestOptions }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Jsonp, [{\n        type: Injectable\n    }], function () { return [{ type: ConnectionBackend }, { type: RequestOptions }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction _createDefaultCookieXSRFStrategy() {\n    return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction httpFactory(xhrBackend, requestOptions) {\n    return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n    return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass HttpModule {\n}\nHttpModule.ɵfac = function HttpModule_Factory(t) { return new (t || HttpModule)(); };\nHttpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HttpModule });\nHttpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [\n        // TODO(pascal): use factory type annotations once supported in DI\n        // issue: https://github.com/angular/angular/issues/3183\n        { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n        BrowserXhr,\n        { provide: RequestOptions, useClass: BaseRequestOptions },\n        { provide: ResponseOptions, useClass: BaseResponseOptions },\n        XHRBackend,\n        { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n    ] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    // TODO(pascal): use factory type annotations once supported in DI\n                    // issue: https://github.com/angular/angular/issues/3183\n                    { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n                    BrowserXhr,\n                    { provide: RequestOptions, useClass: BaseRequestOptions },\n                    { provide: ResponseOptions, useClass: BaseResponseOptions },\n                    XHRBackend,\n                    { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n                ]\n            }]\n    }], null, null); })();\n/**\n * The module that includes jsonp's providers\n *\n * @deprecated see https://angular.io/api/common/http/HttpClient#jsonp\n * \\@publicApi\n */\nclass JsonpModule {\n}\nJsonpModule.ɵfac = function JsonpModule_Factory(t) { return new (t || JsonpModule)(); };\nJsonpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: JsonpModule });\nJsonpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [\n        // TODO(pascal): use factory type annotations once supported in DI\n        // issue: https://github.com/angular/angular/issues/3183\n        { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n        BrowserJsonp,\n        { provide: RequestOptions, useClass: BaseRequestOptions },\n        { provide: ResponseOptions, useClass: BaseResponseOptions },\n        JSONPBackend,\n    ] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    // TODO(pascal): use factory type annotations once supported in DI\n                    // issue: https://github.com/angular/angular/issues/3183\n                    { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n                    BrowserJsonp,\n                    { provide: RequestOptions, useClass: BaseRequestOptions },\n                    { provide: ResponseOptions, useClass: BaseResponseOptions },\n                    JSONPBackend,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @type {?}\n */\nconst VERSION = new Version('7.2.16');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BrowserJsonp as ɵangular_packages_http_http_e, Body as ɵangular_packages_http_http_f, _createDefaultCookieXSRFStrategy as ɵangular_packages_http_http_a, httpFactory as ɵangular_packages_http_http_b, jsonpFactory as ɵangular_packages_http_http_c, BrowserXhr, JSONPBackend, JSONPConnection, CookieXSRFStrategy, XHRBackend, XHRConnection, BaseRequestOptions, RequestOptions, BaseResponseOptions, ResponseOptions, ReadyState, RequestMethod, ResponseContentType, ResponseType, Headers, Http, Jsonp, HttpModule, JsonpModule, Connection, ConnectionBackend, XSRFStrategy, Request, Response, QueryEncoder, URLSearchParams, VERSION };\n\n//# sourceMappingURL=http.js.map"]},"metadata":{},"sourceType":"module"}