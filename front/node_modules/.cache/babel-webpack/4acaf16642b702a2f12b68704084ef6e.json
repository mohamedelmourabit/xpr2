{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar set_in_1 = require(\"../utils/set-in\");\n\nvar get_in_1 = require(\"../utils/get-in\");\n\nvar reducerMap = {};\n\nvar composeReducers = function composeReducers() {\n  var reducers = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    reducers[_i] = arguments[_i];\n  }\n\n  return function (state, action) {\n    return reducers.reduce(function (subState, reducer) {\n      return reducer(subState, action);\n    }, state);\n  };\n};\n\nvar ɵ0 = composeReducers;\nexports.ɵ0 = ɵ0;\n/**\n * @param rootReducer Call this on your root reducer to enable SubStore\n * functionality for pre-configured stores (e.g. using NgRedux.provideStore()).\n * NgRedux.configureStore\n * does it for you under the hood.\n */\n\nfunction enableFractalReducers(rootReducer) {\n  reducerMap = {};\n  return composeReducers(rootFractalReducer, rootReducer);\n}\n\nexports.enableFractalReducers = enableFractalReducers;\n/** @hidden */\n\nfunction registerFractalReducer(basePath, localReducer) {\n  var existingFractalReducer = reducerMap[JSON.stringify(basePath)];\n\n  if (existingFractalReducer && existingFractalReducer !== localReducer) {\n    throw new Error(\"attempt to overwrite fractal reducer for basePath \" + basePath);\n  }\n\n  reducerMap[JSON.stringify(basePath)] = localReducer;\n}\n\nexports.registerFractalReducer = registerFractalReducer;\n/** @hidden */\n\nfunction replaceLocalReducer(basePath, nextLocalReducer) {\n  reducerMap[JSON.stringify(basePath)] = nextLocalReducer;\n}\n\nexports.replaceLocalReducer = replaceLocalReducer;\n\nfunction rootFractalReducer(state, action) {\n  if (state === void 0) {\n    state = {};\n  }\n\n  var fractalKey = action['@angular-redux::fractalkey'];\n  var fractalPath = fractalKey ? JSON.parse(fractalKey) : [];\n  var localReducer = reducerMap[fractalKey || ''];\n  return fractalKey && localReducer ? set_in_1.setIn(state, fractalPath, localReducer(get_in_1.getIn(state, fractalPath), action)) : state;\n} //# sourceMappingURL=fractal-reducer-map.js.map","map":{"version":3,"sources":["/Users/mohammedelmourabit/xrp/xpr/node_modules/@angular-redux/store/__ivy_ngcc__/lib/src/components/fractal-reducer-map.js"],"names":["Object","defineProperty","exports","value","set_in_1","require","get_in_1","reducerMap","composeReducers","reducers","_i","arguments","length","state","action","reduce","subState","reducer","ɵ0","enableFractalReducers","rootReducer","rootFractalReducer","registerFractalReducer","basePath","localReducer","existingFractalReducer","JSON","stringify","Error","replaceLocalReducer","nextLocalReducer","fractalKey","fractalPath","parse","setIn","getIn"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,iBAAD,CAAtB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,iBAAD,CAAtB;;AACA,IAAIE,UAAU,GAAG,EAAjB;;AACA,IAAIC,eAAe,GAAG,SAAlBA,eAAkB,GAAY;AAC9B,MAAIC,QAAQ,GAAG,EAAf;;AACA,OAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAACC,MAAhC,EAAwCF,EAAE,EAA1C,EAA8C;AAC1CD,IAAAA,QAAQ,CAACC,EAAD,CAAR,GAAeC,SAAS,CAACD,EAAD,CAAxB;AACH;;AACD,SAAO,UAAUG,KAAV,EAAiBC,MAAjB,EAAyB;AAC5B,WAAOL,QAAQ,CAACM,MAAT,CAAgB,UAAUC,QAAV,EAAoBC,OAApB,EAA6B;AAAE,aAAOA,OAAO,CAACD,QAAD,EAAWF,MAAX,CAAd;AAAmC,KAAlF,EAAoFD,KAApF,CAAP;AACH,GAFD;AAGH,CARD;;AASA,IAAIK,EAAE,GAAGV,eAAT;AACAN,OAAO,CAACgB,EAAR,GAAaA,EAAb;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,qBAAT,CAA+BC,WAA/B,EAA4C;AACxCb,EAAAA,UAAU,GAAG,EAAb;AACA,SAAOC,eAAe,CAACa,kBAAD,EAAqBD,WAArB,CAAtB;AACH;;AACDlB,OAAO,CAACiB,qBAAR,GAAgCA,qBAAhC;AACA;;AACA,SAASG,sBAAT,CAAgCC,QAAhC,EAA0CC,YAA1C,EAAwD;AACpD,MAAIC,sBAAsB,GAAGlB,UAAU,CAACmB,IAAI,CAACC,SAAL,CAAeJ,QAAf,CAAD,CAAvC;;AACA,MAAIE,sBAAsB,IAAIA,sBAAsB,KAAKD,YAAzD,EAAuE;AACnE,UAAM,IAAII,KAAJ,CAAU,uDAAuDL,QAAjE,CAAN;AACH;;AACDhB,EAAAA,UAAU,CAACmB,IAAI,CAACC,SAAL,CAAeJ,QAAf,CAAD,CAAV,GAAuCC,YAAvC;AACH;;AACDtB,OAAO,CAACoB,sBAAR,GAAiCA,sBAAjC;AACA;;AACA,SAASO,mBAAT,CAA6BN,QAA7B,EAAuCO,gBAAvC,EAAyD;AACrDvB,EAAAA,UAAU,CAACmB,IAAI,CAACC,SAAL,CAAeJ,QAAf,CAAD,CAAV,GAAuCO,gBAAvC;AACH;;AACD5B,OAAO,CAAC2B,mBAAR,GAA8BA,mBAA9B;;AACA,SAASR,kBAAT,CAA4BR,KAA5B,EAAmCC,MAAnC,EAA2C;AACvC,MAAID,KAAK,KAAK,KAAK,CAAnB,EAAsB;AAAEA,IAAAA,KAAK,GAAG,EAAR;AAAa;;AACrC,MAAIkB,UAAU,GAAGjB,MAAM,CAAC,4BAAD,CAAvB;AACA,MAAIkB,WAAW,GAAGD,UAAU,GAAGL,IAAI,CAACO,KAAL,CAAWF,UAAX,CAAH,GAA4B,EAAxD;AACA,MAAIP,YAAY,GAAGjB,UAAU,CAACwB,UAAU,IAAI,EAAf,CAA7B;AACA,SAAOA,UAAU,IAAIP,YAAd,GACDpB,QAAQ,CAAC8B,KAAT,CAAerB,KAAf,EAAsBmB,WAAtB,EAAmCR,YAAY,CAAClB,QAAQ,CAAC6B,KAAT,CAAetB,KAAf,EAAsBmB,WAAtB,CAAD,EAAqClB,MAArC,CAA/C,CADC,GAEDD,KAFN;AAGH,C,CACD","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar set_in_1 = require(\"../utils/set-in\");\nvar get_in_1 = require(\"../utils/get-in\");\nvar reducerMap = {};\nvar composeReducers = function () {\n    var reducers = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        reducers[_i] = arguments[_i];\n    }\n    return function (state, action) {\n        return reducers.reduce(function (subState, reducer) { return reducer(subState, action); }, state);\n    };\n};\nvar ɵ0 = composeReducers;\nexports.ɵ0 = ɵ0;\n/**\n * @param rootReducer Call this on your root reducer to enable SubStore\n * functionality for pre-configured stores (e.g. using NgRedux.provideStore()).\n * NgRedux.configureStore\n * does it for you under the hood.\n */\nfunction enableFractalReducers(rootReducer) {\n    reducerMap = {};\n    return composeReducers(rootFractalReducer, rootReducer);\n}\nexports.enableFractalReducers = enableFractalReducers;\n/** @hidden */\nfunction registerFractalReducer(basePath, localReducer) {\n    var existingFractalReducer = reducerMap[JSON.stringify(basePath)];\n    if (existingFractalReducer && existingFractalReducer !== localReducer) {\n        throw new Error(\"attempt to overwrite fractal reducer for basePath \" + basePath);\n    }\n    reducerMap[JSON.stringify(basePath)] = localReducer;\n}\nexports.registerFractalReducer = registerFractalReducer;\n/** @hidden */\nfunction replaceLocalReducer(basePath, nextLocalReducer) {\n    reducerMap[JSON.stringify(basePath)] = nextLocalReducer;\n}\nexports.replaceLocalReducer = replaceLocalReducer;\nfunction rootFractalReducer(state, action) {\n    if (state === void 0) { state = {}; }\n    var fractalKey = action['@angular-redux::fractalkey'];\n    var fractalPath = fractalKey ? JSON.parse(fractalKey) : [];\n    var localReducer = reducerMap[fractalKey || ''];\n    return fractalKey && localReducer\n        ? set_in_1.setIn(state, fractalPath, localReducer(get_in_1.getIn(state, fractalPath), action))\n        : state;\n}\n//# sourceMappingURL=fractal-reducer-map.js.map"]},"metadata":{},"sourceType":"script"}