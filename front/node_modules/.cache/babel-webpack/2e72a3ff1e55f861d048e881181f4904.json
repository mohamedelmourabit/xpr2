{"ast":null,"code":"import _get from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _toConsumableArray from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, EventEmitter, ChangeDetectorRef, NgZone, ElementRef, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, ErrorStateMatcher, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { MatFormField, MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/material/form-field';\nimport * as ɵngcc7 from '@angular/cdk/overlay';\nimport * as ɵngcc8 from '@angular/common';\nvar _c0 = [\"trigger\"];\nvar _c1 = [\"panel\"];\n\nfunction MatSelect_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder);\n  }\n}\n\nfunction MatSelect_span_5_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 12);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue);\n  }\n}\n\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n  }\n}\n\nfunction MatSelect_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n  }\n}\n\nfunction MatSelect_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r9 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 13);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 14, 15);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ctx_r8._panelDoneAnimatingStream.next($event.toState);\n    })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10._handleKeydown($event);\n    });\n    ɵngcc0.ɵɵprojection(3, 1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\")(\"aria-multiselectable\", ctx_r4.multiple)(\"aria-label\", ctx_r4.ariaLabel || null)(\"aria-labelledby\", ctx_r4._getPanelAriaLabelledby());\n  }\n}\n\nvar _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nvar _c3 = [\"mat-select-trigger\", \"*\"];\nvar matSelectAnimations = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [transition('* => void', query('@transformPanel', [animateChild()], {\n    optional: true\n  }))]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [state('void', style({\n    transform: 'scaleY(0.8)',\n    minWidth: '100%',\n    opacity: 0\n  })), state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)',\n    transform: 'scaleY(1)'\n  })), state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)',\n    transform: 'scaleY(1)'\n  })), transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')), transition('* => void', animate('100ms 25ms linear', style({\n    opacity: 0\n  })))])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\n\nfunction getMatSelectDynamicMultipleError() {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\n\n\nfunction getMatSelectNonArrayValueError() {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\n\n\nfunction getMatSelectNonFunctionValueError() {\n  return Error('`compareWith` must be a function.');\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/**\n * The max height of the select's overlay panel.\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\n\nvar SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The panel's padding on the x-axis.\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\n\nvar SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\n\nvar SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * The height of the select items in `em` units.\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\n\nvar SELECT_ITEM_HEIGHT_EM = 3; // TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n *\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\n\nvar SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n *\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\n\nvar SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\n\nvar MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition();\n  };\n}\n/** Injection token that can be used to provide the default options the select module. */\n\n\nvar MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\n\nvar MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/** Change event object that is emitted when the select value has changed. */\n\nvar MatSelectChange = function MatSelectChange(\n/** Reference to the select that emitted the change event. */\nsource,\n/** Current value of the select that emitted the event. */\nvalue) {\n  _classCallCheck(this, MatSelectChange);\n\n  this.source = source;\n  this.value = value;\n}; // Boilerplate for applying mixins to MatSelect.\n\n/** @docs-private */\n\n\nvar MatSelectBase = function MatSelectBase(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n  _classCallCheck(this, MatSelectBase);\n\n  this._elementRef = _elementRef;\n  this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n  this._parentForm = _parentForm;\n  this._parentFormGroup = _parentFormGroup;\n  this.ngControl = ngControl;\n};\n\nvar _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nvar MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n\nvar MatSelectTrigger = function MatSelectTrigger() {\n  _classCallCheck(this, MatSelectTrigger);\n};\n\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) {\n  return new (t || MatSelectTrigger)();\n};\n\nMatSelectTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatSelectTrigger,\n  selectors: [[\"mat-select-trigger\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_SELECT_TRIGGER,\n    useExisting: MatSelectTrigger\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-select-trigger',\n      providers: [{\n        provide: MAT_SELECT_TRIGGER,\n        useExisting: MatSelectTrigger\n      }]\n    }]\n  }], null, null);\n})();\n/** Base class with all of the `MatSelect` functionality. */\n\n\nvar _MatSelectBase = /*#__PURE__*/function (_MatSelectMixinBase2) {\n  _inherits(_MatSelectBase, _MatSelectMixinBase2);\n\n  var _super = _createSuper(_MatSelectBase);\n\n  function _MatSelectBase(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n    var _this;\n\n    _classCallCheck(this, _MatSelectBase);\n\n    var _a, _b, _c;\n\n    _this = _super.call(this, elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    _this._viewportRuler = _viewportRuler;\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this._ngZone = _ngZone;\n    _this._dir = _dir;\n    _this._parentFormField = _parentFormField;\n    _this.ngControl = ngControl;\n    _this._liveAnnouncer = _liveAnnouncer;\n    _this._defaultOptions = _defaultOptions;\n    /** Whether or not the overlay panel is open. */\n\n    _this._panelOpen = false;\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n\n    _this._compareWith = function (o1, o2) {\n      return o1 === o2;\n    };\n    /** Unique id for this input. */\n\n\n    _this._uid = \"mat-select-\".concat(nextUniqueId++);\n    /** Current `ariar-labelledby` value for the select trigger. */\n\n    _this._triggerAriaLabelledBy = null;\n    /** Emits whenever the component is destroyed. */\n\n    _this._destroy = new Subject();\n    /** `View -> model callback called when value changes` */\n\n    _this._onChange = function () {};\n    /** `View -> model callback called when select has been touched` */\n\n\n    _this._onTouched = function () {};\n    /** ID for the DOM node containing the select's value. */\n\n\n    _this._valueId = \"mat-select-value-\".concat(nextUniqueId++);\n    /** Emits when the panel element is finished transforming in. */\n\n    _this._panelDoneAnimatingStream = new Subject();\n    _this._overlayPanelClass = ((_a = _this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\n    _this._focused = false;\n    /** A name for this control that can be used by `mat-form-field`. */\n\n    _this.controlType = 'mat-select';\n    _this._required = false;\n    _this._multiple = false;\n    _this._disableOptionCentering = (_c = (_b = _this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\n    /** Aria label of the select. */\n\n    _this.ariaLabel = '';\n    /** Combined stream of all of the child options' change events. */\n\n    _this.optionSelectionChanges = defer(function () {\n      var options = _this.options;\n\n      if (options) {\n        return options.changes.pipe(startWith(options), switchMap(function () {\n          return merge.apply(void 0, _toConsumableArray(options.map(function (option) {\n            return option.onSelectionChange;\n          })));\n        }));\n      }\n\n      return _this._ngZone.onStable.pipe(take(1), switchMap(function () {\n        return _this.optionSelectionChanges;\n      }));\n    });\n    /** Event emitted when the select panel has been toggled. */\n\n    _this.openedChange = new EventEmitter();\n    /** Event emitted when the select has been opened. */\n\n    _this._openedStream = _this.openedChange.pipe(filter(function (o) {\n      return o;\n    }), map(function () {}));\n    /** Event emitted when the select has been closed. */\n\n    _this._closedStream = _this.openedChange.pipe(filter(function (o) {\n      return !o;\n    }), map(function () {}));\n    /** Event emitted when the selected value has been changed by the user. */\n\n    _this.selectionChange = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n\n    _this.valueChange = new EventEmitter();\n\n    if (_this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      _this.ngControl.valueAccessor = _assertThisInitialized(_this);\n    } // Note that we only want to set this when the defaults pass it in, otherwise it should\n    // stay as `undefined` so that it falls back to the default in the key manager.\n\n\n    if ((_defaultOptions === null || _defaultOptions === void 0 ? void 0 : _defaultOptions.typeaheadDebounceInterval) != null) {\n      _this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n    }\n\n    _this._scrollStrategyFactory = scrollStrategyFactory;\n    _this._scrollStrategy = _this._scrollStrategyFactory();\n    _this.tabIndex = parseInt(tabIndex) || 0; // Force setter to be called in case id was not specified.\n\n    _this.id = _this.id;\n    return _this;\n  }\n  /** Whether the select is focused. */\n\n\n  _createClass(_MatSelectBase, [{\n    key: \"focused\",\n    get: function get() {\n      return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n\n  }, {\n    key: \"placeholder\",\n    get: function get() {\n      return this._placeholder;\n    },\n    set: function set(value) {\n      this._placeholder = value;\n      this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n\n  }, {\n    key: \"required\",\n    get: function get() {\n      return this._required;\n    },\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n      this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n\n  }, {\n    key: \"multiple\",\n    get: function get() {\n      return this._multiple;\n    },\n    set: function set(value) {\n      if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatSelectDynamicMultipleError();\n      }\n\n      this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n\n  }, {\n    key: \"disableOptionCentering\",\n    get: function get() {\n      return this._disableOptionCentering;\n    },\n    set: function set(value) {\n      this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n\n  }, {\n    key: \"compareWith\",\n    get: function get() {\n      return this._compareWith;\n    },\n    set: function set(fn) {\n      if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatSelectNonFunctionValueError();\n      }\n\n      this._compareWith = fn;\n\n      if (this._selectionModel) {\n        // A different comparator means the selection could change.\n        this._initializeSelection();\n      }\n    }\n    /** Value of the select control. */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    },\n    set: function set(newValue) {\n      // Always re-assign an array, because it might have been mutated.\n      if (newValue !== this._value || this._multiple && Array.isArray(newValue)) {\n        if (this.options) {\n          this._setSelectionByValue(newValue);\n        }\n\n        this._value = newValue;\n      }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n\n  }, {\n    key: \"typeaheadDebounceInterval\",\n    get: function get() {\n      return this._typeaheadDebounceInterval;\n    },\n    set: function set(value) {\n      this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._id;\n    },\n    set: function set(value) {\n      this._id = value || this._uid;\n      this.stateChanges.next();\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this2 = this;\n\n      this._selectionModel = new SelectionModel(this.multiple);\n      this.stateChanges.next(); // We need `distinctUntilChanged` here, because some browsers will\n      // fire the animation end event twice for the same animation. See:\n      // https://github.com/angular/angular/issues/24084\n\n      this._panelDoneAnimatingStream.pipe(distinctUntilChanged(), takeUntil(this._destroy)).subscribe(function () {\n        return _this2._panelDoneAnimating(_this2.panelOpen);\n      });\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this3 = this;\n\n      this._initKeyManager();\n\n      this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(function (event) {\n        event.added.forEach(function (option) {\n          return option.select();\n        });\n        event.removed.forEach(function (option) {\n          return option.deselect();\n        });\n      });\n\n      this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(function () {\n        _this3._resetOptions();\n\n        _this3._initializeSelection();\n      });\n    }\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      var newAriaLabelledby = this._getTriggerAriaLabelledby(); // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n      // is computed as a result of a content query which can cause this binding to trigger a\n      // \"changed after checked\" error.\n\n\n      if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n        var element = this._elementRef.nativeElement;\n        this._triggerAriaLabelledBy = newAriaLabelledby;\n\n        if (newAriaLabelledby) {\n          element.setAttribute('aria-labelledby', newAriaLabelledby);\n        } else {\n          element.removeAttribute('aria-labelledby');\n        }\n      }\n\n      if (this.ngControl) {\n        this.updateErrorState();\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n      // the parent form field know to run change detection when the disabled state changes.\n      if (changes['disabled']) {\n        this.stateChanges.next();\n      }\n\n      if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n        this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroy.next();\n\n      this._destroy.complete();\n\n      this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      if (this._canOpen()) {\n        this._panelOpen = true;\n\n        this._keyManager.withHorizontalOrientation(null);\n\n        this._highlightCorrectOption();\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /** Closes the overlay panel and focuses the host element. */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this._panelOpen) {\n        this._panelOpen = false;\n\n        this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n        this._changeDetectorRef.markForCheck();\n\n        this._onTouched();\n      }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.value = value;\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n\n      this._changeDetectorRef.markForCheck();\n\n      this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n\n  }, {\n    key: \"panelOpen\",\n    get: function get() {\n      return this._panelOpen;\n    }\n    /** The currently selected option. */\n\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /** The value displayed in the trigger. */\n\n  }, {\n    key: \"triggerValue\",\n    get: function get() {\n      if (this.empty) {\n        return '';\n      }\n\n      if (this._multiple) {\n        var selectedOptions = this._selectionModel.selected.map(function (option) {\n          return option.viewValue;\n        });\n\n        if (this._isRtl()) {\n          selectedOptions.reverse();\n        } // TODO(crisbeto): delimiter should be configurable for proper localization.\n\n\n        return selectedOptions.join(', ');\n      }\n\n      return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n\n  }, {\n    key: \"_isRtl\",\n    value: function _isRtl() {\n      return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n\n  }, {\n    key: \"_handleKeydown\",\n    value: function _handleKeydown(event) {\n      if (!this.disabled) {\n        this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n      }\n    }\n    /** Handles keyboard events while the select is closed. */\n\n  }, {\n    key: \"_handleClosedKeydown\",\n    value: function _handleClosedKeydown(event) {\n      var keyCode = event.keyCode;\n      var isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n      var isOpenKey = keyCode === ENTER || keyCode === SPACE;\n      var manager = this._keyManager; // Open the select on ALT + arrow key to match the native <select>\n\n      if (!manager.isTyping() && isOpenKey && !hasModifierKey(event) || (this.multiple || event.altKey) && isArrowKey) {\n        event.preventDefault(); // prevents the page from scrolling down when pressing space\n\n        this.open();\n      } else if (!this.multiple) {\n        var previouslySelectedOption = this.selected;\n        manager.onKeydown(event);\n        var selectedOption = this.selected; // Since the value has changed, we need to announce it ourselves.\n\n        if (selectedOption && previouslySelectedOption !== selectedOption) {\n          // We set a duration on the live announcement, because we want the live element to be\n          // cleared after a while so that users can't navigate to it using the arrow keys.\n          this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n        }\n      }\n    }\n    /** Handles keyboard events when the selected is open. */\n\n  }, {\n    key: \"_handleOpenKeydown\",\n    value: function _handleOpenKeydown(event) {\n      var manager = this._keyManager;\n      var keyCode = event.keyCode;\n      var isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n      var isTyping = manager.isTyping();\n\n      if (isArrowKey && event.altKey) {\n        // Close the select on ALT + arrow key to match the native <select>\n        event.preventDefault();\n        this.close(); // Don't do anything in this case if the user is typing,\n        // because the typing sequence can include the space key.\n      } else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem && !hasModifierKey(event)) {\n        event.preventDefault();\n\n        manager.activeItem._selectViaInteraction();\n      } else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n        event.preventDefault();\n        var hasDeselectedOptions = this.options.some(function (opt) {\n          return !opt.disabled && !opt.selected;\n        });\n        this.options.forEach(function (option) {\n          if (!option.disabled) {\n            hasDeselectedOptions ? option.select() : option.deselect();\n          }\n        });\n      } else {\n        var previouslyFocusedIndex = manager.activeItemIndex;\n        manager.onKeydown(event);\n\n        if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {\n          manager.activeItem._selectViaInteraction();\n        }\n      }\n    }\n  }, {\n    key: \"_onFocus\",\n    value: function _onFocus() {\n      if (!this.disabled) {\n        this._focused = true;\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n\n  }, {\n    key: \"_onBlur\",\n    value: function _onBlur() {\n      this._focused = false;\n\n      if (!this.disabled && !this.panelOpen) {\n        this._onTouched();\n\n        this._changeDetectorRef.markForCheck();\n\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n\n  }, {\n    key: \"_onAttached\",\n    value: function _onAttached() {\n      var _this4 = this;\n\n      this.overlayDir.positionChange.pipe(take(1)).subscribe(function () {\n        _this4._changeDetectorRef.detectChanges();\n\n        _this4._positioningSettled();\n      });\n    }\n    /** Returns the theme to be used on the panel. */\n\n  }, {\n    key: \"_getPanelTheme\",\n    value: function _getPanelTheme() {\n      return this._parentFormField ? \"mat-\".concat(this._parentFormField.color) : '';\n    }\n    /** Whether the select has a value. */\n\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n  }, {\n    key: \"_initializeSelection\",\n    value: function _initializeSelection() {\n      var _this5 = this;\n\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(function () {\n        _this5._setSelectionByValue(_this5.ngControl ? _this5.ngControl.value : _this5._value);\n\n        _this5.stateChanges.next();\n      });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n\n  }, {\n    key: \"_setSelectionByValue\",\n    value: function _setSelectionByValue(value) {\n      var _this6 = this;\n\n      this._selectionModel.selected.forEach(function (option) {\n        return option.setInactiveStyles();\n      });\n\n      this._selectionModel.clear();\n\n      if (this.multiple && value) {\n        if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getMatSelectNonArrayValueError();\n        }\n\n        value.forEach(function (currentValue) {\n          return _this6._selectValue(currentValue);\n        });\n\n        this._sortValues();\n      } else {\n        var correspondingOption = this._selectValue(value); // Shift focus to the active item. Note that we shouldn't do this in multiple\n        // mode, because we don't know what option the user interacted with last.\n\n\n        if (correspondingOption) {\n          this._keyManager.updateActiveItem(correspondingOption);\n        } else if (!this.panelOpen) {\n          // Otherwise reset the highlighted option. Note that we only want to do this while\n          // closed, because doing it while open can shift the user's focus unnecessarily.\n          this._keyManager.updateActiveItem(-1);\n        }\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n\n  }, {\n    key: \"_selectValue\",\n    value: function _selectValue(value) {\n      var _this7 = this;\n\n      var correspondingOption = this.options.find(function (option) {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (_this7._selectionModel.isSelected(option)) {\n          return false;\n        }\n\n        try {\n          // Treat null as a special reset value.\n          return option.value != null && _this7._compareWith(option.value, value);\n        } catch (error) {\n          if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            // Notify developers of errors in their comparator.\n            console.warn(error);\n          }\n\n          return false;\n        }\n      });\n\n      if (correspondingOption) {\n        this._selectionModel.select(correspondingOption);\n      }\n\n      return correspondingOption;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n\n  }, {\n    key: \"_initKeyManager\",\n    value: function _initKeyManager() {\n      var _this8 = this;\n\n      this._keyManager = new ActiveDescendantKeyManager(this.options).withTypeAhead(this._typeaheadDebounceInterval).withVerticalOrientation().withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr').withHomeAndEnd().withAllowedModifierKeys(['shiftKey']);\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(function () {\n        if (_this8.panelOpen) {\n          // Select the active item when tabbing away. This is consistent with how the native\n          // select behaves. Note that we only want to do this in single selection mode.\n          if (!_this8.multiple && _this8._keyManager.activeItem) {\n            _this8._keyManager.activeItem._selectViaInteraction();\n          } // Restore focus to the trigger before closing. Ensures that the focus\n          // position won't be lost if the user got focus into the overlay.\n\n\n          _this8.focus();\n\n          _this8.close();\n        }\n      });\n\n      this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(function () {\n        if (_this8._panelOpen && _this8.panel) {\n          _this8._scrollOptionIntoView(_this8._keyManager.activeItemIndex || 0);\n        } else if (!_this8._panelOpen && !_this8.multiple && _this8._keyManager.activeItem) {\n          _this8._keyManager.activeItem._selectViaInteraction();\n        }\n      });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n\n  }, {\n    key: \"_resetOptions\",\n    value: function _resetOptions() {\n      var _this9 = this;\n\n      var changedOrDestroyed = merge(this.options.changes, this._destroy);\n      this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(function (event) {\n        _this9._onSelect(event.source, event.isUserInput);\n\n        if (event.isUserInput && !_this9.multiple && _this9._panelOpen) {\n          _this9.close();\n\n          _this9.focus();\n        }\n      }); // Listen to changes in the internal state of the options and react accordingly.\n      // Handles cases like the labels of the selected options changing.\n\n      merge.apply(void 0, _toConsumableArray(this.options.map(function (option) {\n        return option._stateChanges;\n      }))).pipe(takeUntil(changedOrDestroyed)).subscribe(function () {\n        _this9._changeDetectorRef.markForCheck();\n\n        _this9.stateChanges.next();\n      });\n    }\n    /** Invoked when an option is clicked. */\n\n  }, {\n    key: \"_onSelect\",\n    value: function _onSelect(option, isUserInput) {\n      var wasSelected = this._selectionModel.isSelected(option);\n\n      if (option.value == null && !this._multiple) {\n        option.deselect();\n\n        this._selectionModel.clear();\n\n        if (this.value != null) {\n          this._propagateChanges(option.value);\n        }\n      } else {\n        if (wasSelected !== option.selected) {\n          option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n        }\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(option);\n        }\n\n        if (this.multiple) {\n          this._sortValues();\n\n          if (isUserInput) {\n            // In case the user selected the option with their mouse, we\n            // want to restore focus back to the trigger, in order to\n            // prevent the select keyboard controls from clashing with\n            // the ones from `mat-option`.\n            this.focus();\n          }\n        }\n      }\n\n      if (wasSelected !== this._selectionModel.isSelected(option)) {\n        this._propagateChanges();\n      }\n\n      this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n\n  }, {\n    key: \"_sortValues\",\n    value: function _sortValues() {\n      var _this10 = this;\n\n      if (this.multiple) {\n        var options = this.options.toArray();\n\n        this._selectionModel.sort(function (a, b) {\n          return _this10.sortComparator ? _this10.sortComparator(a, b, options) : options.indexOf(a) - options.indexOf(b);\n        });\n\n        this.stateChanges.next();\n      }\n    }\n    /** Emits change event to set the model value. */\n\n  }, {\n    key: \"_propagateChanges\",\n    value: function _propagateChanges(fallbackValue) {\n      var valueToEmit = null;\n\n      if (this.multiple) {\n        valueToEmit = this.selected.map(function (option) {\n          return option.value;\n        });\n      } else {\n        valueToEmit = this.selected ? this.selected.value : fallbackValue;\n      }\n\n      this._value = valueToEmit;\n      this.valueChange.emit(valueToEmit);\n\n      this._onChange(valueToEmit);\n\n      this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n\n  }, {\n    key: \"_highlightCorrectOption\",\n    value: function _highlightCorrectOption() {\n      if (this._keyManager) {\n        if (this.empty) {\n          this._keyManager.setFirstItemActive();\n        } else {\n          this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n        }\n      }\n    }\n    /** Whether the panel is allowed to open. */\n\n  }, {\n    key: \"_canOpen\",\n    value: function _canOpen() {\n      var _a;\n\n      return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    /** Focuses the select element. */\n\n  }, {\n    key: \"focus\",\n    value: function focus(options) {\n      this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n\n  }, {\n    key: \"_getPanelAriaLabelledby\",\n    value: function _getPanelAriaLabelledby() {\n      if (this.ariaLabel) {\n        return null;\n      }\n\n      var labelId = this._getLabelId();\n\n      return this.ariaLabelledby ? labelId + ' ' + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n\n  }, {\n    key: \"_getAriaActiveDescendant\",\n    value: function _getAriaActiveDescendant() {\n      if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n        return this._keyManager.activeItem.id;\n      }\n\n      return null;\n    }\n    /** Gets the ID of the element that is labelling the select. */\n\n  }, {\n    key: \"_getLabelId\",\n    value: function _getLabelId() {\n      var _a;\n\n      return ((_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId()) || '';\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n\n  }, {\n    key: \"_getTriggerAriaLabelledby\",\n    value: function _getTriggerAriaLabelledby() {\n      if (this.ariaLabel) {\n        return null;\n      }\n\n      var value = this._getLabelId() + ' ' + this._valueId;\n\n      if (this.ariaLabelledby) {\n        value += ' ' + this.ariaLabelledby;\n      }\n\n      return value;\n    }\n    /** Called when the overlay panel is done animating. */\n\n  }, {\n    key: \"_panelDoneAnimating\",\n    value: function _panelDoneAnimating(isOpen) {\n      this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"setDescribedByIds\",\n    value: function setDescribedByIds(ids) {\n      this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"onContainerClick\",\n    value: function onContainerClick() {\n      this.focus();\n      this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"shouldLabelFloat\",\n    get: function get() {\n      return this._panelOpen || !this.empty || this._focused && !!this._placeholder;\n    }\n  }]);\n\n  return _MatSelectBase;\n}(_MatSelectMixinBase);\n\n_MatSelectBase.ɵfac = function _MatSelectBase_Factory(t) {\n  return new (t || _MatSelectBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8));\n};\n\n_MatSelectBase.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: _MatSelectBase,\n  viewQuery: function _MatSelectBase_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 1);\n      ɵngcc0.ɵɵviewQuery(_c1, 1);\n      ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overlayDir = _t.first);\n    }\n  },\n  inputs: {\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    id: \"id\",\n    placeholder: \"placeholder\",\n    required: \"required\",\n    multiple: \"multiple\",\n    disableOptionCentering: \"disableOptionCentering\",\n    compareWith: \"compareWith\",\n    value: \"value\",\n    typeaheadDebounceInterval: \"typeaheadDebounceInterval\",\n    panelClass: \"panelClass\",\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    errorStateMatcher: \"errorStateMatcher\",\n    sortComparator: \"sortComparator\"\n  },\n  outputs: {\n    openedChange: \"openedChange\",\n    _openedStream: \"opened\",\n    _closedStream: \"closed\",\n    selectionChange: \"selectionChange\",\n    valueChange: \"valueChange\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\n_MatSelectBase.ctorParameters = function () {\n  return [{\n    type: ViewportRuler\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: NgZone\n  }, {\n    type: ErrorStateMatcher\n  }, {\n    type: ElementRef\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: NgForm,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: FormGroupDirective,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: MatFormField,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_FORM_FIELD]\n    }]\n  }, {\n    type: NgControl,\n    decorators: [{\n      type: Self\n    }, {\n      type: Optional\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_SELECT_SCROLL_STRATEGY]\n    }]\n  }, {\n    type: LiveAnnouncer\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_SELECT_CONFIG]\n    }]\n  }];\n};\n\n_MatSelectBase.propDecorators = {\n  trigger: [{\n    type: ViewChild,\n    args: ['trigger']\n  }],\n  panel: [{\n    type: ViewChild,\n    args: ['panel']\n  }],\n  overlayDir: [{\n    type: ViewChild,\n    args: [CdkConnectedOverlay]\n  }],\n  panelClass: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  multiple: [{\n    type: Input\n  }],\n  disableOptionCentering: [{\n    type: Input\n  }],\n  compareWith: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  errorStateMatcher: [{\n    type: Input\n  }],\n  typeaheadDebounceInterval: [{\n    type: Input\n  }],\n  sortComparator: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  openedChange: [{\n    type: Output\n  }],\n  _openedStream: [{\n    type: Output,\n    args: ['opened']\n  }],\n  _closedStream: [{\n    type: Output,\n    args: ['closed']\n  }],\n  selectionChange: [{\n    type: Output\n  }],\n  valueChange: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatSelectBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc2.ErrorStateMatcher\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc6.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_FORM_FIELD]\n      }]\n    }, {\n      type: ɵngcc4.NgControl,\n      decorators: [{\n        type: Self\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SELECT_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc5.LiveAnnouncer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_SELECT_CONFIG]\n      }]\n    }];\n  }, {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    openedChange: [{\n      type: Output\n    }],\n    _openedStream: [{\n      type: Output,\n      args: ['opened']\n    }],\n    _closedStream: [{\n      type: Output,\n      args: ['closed']\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    id: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    disableOptionCentering: [{\n      type: Input\n    }],\n    compareWith: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    typeaheadDebounceInterval: [{\n      type: Input\n    }],\n    trigger: [{\n      type: ViewChild,\n      args: ['trigger']\n    }],\n    panel: [{\n      type: ViewChild,\n      args: ['panel']\n    }],\n    overlayDir: [{\n      type: ViewChild,\n      args: [CdkConnectedOverlay]\n    }],\n    panelClass: [{\n      type: Input\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    sortComparator: [{\n      type: Input\n    }]\n  });\n})();\n\nvar MatSelect = /*#__PURE__*/function (_MatSelectBase2) {\n  _inherits(MatSelect, _MatSelectBase2);\n\n  var _super2 = _createSuper(MatSelect);\n\n  function MatSelect() {\n    var _this11;\n\n    _classCallCheck(this, MatSelect);\n\n    _this11 = _super2.apply(this, arguments);\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n\n    _this11._scrollTop = 0;\n    /** The cached font-size of the trigger element. */\n\n    _this11._triggerFontSize = 0;\n    /** The value of the select panel's transform-origin property. */\n\n    _this11._transformOrigin = 'top';\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n\n    _this11._offsetY = 0;\n    _this11._positions = [{\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom'\n    }];\n    return _this11;\n  }\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n\n\n  _createClass(MatSelect, [{\n    key: \"_calculateOverlayScroll\",\n    value: function _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n      var itemHeight = this._getItemHeight();\n\n      var optionOffsetFromScrollTop = itemHeight * selectedIndex;\n      var halfOptionHeight = itemHeight / 2; // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n      // scroll container, then subtracts the scroll buffer to scroll the option down to\n      // the center of the overlay panel. Half the option height must be re-added to the\n      // scrollTop so the option is centered based on its middle, not its top edge.\n\n      var optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n      return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this12 = this;\n\n      _get(_getPrototypeOf(MatSelect.prototype), \"ngOnInit\", this).call(this);\n\n      this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(function () {\n        if (_this12.panelOpen) {\n          _this12._triggerRect = _this12.trigger.nativeElement.getBoundingClientRect();\n\n          _this12._changeDetectorRef.markForCheck();\n        }\n      });\n    }\n  }, {\n    key: \"open\",\n    value: function open() {\n      var _this13 = this;\n\n      if (_get(_getPrototypeOf(MatSelect.prototype), \"_canOpen\", this).call(this)) {\n        _get(_getPrototypeOf(MatSelect.prototype), \"open\", this).call(this);\n\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect(); // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n        this._calculateOverlayPosition(); // Set the font size on the panel element once it exists.\n\n\n        this._ngZone.onStable.pipe(take(1)).subscribe(function () {\n          if (_this13._triggerFontSize && _this13.overlayDir.overlayRef && _this13.overlayDir.overlayRef.overlayElement) {\n            _this13.overlayDir.overlayRef.overlayElement.style.fontSize = \"\".concat(_this13._triggerFontSize, \"px\");\n          }\n        });\n      }\n    }\n    /** Scrolls the active option into view. */\n\n  }, {\n    key: \"_scrollOptionIntoView\",\n    value: function _scrollOptionIntoView(index) {\n      var labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n\n      var itemHeight = this._getItemHeight();\n\n      this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    }\n  }, {\n    key: \"_positioningSettled\",\n    value: function _positioningSettled() {\n      this._calculateOverlayOffsetX();\n\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    }\n  }, {\n    key: \"_panelDoneAnimating\",\n    value: function _panelDoneAnimating(isOpen) {\n      if (this.panelOpen) {\n        this._scrollTop = 0;\n      } else {\n        this.overlayDir.offsetX = 0;\n\n        this._changeDetectorRef.markForCheck();\n      }\n\n      _get(_getPrototypeOf(MatSelect.prototype), \"_panelDoneAnimating\", this).call(this, isOpen);\n    }\n  }, {\n    key: \"_getChangeEvent\",\n    value: function _getChangeEvent(value) {\n      return new MatSelectChange(this, value);\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n\n  }, {\n    key: \"_calculateOverlayOffsetX\",\n    value: function _calculateOverlayOffsetX() {\n      var overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n\n      var viewportSize = this._viewportRuler.getViewportSize();\n\n      var isRtl = this._isRtl();\n\n      var paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X : SELECT_PANEL_PADDING_X * 2;\n      var offsetX; // Adjust the offset, depending on the option padding.\n\n      if (this.multiple) {\n        offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n      } else if (this.disableOptionCentering) {\n        offsetX = SELECT_PANEL_PADDING_X;\n      } else {\n        var selected = this._selectionModel.selected[0] || this.options.first;\n        offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n      } // Invert the offset in LTR.\n\n\n      if (!isRtl) {\n        offsetX *= -1;\n      } // Determine how much the select overflows on each side.\n\n\n      var leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n      var rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth); // If the element overflows on either side, reduce the offset to allow it to fit.\n\n      if (leftOverflow > 0) {\n        offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n      } else if (rightOverflow > 0) {\n        offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n      } // Set the offset directly in order to avoid having to go through change detection and\n      // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n      // blurry content in some browsers.\n\n\n      this.overlayDir.offsetX = Math.round(offsetX);\n      this.overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n\n  }, {\n    key: \"_calculateOverlayOffsetY\",\n    value: function _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n      var itemHeight = this._getItemHeight();\n\n      var optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n      var maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n      var optionOffsetFromPanelTop; // Disable offset if requested by user by returning 0 as value to offset\n\n      if (this.disableOptionCentering) {\n        return 0;\n      }\n\n      if (this._scrollTop === 0) {\n        optionOffsetFromPanelTop = selectedIndex * itemHeight;\n      } else if (this._scrollTop === maxScroll) {\n        var firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n        var selectedDisplayIndex = selectedIndex - firstDisplayedIndex; // The first item is partially out of the viewport. Therefore we need to calculate what\n        // portion of it is shown in the viewport and account for it in our offset.\n\n        var partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight; // Because the panel height is longer than the height of the options alone,\n        // there is always extra padding at the top or bottom of the panel. When\n        // scrolled to the very bottom, this padding is at the top of the panel and\n        // must be added to the offset.\n\n        optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n      } else {\n        // If the option was scrolled to the middle of the panel using a scroll buffer,\n        // its offset will be the scroll buffer minus the half height that was added to\n        // center it.\n        optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n      } // The final offset is the option's offset from the top, adjusted for the height difference,\n      // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n      // The value is rounded to prevent some browsers from blurring the content.\n\n\n      return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n\n  }, {\n    key: \"_checkOverlayWithinViewport\",\n    value: function _checkOverlayWithinViewport(maxScroll) {\n      var itemHeight = this._getItemHeight();\n\n      var viewportSize = this._viewportRuler.getViewportSize();\n\n      var topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n      var bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n      var panelHeightTop = Math.abs(this._offsetY);\n      var totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n      var panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n      if (panelHeightBottom > bottomSpaceAvailable) {\n        this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n      } else if (panelHeightTop > topSpaceAvailable) {\n        this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n      } else {\n        this._transformOrigin = this._getOriginBasedOnOption();\n      }\n    }\n    /** Adjusts the overlay panel up to fit in the viewport. */\n\n  }, {\n    key: \"_adjustPanelUp\",\n    value: function _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n      // Browsers ignore fractional scroll offsets, so we need to round.\n      var distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable); // Scrolls the panel up by the distance it was extending past the boundary, then\n      // adjusts the offset by that amount to move the panel up into the viewport.\n\n      this._scrollTop -= distanceBelowViewport;\n      this._offsetY -= distanceBelowViewport;\n      this._transformOrigin = this._getOriginBasedOnOption(); // If the panel is scrolled to the very top, it won't be able to fit the panel\n      // by scrolling, so set the offset to 0 to allow the fallback position to take\n      // effect.\n\n      if (this._scrollTop <= 0) {\n        this._scrollTop = 0;\n        this._offsetY = 0;\n        this._transformOrigin = \"50% bottom 0px\";\n      }\n    }\n    /** Adjusts the overlay panel down to fit in the viewport. */\n\n  }, {\n    key: \"_adjustPanelDown\",\n    value: function _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n      // Browsers ignore fractional scroll offsets, so we need to round.\n      var distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable); // Scrolls the panel down by the distance it was extending past the boundary, then\n      // adjusts the offset by that amount to move the panel down into the viewport.\n\n      this._scrollTop += distanceAboveViewport;\n      this._offsetY += distanceAboveViewport;\n      this._transformOrigin = this._getOriginBasedOnOption(); // If the panel is scrolled to the very bottom, it won't be able to fit the\n      // panel by scrolling, so set the offset to 0 to allow the fallback position\n      // to take effect.\n\n      if (this._scrollTop >= maxScroll) {\n        this._scrollTop = maxScroll;\n        this._offsetY = 0;\n        this._transformOrigin = \"50% top 0px\";\n        return;\n      }\n    }\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n\n  }, {\n    key: \"_calculateOverlayPosition\",\n    value: function _calculateOverlayPosition() {\n      var itemHeight = this._getItemHeight();\n\n      var items = this._getItemCount();\n\n      var panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n      var scrollContainerHeight = items * itemHeight; // The farthest the panel can be scrolled before it hits the bottom\n\n      var maxScroll = scrollContainerHeight - panelHeight; // If no value is selected we open the popup to the first item.\n\n      var selectedOptionOffset;\n\n      if (this.empty) {\n        selectedOptionOffset = 0;\n      } else {\n        selectedOptionOffset = Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n      }\n\n      selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups); // We must maintain a scroll buffer so the selected option will be scrolled to the\n      // center of the overlay panel rather than the top.\n\n      var scrollBuffer = panelHeight / 2;\n      this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n      this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n      this._checkOverlayWithinViewport(maxScroll);\n    }\n    /** Sets the transform origin point based on the selected option. */\n\n  }, {\n    key: \"_getOriginBasedOnOption\",\n    value: function _getOriginBasedOnOption() {\n      var itemHeight = this._getItemHeight();\n\n      var optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n      var originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n      return \"50% \".concat(originY, \"px 0px\");\n    }\n    /** Calculates the height of the select's options. */\n\n  }, {\n    key: \"_getItemHeight\",\n    value: function _getItemHeight() {\n      return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n\n  }, {\n    key: \"_getItemCount\",\n    value: function _getItemCount() {\n      return this.options.length + this.optionGroups.length;\n    }\n  }]);\n\n  return MatSelect;\n}(_MatSelectBase);\n\nMatSelect.ɵfac = function MatSelect_Factory(t) {\n  return ɵMatSelect_BaseFactory(t || MatSelect);\n};\n\nMatSelect.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatSelect,\n  selectors: [[\"mat-select\"]],\n  contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, 1);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 1);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    }\n  },\n  hostAttrs: [\"role\", \"combobox\", \"aria-autocomplete\", \"none\", \"aria-haspopup\", \"true\", 1, \"mat-select\"],\n  hostVars: 20,\n  hostBindings: function MatSelect_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"focus\", function MatSelect_focus_HostBindingHandler() {\n        return ctx._onFocus();\n      })(\"blur\", function MatSelect_blur_HostBindingHandler() {\n        return ctx._onBlur();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx.panelOpen ? ctx.id + \"-panel\" : null)(\"aria-expanded\", ctx.panelOpen)(\"aria-label\", ctx.ariaLabel || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n      ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty)(\"mat-select-multiple\", ctx.multiple);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\"\n  },\n  exportAs: [\"matSelect\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatSelect\n  }, {\n    provide: MAT_OPTION_PARENT_COMPONENT,\n    useExisting: MatSelect\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c3,\n  decls: 9,\n  vars: 12,\n  consts: [[\"cdk-overlay-origin\", \"\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder mat-select-min-line\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\", \"mat-select-min-line\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [\"class\", \"mat-select-min-line\", 4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-min-line\"], [1, \"mat-select-panel-wrap\"], [\"role\", \"listbox\", \"tabindex\", \"-1\", 3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]],\n  template: function MatSelect_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c2);\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n      ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() {\n        return ctx.toggle();\n      });\n      ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n      ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n      ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n      ɵngcc0.ɵɵelement(7, \"div\", 6);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 14, \"ng-template\", 7);\n      ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() {\n        return ctx.close();\n      })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() {\n        return ctx._onAttached();\n      })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() {\n        return ctx.close();\n      });\n    }\n\n    if (rf & 2) {\n      var _r0 = ɵngcc0.ɵɵreference(1);\n\n      ɵngcc0.ɵɵattribute(\"aria-owns\", ctx.panelOpen ? ctx.id + \"-panel\" : null);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n      ɵngcc0.ɵɵattribute(\"id\", ctx._valueId);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayPanelClass\", ctx._overlayPanelClass)(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    }\n  },\n  directives: [ɵngcc7.CdkOverlayOrigin, ɵngcc8.NgSwitch, ɵngcc8.NgSwitchCase, ɵngcc7.CdkConnectedOverlay, ɵngcc8.NgSwitchDefault, ɵngcc8.NgClass],\n  styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel]\n  },\n  changeDetection: 0\n});\nMatSelect.propDecorators = {\n  options: [{\n    type: ContentChildren,\n    args: [MatOption, {\n      descendants: true\n    }]\n  }],\n  optionGroups: [{\n    type: ContentChildren,\n    args: [MAT_OPTGROUP, {\n      descendants: true\n    }]\n  }],\n  customTrigger: [{\n    type: ContentChild,\n    args: [MAT_SELECT_TRIGGER]\n  }]\n};\nvar ɵMatSelect_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatSelect);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelect, [{\n    type: Component,\n    args: [{\n      selector: 'mat-select',\n      exportAs: 'matSelect',\n      template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n      inputs: ['disabled', 'disableRipple', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'role': 'combobox',\n        'aria-autocomplete': 'none',\n        // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n        // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n        // value. At some point we should try to switch it back to being `listbox`.\n        'aria-haspopup': 'true',\n        'class': 'mat-select',\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n        '[attr.aria-expanded]': 'panelOpen',\n        '[attr.aria-label]': 'ariaLabel || null',\n        '[attr.aria-required]': 'required.toString()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-describedby]': '_ariaDescribedby || null',\n        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n        '[class.mat-select-disabled]': 'disabled',\n        '[class.mat-select-invalid]': 'errorState',\n        '[class.mat-select-required]': 'required',\n        '[class.mat-select-empty]': 'empty',\n        '[class.mat-select-multiple]': 'multiple',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': '_onFocus()',\n        '(blur)': '_onBlur()'\n      },\n      animations: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel],\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatSelect\n      }, {\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatSelect\n      }],\n      styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px}\\n\"]\n    }]\n  }], null, {\n    options: [{\n      type: ContentChildren,\n      args: [MatOption, {\n        descendants: true\n      }]\n    }],\n    optionGroups: [{\n      type: ContentChildren,\n      args: [MAT_OPTGROUP, {\n        descendants: true\n      }]\n    }],\n    customTrigger: [{\n      type: ContentChild,\n      args: [MAT_SELECT_TRIGGER]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatSelectModule = function MatSelectModule() {\n  _classCallCheck(this, MatSelectModule);\n};\n\nMatSelectModule.ɵfac = function MatSelectModule_Factory(t) {\n  return new (t || MatSelectModule)();\n};\n\nMatSelectModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatSelectModule\n});\nMatSelectModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n  imports: [[CommonModule, OverlayModule, MatOptionModule, MatCommonModule], CdkScrollableModule, MatFormFieldModule, MatOptionModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, {\n    declarations: function declarations() {\n      return [MatSelect, MatSelectTrigger];\n    },\n    imports: function imports() {\n      return [CommonModule, OverlayModule, MatOptionModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [CdkScrollableModule, MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n      exports: [CdkScrollableModule, MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n      declarations: [MatSelect, MatSelectTrigger],\n      providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, _MatSelectBase, matSelectAnimations }; //# sourceMappingURL=select.js.map","map":{"version":3,"sources":["/Users/mohammedelmourabit/xrp/xpr/node_modules/@angular/material/__ivy_ngcc__/fesm2015/select.js"],"names":["Overlay","CdkConnectedOverlay","OverlayModule","CommonModule","InjectionToken","Directive","EventEmitter","ChangeDetectorRef","NgZone","ElementRef","Optional","Inject","Self","Attribute","ViewChild","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","ContentChild","NgModule","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","ErrorStateMatcher","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MAT_OPTION_PARENT_COMPONENT","MatOption","MAT_OPTGROUP","MatOptionModule","MatCommonModule","MatFormField","MAT_FORM_FIELD","MatFormFieldControl","MatFormFieldModule","ViewportRuler","CdkScrollableModule","ActiveDescendantKeyManager","LiveAnnouncer","Directionality","coerceBooleanProperty","coerceNumberProperty","SelectionModel","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","hasModifierKey","A","NgForm","FormGroupDirective","NgControl","Subject","defer","merge","startWith","switchMap","take","filter","map","distinctUntilChanged","takeUntil","trigger","transition","query","animateChild","state","style","animate","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","ɵngcc7","ɵngcc8","_c0","_c1","MatSelect_span_4_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ctx_r2","ɵɵnextContext","ɵɵadvance","ɵɵtextInterpolate","placeholder","MatSelect_span_5_span_1_Template","ctx_r5","triggerValue","MatSelect_span_5_ng_content_2_Template","ɵɵprojection","MatSelect_span_5_Template","ɵɵtemplate","ctx_r3","ɵɵproperty","customTrigger","MatSelect_ng_template_8_Template","_r9","ɵɵgetCurrentView","ɵɵlistener","MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener","$event","ɵɵrestoreView","ctx_r8","_panelDoneAnimatingStream","next","toState","MatSelect_ng_template_8_Template_div_keydown_1_listener","ctx_r10","_handleKeydown","ctx_r4","undefined","ɵɵclassMapInterpolate1","_getPanelTheme","ɵɵstyleProp","_transformOrigin","_triggerFontSize","panelClass","multiple","ɵɵattribute","id","ariaLabel","_getPanelAriaLabelledby","_c2","_c3","matSelectAnimations","transformPanelWrap","optional","transformPanel","transform","minWidth","opacity","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","nextUniqueId","SELECT_PANEL_MAX_HEIGHT","SELECT_PANEL_PADDING_X","SELECT_PANEL_INDENT_PADDING_X","SELECT_ITEM_HEIGHT_EM","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_VIEWPORT_PADDING","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MatSelectChange","source","value","MatSelectBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","MAT_SELECT_TRIGGER","MatSelectTrigger","ɵfac","MatSelectTrigger_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","features","ɵɵProvidersFeature","useExisting","ngDevMode","ɵsetClassMetadata","args","selector","providers","_MatSelectBase","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","_a","_b","_c","_panelOpen","_compareWith","o1","o2","_uid","_triggerAriaLabelledBy","_destroy","_onChange","_onTouched","_valueId","_overlayPanelClass","overlayPanelClass","_focused","controlType","_required","_multiple","_disableOptionCentering","disableOptionCentering","optionSelectionChanges","options","changes","pipe","option","onSelectionChange","onStable","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","valueAccessor","typeaheadDebounceInterval","_typeaheadDebounceInterval","_scrollStrategyFactory","_scrollStrategy","parseInt","_placeholder","stateChanges","_selectionModel","fn","_initializeSelection","_value","newValue","Array","isArray","_setSelectionByValue","_id","subscribe","_panelDoneAnimating","panelOpen","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","newAriaLabelledby","_getTriggerAriaLabelledby","element","nativeElement","setAttribute","removeAttribute","updateErrorState","_keyManager","withTypeAhead","complete","close","open","_canOpen","withHorizontalOrientation","_highlightCorrectOption","markForCheck","_isRtl","isDisabled","disabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","manager","isTyping","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","_selectViaInteraction","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","overlayDir","positionChange","detectChanges","_positioningSettled","color","isEmpty","Promise","resolve","then","setInactiveStyles","clear","currentValue","_selectValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","error","console","warn","withVerticalOrientation","withHomeAndEnd","withAllowedModifierKeys","tabOut","focus","change","panel","_scrollOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","_propagateChanges","setActiveItem","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","emit","_getChangeEvent","setFirstItemActive","length","labelId","_getLabelId","ariaLabelledby","getLabelId","isOpen","ids","_ariaDescribedby","_MatSelectBase_Factory","ɵɵdirectiveInject","ɵɵinjectAttribute","viewQuery","_MatSelectBase_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","inputs","required","compareWith","errorStateMatcher","outputs","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature","ctorParameters","decorators","String","propDecorators","MatSelect","arguments","_scrollTop","_offsetY","_positions","originX","originY","overlayX","overlayY","selectedIndex","scrollBuffer","maxScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","Math","min","max","_triggerRect","getBoundingClientRect","getComputedStyle","fontSize","_calculateOverlayPosition","overlayRef","overlayElement","index","labelCount","optionGroups","scrollTop","_calculateOverlayOffsetX","offsetX","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","group","leftOverflow","left","rightOverflow","right","width","round","updatePosition","optionHeightAdjustment","height","maxOptionsDisplayed","floor","optionOffsetFromPanelTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","items","panelHeight","scrollContainerHeight","selectedOptionOffset","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","MatSelect_Factory","ɵMatSelect_BaseFactory","ɵcmp","ɵɵdefineComponent","contentQueries","MatSelect_ContentQueries","dirIndex","ɵɵcontentQuery","hostAttrs","hostVars","hostBindings","MatSelect_HostBindings","MatSelect_keydown_HostBindingHandler","MatSelect_focus_HostBindingHandler","_onFocus","MatSelect_blur_HostBindingHandler","_onBlur","toString","errorState","_getAriaActiveDescendant","ɵɵclassProp","disableRipple","exportAs","ngContentSelectors","decls","vars","consts","template","MatSelect_Template","ɵɵprojectionDef","MatSelect_Template_div_click_0_listener","toggle","ɵɵelement","MatSelect_Template_ng_template_backdropClick_8_listener","MatSelect_Template_ng_template_attach_8_listener","_onAttached","MatSelect_Template_ng_template_detach_8_listener","_r0","ɵɵreference","directives","CdkOverlayOrigin","NgSwitch","NgSwitchCase","NgSwitchDefault","NgClass","styles","encapsulation","data","animation","changeDetection","descendants","ɵɵgetInheritedFactory","None","OnPush","host","animations","MatSelectModule","MatSelectModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["import { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, EventEmitter, ChangeDetectorRef, NgZone, ElementRef, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, ErrorStateMatcher, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { MatFormField, MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/material/form-field';\nimport * as ɵngcc7 from '@angular/cdk/overlay';\nimport * as ɵngcc8 from '@angular/common';\n\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\nfunction MatSelect_span_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder);\n} }\nfunction MatSelect_span_5_span_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 12);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue);\n} }\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n} }\nfunction MatSelect_span_5_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n} }\nfunction MatSelect_ng_template_8_Template(rf, ctx) { if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 13);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 14, 15);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8._panelDoneAnimatingStream.next($event.toState); })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10._handleKeydown($event); });\n    ɵngcc0.ɵɵprojection(3, 1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\")(\"aria-multiselectable\", ctx_r4.multiple)(\"aria-label\", ctx_r4.ariaLabel || null)(\"aria-labelledby\", ctx_r4._getPanelAriaLabelledby());\n} }\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true }))\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            transform: 'scaleY(1)'\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            transform: 'scaleY(1)'\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/**\n * The max height of the select's overlay panel.\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The panel's padding on the x-axis.\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nconst SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * The height of the select items in `em` units.\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n *\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n *\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) { return new (t || MatSelectTrigger)(); };\nMatSelectTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSelectTrigger, selectors: [[\"mat-select-trigger\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-select-trigger',\n                providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }]\n            }]\n    }], null, null); })();\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        var _a, _b, _c;\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this.ngControl = ngControl;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `ariar-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        this._required = false;\n        this._multiple = false;\n        this._disableOptionCentering = (_c = (_b = this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable\n                .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if ((_defaultOptions === null || _defaultOptions === void 0 ? void 0 : _defaultOptions.typeaheadDebounceInterval) != null) {\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() { return this._placeholder; }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() { return this._disableOptionCentering; }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() { return this._compareWith; }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() { return this._value; }\n    set value(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() { return this._typeaheadDebounceInterval; }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() { return this._id; }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this._canOpen()) {\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if (!manager.isTyping() && (isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this._selectionModel.selected.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected ? this._selectionModel.select(option) :\n                    this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        var _a;\n        return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._getLabelId();\n        return this.ariaLabelledby ? labelId + ' ' + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the ID of the element that is labelling the select. */\n    _getLabelId() {\n        var _a;\n        return ((_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId()) || '';\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        let value = this._getLabelId() + ' ' + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\n    }\n}\n_MatSelectBase.ɵfac = function _MatSelectBase_Factory(t) { return new (t || _MatSelectBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8)); };\n_MatSelectBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatSelectBase, viewQuery: function _MatSelectBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 1);\n        ɵngcc0.ɵɵviewQuery(_c1, 1);\n        ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overlayDir = _t.first);\n    } }, inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], id: \"id\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", panelClass: \"panelClass\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", sortComparator: \"sortComparator\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n_MatSelectBase.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: ErrorStateMatcher },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] },\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\n    { type: LiveAnnouncer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_SELECT_CONFIG,] }] }\n];\n_MatSelectBase.propDecorators = {\n    trigger: [{ type: ViewChild, args: ['trigger',] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    overlayDir: [{ type: ViewChild, args: [CdkConnectedOverlay,] }],\n    panelClass: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    multiple: [{ type: Input }],\n    disableOptionCentering: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    errorStateMatcher: [{ type: Input }],\n    typeaheadDebounceInterval: [{ type: Input }],\n    sortComparator: [{ type: Input }],\n    id: [{ type: Input }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    selectionChange: [{ type: Output }],\n    valueChange: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatSelectBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.ErrorStateMatcher }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc6.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }] }, { type: ɵngcc4.NgControl, decorators: [{\n                type: Self\n            }, {\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SELECT_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc5.LiveAnnouncer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_SELECT_CONFIG]\n            }] }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], openedChange: [{\n            type: Output\n        }], _openedStream: [{\n            type: Output,\n            args: ['opened']\n        }], _closedStream: [{\n            type: Output,\n            args: ['closed']\n        }], selectionChange: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], id: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disableOptionCentering: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], typeaheadDebounceInterval: [{\n            type: Input\n        }], trigger: [{\n            type: ViewChild,\n            args: ['trigger']\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], overlayDir: [{\n            type: ViewChild,\n            args: [CdkConnectedOverlay]\n        }], panelClass: [{\n            type: Input\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], errorStateMatcher: [{\n            type: Input\n        }], sortComparator: [{\n            type: Input\n        }] }); })();\nclass MatSelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        /** The scroll position of the overlay panel, calculated to center the selected option. */\n        this._scrollTop = 0;\n        /** The cached font-size of the trigger element. */\n        this._triggerFontSize = 0;\n        /** The value of the select panel's transform-origin property. */\n        this._transformOrigin = 'top';\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    open() {\n        if (super._canOpen()) {\n            super.open();\n            this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n            // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n            // `parseInt` ignores the trailing 'px' and converts this to a number.\n            this._triggerFontSize =\n                parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n            this._calculateOverlayPosition();\n            // Set the font size on the panel element once it exists.\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n                if (this._triggerFontSize && this.overlayDir.overlayRef &&\n                    this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n        }\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n        const itemHeight = this._getItemHeight();\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    }\n    _positioningSettled() {\n        this._calculateOverlayOffsetX();\n        this.panel.nativeElement.scrollTop = this._scrollTop;\n    }\n    _panelDoneAnimating(isOpen) {\n        if (this.panelOpen) {\n            this._scrollTop = 0;\n        }\n        else {\n            this.overlayDir.offsetX = 0;\n            this._changeDetectorRef.markForCheck();\n        }\n        super._panelDoneAnimating(isOpen);\n    }\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    _calculateOverlayOffsetX() {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n            SELECT_PANEL_PADDING_X * 2;\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else if (this.disableOptionCentering) {\n            offsetX = SELECT_PANEL_PADDING_X;\n        }\n        else {\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this.disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    _calculateOverlayPosition() {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset;\n        if (this.empty) {\n            selectedOptionOffset = 0;\n        }\n        else {\n            selectedOptionOffset =\n                Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n        }\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /** Sets the transform origin point based on the selected option. */\n    _getOriginBasedOnOption() {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /** Calculates the height of the select's options. */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n}\nMatSelect.ɵfac = function MatSelect_Factory(t) { return ɵMatSelect_BaseFactory(t || MatSelect); };\nMatSelect.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSelect, selectors: [[\"mat-select\"]], contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, hostAttrs: [\"role\", \"combobox\", \"aria-autocomplete\", \"none\", \"aria-haspopup\", \"true\", 1, \"mat-select\"], hostVars: 20, hostBindings: function MatSelect_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatSelect_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSelect_blur_HostBindingHandler() { return ctx._onBlur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx.panelOpen ? ctx.id + \"-panel\" : null)(\"aria-expanded\", ctx.panelOpen)(\"aria-label\", ctx.ariaLabel || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n        ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty)(\"mat-select-multiple\", ctx.multiple);\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, exportAs: [\"matSelect\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c3, decls: 9, vars: 12, consts: [[\"cdk-overlay-origin\", \"\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder mat-select-min-line\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\", \"mat-select-min-line\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [\"class\", \"mat-select-min-line\", 4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-min-line\"], [1, \"mat-select-panel-wrap\"], [\"role\", \"listbox\", \"tabindex\", \"-1\", 3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]], template: function MatSelect_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() { return ctx.toggle(); });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n        ɵngcc0.ɵɵelement(7, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 14, \"ng-template\", 7);\n        ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() { return ctx.close(); })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() { return ctx._onAttached(); })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() { return ctx.close(); });\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵattribute(\"aria-owns\", ctx.panelOpen ? ctx.id + \"-panel\" : null);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n        ɵngcc0.ɵɵattribute(\"id\", ctx._valueId);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayPanelClass\", ctx._overlayPanelClass)(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    } }, directives: [ɵngcc7.CdkOverlayOrigin, ɵngcc8.NgSwitch, ɵngcc8.NgSwitchCase, ɵngcc7.CdkConnectedOverlay, ɵngcc8.NgSwitchDefault, ɵngcc8.NgClass], styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px}\\n\"], encapsulation: 2, data: { animation: [\n            matSelectAnimations.transformPanelWrap,\n            matSelectAnimations.transformPanel\n        ] }, changeDetection: 0 });\nMatSelect.propDecorators = {\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\n    customTrigger: [{ type: ContentChild, args: [MAT_SELECT_TRIGGER,] }]\n};\nconst ɵMatSelect_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatSelect);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelect, [{\n        type: Component,\n        args: [{\n                selector: 'mat-select',\n                exportAs: 'matSelect',\n                template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'role': 'combobox',\n                    'aria-autocomplete': 'none',\n                    // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n                    // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n                    // value. At some point we should try to switch it back to being `listbox`.\n                    'aria-haspopup': 'true',\n                    'class': 'mat-select',\n                    '[attr.id]': 'id',\n                    '[attr.tabindex]': 'tabIndex',\n                    '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                    '[attr.aria-expanded]': 'panelOpen',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                    '[class.mat-select-disabled]': 'disabled',\n                    '[class.mat-select-invalid]': 'errorState',\n                    '[class.mat-select-required]': 'required',\n                    '[class.mat-select-empty]': 'empty',\n                    '[class.mat-select-multiple]': 'multiple',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()'\n                },\n                animations: [\n                    matSelectAnimations.transformPanelWrap,\n                    matSelectAnimations.transformPanel\n                ],\n                providers: [\n                    { provide: MatFormFieldControl, useExisting: MatSelect },\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n                ],\n                styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px}\\n\"]\n            }]\n    }], null, { options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MAT_OPTGROUP, { descendants: true }]\n        }], customTrigger: [{\n            type: ContentChild,\n            args: [MAT_SELECT_TRIGGER]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵfac = function MatSelectModule_Factory(t) { return new (t || MatSelectModule)(); };\nMatSelectModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSelectModule });\nMatSelectModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [[\n            CommonModule,\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n        ], CdkScrollableModule,\n        MatFormFieldModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, { declarations: function () { return [MatSelect, MatSelectTrigger]; }, imports: function () { return [CommonModule,\n        OverlayModule,\n        MatOptionModule,\n        MatCommonModule]; }, exports: function () { return [CdkScrollableModule,\n        MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule,\n        MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    MatFormFieldModule,\n                    MatSelect,\n                    MatSelectTrigger,\n                    MatOptionModule,\n                    MatCommonModule\n                ],\n                declarations: [MatSelect, MatSelectTrigger],\n                providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, _MatSelectBase, matSelectAnimations };\n\n//# sourceMappingURL=select.js.map"]},"metadata":{},"sourceType":"module"}