{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar helpers_1 = require(\"./helpers\");\n/**\n * Selects an observable from the store, and attaches it to the decorated\n * property.\n *\n * ```ts\n *  import { select } from '@angular-redux/store';\n *\n *  class SomeClass {\n *    @select(['foo','bar']) foo$: Observable<string>\n * }\n * ```\n *\n * @param selector\n * A selector function, property name string, or property name path\n * (array of strings/array indices) that locates the store data to be\n * selected\n *\n * @param comparator Function used to determine if this selector has changed.\n */\n\n\nfunction select(selector, comparator) {\n  return function (target, key) {\n    var adjustedSelector = selector ? selector : String(key).lastIndexOf('$') === String(key).length - 1 ? String(key).substring(0, String(key).length - 1) : key;\n    decorate(adjustedSelector, undefined, comparator)(target, key);\n  };\n}\n\nexports.select = select;\n/**\n * Selects an observable using the given path selector, and runs it through the\n * given transformer function. A transformer function takes the store\n * observable as an input and returns a derived observable from it. That derived\n *  observable is run through distinctUntilChanges with the given optional\n * comparator and attached to the store property.\n *\n * Think of a Transformer as a FunctionSelector that operates on observables\n * instead of values.\n *\n * ```ts\n * import { select$ } from 'angular-redux/store';\n *\n * export const debounceAndTriple = obs$ => obs$\n *  .debounce(300)\n *  .map(x => 3 * x);\n *\n * class Foo {\n *  @select$(['foo', 'bar'], debounceAndTriple)\n *  readonly debouncedFooBar$: Observable<number>;\n * }\n * ```\n */\n\nfunction select$(selector, transformer, comparator) {\n  return decorate(selector, transformer, comparator);\n}\n\nexports.select$ = select$;\n\nfunction decorate(selector, transformer, comparator) {\n  return function decorator(target, key) {\n    function getter() {\n      return helpers_1.getInstanceSelection(this, key, selector, transformer, comparator);\n    } // Replace decorated property with a getter that returns the observable.\n\n\n    if (delete target[key]) {\n      Object.defineProperty(target, key, {\n        get: getter,\n        enumerable: true,\n        configurable: true\n      });\n    }\n  };\n} //# sourceMappingURL=select.js.map","map":{"version":3,"sources":["/Users/mohammedelmourabit/xrp/xpr/node_modules/@angular-redux/store/__ivy_ngcc__/lib/src/decorators/select.js"],"names":["Object","defineProperty","exports","value","helpers_1","require","select","selector","comparator","target","key","adjustedSelector","String","lastIndexOf","length","substring","decorate","undefined","select$","transformer","decorator","getter","getInstanceSelection","get","enumerable","configurable"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,MAAT,CAAgBC,QAAhB,EAA0BC,UAA1B,EAAsC;AAClC,SAAO,UAAUC,MAAV,EAAkBC,GAAlB,EAAuB;AAC1B,QAAIC,gBAAgB,GAAGJ,QAAQ,GACzBA,QADyB,GAEzBK,MAAM,CAACF,GAAD,CAAN,CAAYG,WAAZ,CAAwB,GAAxB,MAAiCD,MAAM,CAACF,GAAD,CAAN,CAAYI,MAAZ,GAAqB,CAAtD,GACIF,MAAM,CAACF,GAAD,CAAN,CAAYK,SAAZ,CAAsB,CAAtB,EAAyBH,MAAM,CAACF,GAAD,CAAN,CAAYI,MAAZ,GAAqB,CAA9C,CADJ,GAEIJ,GAJV;AAKAM,IAAAA,QAAQ,CAACL,gBAAD,EAAmBM,SAAnB,EAA8BT,UAA9B,CAAR,CAAkDC,MAAlD,EAA0DC,GAA1D;AACH,GAPD;AAQH;;AACDR,OAAO,CAACI,MAAR,GAAiBA,MAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASY,OAAT,CAAiBX,QAAjB,EAA2BY,WAA3B,EAAwCX,UAAxC,EAAoD;AAChD,SAAOQ,QAAQ,CAACT,QAAD,EAAWY,WAAX,EAAwBX,UAAxB,CAAf;AACH;;AACDN,OAAO,CAACgB,OAAR,GAAkBA,OAAlB;;AACA,SAASF,QAAT,CAAkBT,QAAlB,EAA4BY,WAA5B,EAAyCX,UAAzC,EAAqD;AACjD,SAAO,SAASY,SAAT,CAAmBX,MAAnB,EAA2BC,GAA3B,EAAgC;AACnC,aAASW,MAAT,GAAkB;AACd,aAAOjB,SAAS,CAACkB,oBAAV,CAA+B,IAA/B,EAAqCZ,GAArC,EAA0CH,QAA1C,EAAoDY,WAApD,EAAiEX,UAAjE,CAAP;AACH,KAHkC,CAInC;;;AACA,QAAI,OAAOC,MAAM,CAACC,GAAD,CAAjB,EAAwB;AACpBV,MAAAA,MAAM,CAACC,cAAP,CAAsBQ,MAAtB,EAA8BC,GAA9B,EAAmC;AAC/Ba,QAAAA,GAAG,EAAEF,MAD0B;AAE/BG,QAAAA,UAAU,EAAE,IAFmB;AAG/BC,QAAAA,YAAY,EAAE;AAHiB,OAAnC;AAKH;AACJ,GAZD;AAaH,C,CACD","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar helpers_1 = require(\"./helpers\");\n/**\n * Selects an observable from the store, and attaches it to the decorated\n * property.\n *\n * ```ts\n *  import { select } from '@angular-redux/store';\n *\n *  class SomeClass {\n *    @select(['foo','bar']) foo$: Observable<string>\n * }\n * ```\n *\n * @param selector\n * A selector function, property name string, or property name path\n * (array of strings/array indices) that locates the store data to be\n * selected\n *\n * @param comparator Function used to determine if this selector has changed.\n */\nfunction select(selector, comparator) {\n    return function (target, key) {\n        var adjustedSelector = selector\n            ? selector\n            : String(key).lastIndexOf('$') === String(key).length - 1\n                ? String(key).substring(0, String(key).length - 1)\n                : key;\n        decorate(adjustedSelector, undefined, comparator)(target, key);\n    };\n}\nexports.select = select;\n/**\n * Selects an observable using the given path selector, and runs it through the\n * given transformer function. A transformer function takes the store\n * observable as an input and returns a derived observable from it. That derived\n *  observable is run through distinctUntilChanges with the given optional\n * comparator and attached to the store property.\n *\n * Think of a Transformer as a FunctionSelector that operates on observables\n * instead of values.\n *\n * ```ts\n * import { select$ } from 'angular-redux/store';\n *\n * export const debounceAndTriple = obs$ => obs$\n *  .debounce(300)\n *  .map(x => 3 * x);\n *\n * class Foo {\n *  @select$(['foo', 'bar'], debounceAndTriple)\n *  readonly debouncedFooBar$: Observable<number>;\n * }\n * ```\n */\nfunction select$(selector, transformer, comparator) {\n    return decorate(selector, transformer, comparator);\n}\nexports.select$ = select$;\nfunction decorate(selector, transformer, comparator) {\n    return function decorator(target, key) {\n        function getter() {\n            return helpers_1.getInstanceSelection(this, key, selector, transformer, comparator);\n        }\n        // Replace decorated property with a getter that returns the observable.\n        if (delete target[key]) {\n            Object.defineProperty(target, key, {\n                get: getter,\n                enumerable: true,\n                configurable: true,\n            });\n        }\n    };\n}\n//# sourceMappingURL=select.js.map"]},"metadata":{},"sourceType":"script"}