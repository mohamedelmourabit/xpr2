{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Gets a deeply-nested property value from an object, given a 'path'\n * of property names or array indices.\n *\n * @hidden\n */\n\nfunction getIn(v, pathElems) {\n  if (!v) {\n    return v;\n  } // If this is an ImmutableJS structure, use existing getIn function\n\n\n  if ('function' === typeof v.getIn) {\n    return v.getIn(pathElems);\n  }\n\n  var firstElem = pathElems[0],\n      restElems = pathElems.slice(1);\n\n  if (undefined === v[firstElem]) {\n    return undefined;\n  }\n\n  if (restElems.length === 0) {\n    return v[firstElem];\n  }\n\n  return getIn(v[firstElem], restElems);\n}\n\nexports.getIn = getIn; //# sourceMappingURL=get-in.js.map","map":{"version":3,"sources":["/Users/mohammedelmourabit/xrp/xpr/node_modules/@angular-redux/store/__ivy_ngcc__/lib/src/utils/get-in.js"],"names":["Object","defineProperty","exports","value","getIn","v","pathElems","firstElem","restElems","slice","undefined","length"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,KAAT,CAAeC,CAAf,EAAkBC,SAAlB,EAA6B;AACzB,MAAI,CAACD,CAAL,EAAQ;AACJ,WAAOA,CAAP;AACH,GAHwB,CAIzB;;;AACA,MAAI,eAAe,OAAOA,CAAC,CAACD,KAA5B,EAAmC;AAC/B,WAAOC,CAAC,CAACD,KAAF,CAAQE,SAAR,CAAP;AACH;;AACD,MAAIC,SAAS,GAAGD,SAAS,CAAC,CAAD,CAAzB;AAAA,MAA8BE,SAAS,GAAGF,SAAS,CAACG,KAAV,CAAgB,CAAhB,CAA1C;;AACA,MAAIC,SAAS,KAAKL,CAAC,CAACE,SAAD,CAAnB,EAAgC;AAC5B,WAAOG,SAAP;AACH;;AACD,MAAIF,SAAS,CAACG,MAAV,KAAqB,CAAzB,EAA4B;AACxB,WAAON,CAAC,CAACE,SAAD,CAAR;AACH;;AACD,SAAOH,KAAK,CAACC,CAAC,CAACE,SAAD,CAAF,EAAeC,SAAf,CAAZ;AACH;;AACDN,OAAO,CAACE,KAAR,GAAgBA,KAAhB,C,CACA","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Gets a deeply-nested property value from an object, given a 'path'\n * of property names or array indices.\n *\n * @hidden\n */\nfunction getIn(v, pathElems) {\n    if (!v) {\n        return v;\n    }\n    // If this is an ImmutableJS structure, use existing getIn function\n    if ('function' === typeof v.getIn) {\n        return v.getIn(pathElems);\n    }\n    var firstElem = pathElems[0], restElems = pathElems.slice(1);\n    if (undefined === v[firstElem]) {\n        return undefined;\n    }\n    if (restElems.length === 0) {\n        return v[firstElem];\n    }\n    return getIn(v[firstElem], restElems);\n}\nexports.getIn = getIn;\n//# sourceMappingURL=get-in.js.map"]},"metadata":{},"sourceType":"script"}