{"ast":null,"code":"import _createClass from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, NgZone, Attribute, Optional, Inject, Input, Output, ViewChild, Directive, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token to be used to override the default options for `mat-checkbox`. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\nvar _c0 = [\"input\"];\n\nvar _c1 = function _c1() {\n  return {\n    enterDuration: 150\n  };\n};\n\nvar _c2 = [\"*\"];\nvar MAT_CHECKBOX_DEFAULT_OPTIONS = new InjectionToken('mat-checkbox-default-options', {\n  providedIn: 'root',\n  factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    color: 'accent',\n    clickAction: 'check-indeterminate'\n  };\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for checkbox components.\n\n\nvar nextUniqueId = 0; // Default checkbox configuration.\n\nvar defaults = MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY();\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\n\nvar MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return MatCheckbox;\n  }),\n  multi: true\n};\n/** Change event object emitted by MatCheckbox. */\n\nvar MatCheckboxChange = function MatCheckboxChange() {\n  _classCallCheck(this, MatCheckboxChange);\n}; // Boilerplate for applying mixins to MatCheckbox.\n\n/** @docs-private */\n\n\nvar MatCheckboxBase = function MatCheckboxBase(_elementRef) {\n  _classCallCheck(this, MatCheckboxBase);\n\n  this._elementRef = _elementRef;\n};\n\nvar _MatCheckboxMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase))));\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n\n\nvar MatCheckbox = /*#__PURE__*/function (_MatCheckboxMixinBase2) {\n  _inherits(MatCheckbox, _MatCheckboxMixinBase2);\n\n  var _super = _createSuper(MatCheckbox);\n\n  function MatCheckbox(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, _animationMode, _options) {\n    var _this;\n\n    _classCallCheck(this, MatCheckbox);\n\n    _this = _super.call(this, elementRef);\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this._focusMonitor = _focusMonitor;\n    _this._ngZone = _ngZone;\n    _this._animationMode = _animationMode;\n    _this._options = _options;\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n     * take precedence so this may be omitted.\n     */\n\n    _this.ariaLabel = '';\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n\n    _this.ariaLabelledby = null;\n    _this._uniqueId = \"mat-checkbox-\".concat(++nextUniqueId);\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n\n    _this.id = _this._uniqueId;\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n\n    _this.labelPosition = 'after';\n    /** Name value will be applied to the input element if present */\n\n    _this.name = null;\n    /** Event emitted when the checkbox's `checked` value changes. */\n\n    _this.change = new EventEmitter();\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n\n    _this.indeterminateChange = new EventEmitter();\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n\n    _this._onTouched = function () {};\n\n    _this._currentAnimationClass = '';\n    _this._currentCheckState = 0\n    /* Init */\n    ;\n\n    _this._controlValueAccessorChangeFn = function () {};\n\n    _this._checked = false;\n    _this._disabled = false;\n    _this._indeterminate = false;\n    _this._options = _this._options || defaults;\n    _this.color = _this.defaultColor = _this._options.color || defaults.color;\n    _this.tabIndex = parseInt(tabIndex) || 0;\n    return _this;\n  }\n  /** Returns the unique id for the visual hidden input. */\n\n\n  _createClass(MatCheckbox, [{\n    key: \"inputId\",\n    get: function get() {\n      return \"\".concat(this.id || this._uniqueId, \"-input\");\n    }\n    /** Whether the checkbox is required. */\n\n  }, {\n    key: \"required\",\n    get: function get() {\n      return this._required;\n    },\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this2 = this;\n\n      this._focusMonitor.monitor(this._elementRef, true).subscribe(function (focusOrigin) {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state change\n          // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n          // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n          // telling the form control it has been touched until the next tick.\n          Promise.resolve().then(function () {\n            _this2._onTouched();\n\n            _this2._changeDetectorRef.markForCheck();\n          });\n        }\n      });\n\n      this._syncIndeterminate(this._indeterminate);\n    } // TODO: Delete next major revision.\n\n  }, {\n    key: \"ngAfterViewChecked\",\n    value: function ngAfterViewChecked() {}\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Whether the checkbox is checked.\n     */\n\n  }, {\n    key: \"checked\",\n    get: function get() {\n      return this._checked;\n    },\n    set: function set(value) {\n      if (value != this.checked) {\n        this._checked = value;\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled;\n    },\n    set: function set(value) {\n      var newValue = coerceBooleanProperty(value);\n\n      if (newValue !== this.disabled) {\n        this._disabled = newValue;\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n\n  }, {\n    key: \"indeterminate\",\n    get: function get() {\n      return this._indeterminate;\n    },\n    set: function set(value) {\n      var changed = value != this._indeterminate;\n      this._indeterminate = coerceBooleanProperty(value);\n\n      if (changed) {\n        if (this._indeterminate) {\n          this._transitionCheckState(3\n          /* Indeterminate */\n          );\n        } else {\n          this._transitionCheckState(this.checked ? 1\n          /* Checked */\n          : 2\n          /* Unchecked */\n          );\n        }\n\n        this.indeterminateChange.emit(this._indeterminate);\n      }\n\n      this._syncIndeterminate(this._indeterminate);\n    }\n  }, {\n    key: \"_isRippleDisabled\",\n    value: function _isRippleDisabled() {\n      return this.disableRipple || this.disabled;\n    }\n    /** Method being called whenever the label text changes. */\n\n  }, {\n    key: \"_onLabelTextChange\",\n    value: function _onLabelTextChange() {\n      // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n      // component will be only marked for check, but no actual change detection runs automatically.\n      // Instead of going back into the zone in order to trigger a change detection which causes\n      // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n      // an explicit change detection for the checkbox view and its children.\n      this._changeDetectorRef.detectChanges();\n    } // Implemented as part of ControlValueAccessor.\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.checked = !!value;\n    } // Implemented as part of ControlValueAccessor.\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._controlValueAccessorChangeFn = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n  }, {\n    key: \"_getAriaChecked\",\n    value: function _getAriaChecked() {\n      if (this.checked) {\n        return 'true';\n      }\n\n      return this.indeterminate ? 'mixed' : 'false';\n    }\n  }, {\n    key: \"_transitionCheckState\",\n    value: function _transitionCheckState(newState) {\n      var oldState = this._currentCheckState;\n      var element = this._elementRef.nativeElement;\n\n      if (oldState === newState) {\n        return;\n      }\n\n      if (this._currentAnimationClass.length > 0) {\n        element.classList.remove(this._currentAnimationClass);\n      }\n\n      this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n      this._currentCheckState = newState;\n\n      if (this._currentAnimationClass.length > 0) {\n        element.classList.add(this._currentAnimationClass); // Remove the animation class to avoid animation when the checkbox is moved between containers\n\n        var animationClass = this._currentAnimationClass;\n\n        this._ngZone.runOutsideAngular(function () {\n          setTimeout(function () {\n            element.classList.remove(animationClass);\n          }, 1000);\n        });\n      }\n    }\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent() {\n      var event = new MatCheckboxChange();\n      event.source = this;\n      event.checked = this.checked;\n\n      this._controlValueAccessorChangeFn(this.checked);\n\n      this.change.emit(event);\n    }\n    /** Toggles the `checked` state of the checkbox. */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this.checked = !this.checked;\n    }\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n\n  }, {\n    key: \"_onInputClick\",\n    value: function _onInputClick(event) {\n      var _this3 = this;\n\n      var _a;\n\n      var clickAction = (_a = this._options) === null || _a === void 0 ? void 0 : _a.clickAction; // We have to stop propagation for click events on the visual hidden input element.\n      // By default, when a user clicks on a label element, a generated click event will be\n      // dispatched on the associated input element. Since we are using a label element as our\n      // root container, the click event on the `checkbox` will be executed twice.\n      // The real click event will bubble up, and the generated click event also tries to bubble up.\n      // This will lead to multiple click events.\n      // Preventing bubbling for the second event will solve that issue.\n\n      event.stopPropagation(); // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n\n      if (!this.disabled && clickAction !== 'noop') {\n        // When user manually click on the checkbox, `indeterminate` is set to false.\n        if (this.indeterminate && clickAction !== 'check') {\n          Promise.resolve().then(function () {\n            _this3._indeterminate = false;\n\n            _this3.indeterminateChange.emit(_this3._indeterminate);\n          });\n        }\n\n        this.toggle();\n\n        this._transitionCheckState(this._checked ? 1\n        /* Checked */\n        : 2\n        /* Unchecked */\n        ); // Emit our custom change event if the native input emitted one.\n        // It is important to only emit it, if the native input triggered one, because\n        // we don't want to trigger a change event, when the `checked` variable changes for example.\n\n\n        this._emitChangeEvent();\n      } else if (!this.disabled && clickAction === 'noop') {\n        // Reset native input when clicked with noop. The native checkbox becomes checked after\n        // click, reset it to be align with `checked` value of `mat-checkbox`.\n        this._inputElement.nativeElement.checked = this.checked;\n        this._inputElement.nativeElement.indeterminate = this.indeterminate;\n      }\n    }\n    /** Focuses the checkbox. */\n\n  }, {\n    key: \"focus\",\n    value: function focus(origin, options) {\n      if (origin) {\n        this._focusMonitor.focusVia(this._inputElement, origin, options);\n      } else {\n        this._inputElement.nativeElement.focus(options);\n      }\n    }\n  }, {\n    key: \"_onInteractionEvent\",\n    value: function _onInteractionEvent(event) {\n      // We always have to stop propagation on the change event.\n      // Otherwise the change event, from the input element, will bubble up and\n      // emit its event object to the `change` output.\n      event.stopPropagation();\n    }\n  }, {\n    key: \"_getAnimationClassForCheckStateTransition\",\n    value: function _getAnimationClassForCheckStateTransition(oldState, newState) {\n      // Don't transition if animations are disabled.\n      if (this._animationMode === 'NoopAnimations') {\n        return '';\n      }\n\n      var animSuffix = '';\n\n      switch (oldState) {\n        case 0\n        /* Init */\n        :\n          // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n          // [checked] bound to it.\n          if (newState === 1\n          /* Checked */\n          ) {\n              animSuffix = 'unchecked-checked';\n            } else if (newState == 3\n          /* Indeterminate */\n          ) {\n              animSuffix = 'unchecked-indeterminate';\n            } else {\n            return '';\n          }\n\n          break;\n\n        case 2\n        /* Unchecked */\n        :\n          animSuffix = newState === 1\n          /* Checked */\n          ? 'unchecked-checked' : 'unchecked-indeterminate';\n          break;\n\n        case 1\n        /* Checked */\n        :\n          animSuffix = newState === 2\n          /* Unchecked */\n          ? 'checked-unchecked' : 'checked-indeterminate';\n          break;\n\n        case 3\n        /* Indeterminate */\n        :\n          animSuffix = newState === 1\n          /* Checked */\n          ? 'indeterminate-checked' : 'indeterminate-unchecked';\n          break;\n      }\n\n      return \"mat-checkbox-anim-\".concat(animSuffix);\n    }\n    /**\n     * Syncs the indeterminate value with the checkbox DOM node.\n     *\n     * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n     * property is supported on an element boils down to `if (propName in element)`. Domino's\n     * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n     * server-side rendering.\n     */\n\n  }, {\n    key: \"_syncIndeterminate\",\n    value: function _syncIndeterminate(value) {\n      var nativeCheckbox = this._inputElement;\n\n      if (nativeCheckbox) {\n        nativeCheckbox.nativeElement.indeterminate = value;\n      }\n    }\n  }]);\n\n  return MatCheckbox;\n}(_MatCheckboxMixinBase);\n\nMatCheckbox.ɵfac = function MatCheckbox_Factory(t) {\n  return new (t || MatCheckbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_CHECKBOX_DEFAULT_OPTIONS, 8));\n};\n\nMatCheckbox.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatCheckbox,\n  selectors: [[\"mat-checkbox\"]],\n  viewQuery: function MatCheckbox_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 1);\n      ɵngcc0.ɵɵviewQuery(MatRipple, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ripple = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-checkbox\"],\n  hostVars: 12,\n  hostBindings: function MatCheckbox_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      ɵngcc0.ɵɵattribute(\"tabindex\", null);\n      ɵngcc0.ɵɵclassProp(\"mat-checkbox-indeterminate\", ctx.indeterminate)(\"mat-checkbox-checked\", ctx.checked)(\"mat-checkbox-disabled\", ctx.disabled)(\"mat-checkbox-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    }\n  },\n  inputs: {\n    disableRipple: \"disableRipple\",\n    color: \"color\",\n    tabIndex: \"tabIndex\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    id: \"id\",\n    labelPosition: \"labelPosition\",\n    name: \"name\",\n    required: \"required\",\n    checked: \"checked\",\n    disabled: \"disabled\",\n    indeterminate: \"indeterminate\",\n    ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"],\n    value: \"value\"\n  },\n  outputs: {\n    change: \"change\",\n    indeterminateChange: \"indeterminateChange\"\n  },\n  exportAs: [\"matCheckbox\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c2,\n  decls: 17,\n  vars: 20,\n  consts: [[1, \"mat-checkbox-layout\"], [\"label\", \"\"], [1, \"mat-checkbox-inner-container\"], [\"type\", \"checkbox\", 1, \"mat-checkbox-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"checked\", \"disabled\", \"tabIndex\", \"change\", \"click\"], [\"input\", \"\"], [\"matRipple\", \"\", 1, \"mat-checkbox-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleRadius\", \"matRippleCentered\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-checkbox-persistent-ripple\"], [1, \"mat-checkbox-frame\"], [1, \"mat-checkbox-background\"], [\"version\", \"1.1\", \"focusable\", \"false\", \"viewBox\", \"0 0 24 24\", 0, \"xml\", \"space\", \"preserve\", 1, \"mat-checkbox-checkmark\"], [\"fill\", \"none\", \"stroke\", \"white\", \"d\", \"M4.1,12.7 9,17.6 20.3,6.3\", 1, \"mat-checkbox-checkmark-path\"], [1, \"mat-checkbox-mixedmark\"], [1, \"mat-checkbox-label\", 3, \"cdkObserveContent\"], [\"checkboxLabel\", \"\"], [2, \"display\", \"none\"]],\n  template: function MatCheckbox_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n      ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n      ɵngcc0.ɵɵelementStart(3, \"input\", 3, 4);\n      ɵngcc0.ɵɵlistener(\"change\", function MatCheckbox_Template_input_change_3_listener($event) {\n        return ctx._onInteractionEvent($event);\n      })(\"click\", function MatCheckbox_Template_input_click_3_listener($event) {\n        return ctx._onInputClick($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(5, \"span\", 5);\n      ɵngcc0.ɵɵelement(6, \"span\", 6);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(7, \"span\", 7);\n      ɵngcc0.ɵɵelementStart(8, \"span\", 8);\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(9, \"svg\", 9);\n      ɵngcc0.ɵɵelement(10, \"path\", 10);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵnamespaceHTML();\n      ɵngcc0.ɵɵelement(11, \"span\", 11);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(12, \"span\", 12, 13);\n      ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatCheckbox_Template_span_cdkObserveContent_12_listener() {\n        return ctx._onLabelTextChange();\n      });\n      ɵngcc0.ɵɵelementStart(14, \"span\", 14);\n      ɵngcc0.ɵɵtext(15, \"\\xA0\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(16);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      var _r0 = ɵngcc0.ɵɵreference(1);\n\n      var _r2 = ɵngcc0.ɵɵreference(13);\n\n      ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵclassProp(\"mat-checkbox-inner-container-no-side-margin\", !_r2.textContent || !_r2.textContent.trim());\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex);\n      ɵngcc0.ɵɵattribute(\"value\", ctx.value)(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel || null)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-checked\", ctx._getAriaChecked())(\"aria-describedby\", ctx.ariaDescribedby);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleRadius\", 20)(\"matRippleCentered\", true)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(19, _c1));\n    }\n  },\n  directives: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent],\n  styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{display:inline-block;transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.cdk-high-contrast-active .mat-checkbox.cdk-keyboard-focused .mat-checkbox-frame{border-style:dotted}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{display:block;width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nMatCheckbox.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: FocusMonitor\n  }, {\n    type: NgZone\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_CHECKBOX_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\nMatCheckbox.propDecorators = {\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  ariaDescribedby: [{\n    type: Input,\n    args: ['aria-describedby']\n  }],\n  id: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  labelPosition: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  indeterminateChange: [{\n    type: Output\n  }],\n  value: [{\n    type: Input\n  }],\n  _inputElement: [{\n    type: ViewChild,\n    args: ['input']\n  }],\n  ripple: [{\n    type: ViewChild,\n    args: [MatRipple]\n  }],\n  checked: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  indeterminate: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCheckbox, [{\n    type: Component,\n    args: [{\n      selector: 'mat-checkbox',\n      template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label>\\n  <span class=\\\"mat-checkbox-inner-container\\\"\\n       [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\">\\n    <input #input\\n           class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [checked]=\\\"checked\\\"\\n           [attr.value]=\\\"value\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n    <span matRipple class=\\\"mat-checkbox-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n      <span class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></span>\\n    </span>\\n    <span class=\\\"mat-checkbox-frame\\\"></span>\\n    <span class=\\\"mat-checkbox-background\\\">\\n      <svg version=\\\"1.1\\\"\\n           focusable=\\\"false\\\"\\n           class=\\\"mat-checkbox-checkmark\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           xml:space=\\\"preserve\\\">\\n        <path class=\\\"mat-checkbox-checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              stroke=\\\"white\\\"\\n              d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/>\\n      </svg>\\n      <!-- Element for rendering the indeterminate state checkbox. -->\\n      <span class=\\\"mat-checkbox-mixedmark\\\"></span>\\n    </span>\\n  </span>\\n  <span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n      exportAs: 'matCheckbox',\n      host: {\n        'class': 'mat-checkbox',\n        '[id]': 'id',\n        '[attr.tabindex]': 'null',\n        '[class.mat-checkbox-indeterminate]': 'indeterminate',\n        '[class.mat-checkbox-checked]': 'checked',\n        '[class.mat-checkbox-disabled]': 'disabled',\n        '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n        '[class._mat-animation-noopable]': \"_animationMode === 'NoopAnimations'\"\n      },\n      providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n      inputs: ['disableRipple', 'color', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{display:inline-block;transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.cdk-high-contrast-active .mat-checkbox.cdk-keyboard-focused .mat-checkbox-frame{border-style:dotted}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{display:block;width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_CHECKBOX_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    id: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    change: [{\n      type: Output\n    }],\n    indeterminateChange: [{\n      type: Output\n    }],\n    required: [{\n      type: Input\n    }],\n    checked: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    indeterminate: [{\n      type: Input\n    }],\n    ariaDescribedby: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    value: [{\n      type: Input\n    }],\n    _inputElement: [{\n      type: ViewChild,\n      args: ['input']\n    }],\n    ripple: [{\n      type: ViewChild,\n      args: [MatRipple]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return MatCheckboxRequiredValidator;\n  }),\n  multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n\nvar MatCheckboxRequiredValidator = /*#__PURE__*/function (_CheckboxRequiredVali) {\n  _inherits(MatCheckboxRequiredValidator, _CheckboxRequiredVali);\n\n  var _super2 = _createSuper(MatCheckboxRequiredValidator);\n\n  function MatCheckboxRequiredValidator() {\n    _classCallCheck(this, MatCheckboxRequiredValidator);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return MatCheckboxRequiredValidator;\n}(CheckboxRequiredValidator);\n\nMatCheckboxRequiredValidator.ɵfac = function MatCheckboxRequiredValidator_Factory(t) {\n  return ɵMatCheckboxRequiredValidator_BaseFactory(t || MatCheckboxRequiredValidator);\n};\n\nMatCheckboxRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatCheckboxRequiredValidator,\n  selectors: [[\"mat-checkbox\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"formControl\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"ngModel\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵMatCheckboxRequiredValidator_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatCheckboxRequiredValidator);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCheckboxRequiredValidator, [{\n    type: Directive,\n    args: [{\n      selector: \"mat-checkbox[required][formControlName],\\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]\",\n      providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n\n\nvar _MatCheckboxRequiredValidatorModule = function _MatCheckboxRequiredValidatorModule() {\n  _classCallCheck(this, _MatCheckboxRequiredValidatorModule);\n};\n\n_MatCheckboxRequiredValidatorModule.ɵfac = function _MatCheckboxRequiredValidatorModule_Factory(t) {\n  return new (t || _MatCheckboxRequiredValidatorModule)();\n};\n\n_MatCheckboxRequiredValidatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: _MatCheckboxRequiredValidatorModule\n});\n_MatCheckboxRequiredValidatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatCheckboxRequiredValidatorModule, {\n    declarations: [MatCheckboxRequiredValidator],\n    exports: [MatCheckboxRequiredValidator]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatCheckboxRequiredValidatorModule, [{\n    type: NgModule,\n    args: [{\n      exports: [MatCheckboxRequiredValidator],\n      declarations: [MatCheckboxRequiredValidator]\n    }]\n  }], null, null);\n})();\n\nvar MatCheckboxModule = function MatCheckboxModule() {\n  _classCallCheck(this, MatCheckboxModule);\n};\n\nMatCheckboxModule.ɵfac = function MatCheckboxModule_Factory(t) {\n  return new (t || MatCheckboxModule)();\n};\n\nMatCheckboxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatCheckboxModule\n});\nMatCheckboxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  imports: [[MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule], MatCommonModule, _MatCheckboxRequiredValidatorModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatCheckboxModule, {\n    declarations: function declarations() {\n      return [MatCheckbox];\n    },\n    imports: function imports() {\n      return [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule];\n    },\n    exports: function exports() {\n      return [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCheckboxModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule],\n      exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n      declarations: [MatCheckbox]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, MAT_CHECKBOX_DEFAULT_OPTIONS, MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckbox, MatCheckboxChange, MatCheckboxModule, MatCheckboxRequiredValidator, _MatCheckboxRequiredValidatorModule }; //# sourceMappingURL=checkbox.js.map","map":{"version":3,"sources":["/Users/mohammedelmourabit/xrp/xpr/node_modules/@angular/material/__ivy_ngcc__/fesm2015/checkbox.js"],"names":["FocusMonitor","coerceBooleanProperty","InjectionToken","forwardRef","EventEmitter","Component","ViewEncapsulation","ChangeDetectionStrategy","ElementRef","ChangeDetectorRef","NgZone","Attribute","Optional","Inject","Input","Output","ViewChild","Directive","NgModule","NG_VALUE_ACCESSOR","NG_VALIDATORS","CheckboxRequiredValidator","mixinTabIndex","mixinColor","mixinDisableRipple","mixinDisabled","MatRipple","MatRippleModule","MatCommonModule","ANIMATION_MODULE_TYPE","ObserversModule","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","_c0","_c1","enterDuration","_c2","MAT_CHECKBOX_DEFAULT_OPTIONS","providedIn","factory","MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY","color","clickAction","nextUniqueId","defaults","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatCheckbox","multi","MatCheckboxChange","MatCheckboxBase","_elementRef","_MatCheckboxMixinBase","elementRef","_changeDetectorRef","_focusMonitor","_ngZone","tabIndex","_animationMode","_options","ariaLabel","ariaLabelledby","_uniqueId","id","labelPosition","name","change","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","_controlValueAccessorChangeFn","_checked","_disabled","_indeterminate","defaultColor","parseInt","_required","value","monitor","subscribe","focusOrigin","Promise","resolve","then","markForCheck","_syncIndeterminate","stopMonitoring","checked","newValue","disabled","changed","_transitionCheckState","emit","disableRipple","detectChanges","fn","isDisabled","indeterminate","newState","oldState","element","nativeElement","length","classList","remove","_getAnimationClassForCheckStateTransition","add","animationClass","runOutsideAngular","setTimeout","event","source","_a","stopPropagation","toggle","_emitChangeEvent","_inputElement","origin","options","focusVia","focus","animSuffix","nativeCheckbox","ɵfac","MatCheckbox_Factory","t","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","MatCheckbox_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","ripple","hostAttrs","hostVars","hostBindings","MatCheckbox_HostBindings","ɵɵhostProperty","ɵɵattribute","ɵɵclassProp","inputs","required","ariaDescribedby","outputs","exportAs","features","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","consts","template","MatCheckbox_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵlistener","MatCheckbox_Template_input_change_3_listener","$event","_onInteractionEvent","MatCheckbox_Template_input_click_3_listener","_onInputClick","ɵɵelementEnd","ɵɵelement","ɵɵnamespaceSVG","ɵɵnamespaceHTML","MatCheckbox_Template_span_cdkObserveContent_12_listener","_onLabelTextChange","ɵɵtext","ɵɵprojection","_r0","ɵɵreference","_r2","inputId","ɵɵadvance","textContent","trim","ɵɵproperty","_getAriaChecked","_isRippleDisabled","ɵɵpureFunction0","directives","CdkObserveContent","styles","encapsulation","changeDetection","ctorParameters","String","decorators","args","undefined","propDecorators","ngDevMode","ɵsetClassMetadata","selector","host","providers","None","OnPush","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","MatCheckboxRequiredValidator_Factory","ɵMatCheckboxRequiredValidator_BaseFactory","ɵdir","ɵɵdefineDirective","ɵɵgetInheritedFactory","_MatCheckboxRequiredValidatorModule","_MatCheckboxRequiredValidatorModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","ngJitMode","ɵɵsetNgModuleScope","declarations","exports","MatCheckboxModule","MatCheckboxModule_Factory","imports"],"mappings":"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","sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, NgZone, Attribute, Optional, Inject, Input, Output, ViewChild, Directive, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-checkbox`. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\n\nconst _c0 = [\"input\"];\nconst _c1 = function () { return { enterDuration: 150 }; };\nconst _c2 = [\"*\"];\nconst MAT_CHECKBOX_DEFAULT_OPTIONS = new InjectionToken('mat-checkbox-default-options', {\n    providedIn: 'root',\n    factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent',\n        clickAction: 'check-indeterminate',\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n// Default checkbox configuration.\nconst defaults = MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY();\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatCheckbox),\n    multi: true\n};\n/** Change event object emitted by MatCheckbox. */\nclass MatCheckboxChange {\n}\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nclass MatCheckboxBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatCheckboxMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase))));\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\nclass MatCheckbox extends _MatCheckboxMixinBase {\n    constructor(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, _animationMode, _options) {\n        super(elementRef);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._focusMonitor = _focusMonitor;\n        this._ngZone = _ngZone;\n        this._animationMode = _animationMode;\n        this._options = _options;\n        /**\n         * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n         * take precedence so this may be omitted.\n         */\n        this.ariaLabel = '';\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._uniqueId = `mat-checkbox-${++nextUniqueId}`;\n        /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n        this.id = this._uniqueId;\n        /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n        this.labelPosition = 'after';\n        /** Name value will be applied to the input element if present */\n        this.name = null;\n        /** Event emitted when the checkbox's `checked` value changes. */\n        this.change = new EventEmitter();\n        /** Event emitted when the checkbox's `indeterminate` value changes. */\n        this.indeterminateChange = new EventEmitter();\n        /**\n         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n         * @docs-private\n         */\n        this._onTouched = () => { };\n        this._currentAnimationClass = '';\n        this._currentCheckState = 0 /* Init */;\n        this._controlValueAccessorChangeFn = () => { };\n        this._checked = false;\n        this._disabled = false;\n        this._indeterminate = false;\n        this._options = this._options || defaults;\n        this.color = this.defaultColor = this._options.color || defaults.color;\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /** Returns the unique id for the visual hidden input. */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /** Whether the checkbox is required. */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n            if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state change\n                // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n                // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n                // telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => {\n                    this._onTouched();\n                    this._changeDetectorRef.markForCheck();\n                });\n            }\n        });\n        this._syncIndeterminate(this._indeterminate);\n    }\n    // TODO: Delete next major revision.\n    ngAfterViewChecked() { }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Whether the checkbox is checked.\n     */\n    get checked() { return this._checked; }\n    set checked(value) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this.disabled) {\n            this._disabled = newValue;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    get indeterminate() { return this._indeterminate; }\n    set indeterminate(value) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = coerceBooleanProperty(value);\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(3 /* Indeterminate */);\n            }\n            else {\n                this._transitionCheckState(this.checked ? 1 /* Checked */ : 2 /* Unchecked */);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n        this._syncIndeterminate(this._indeterminate);\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n        // component will be only marked for check, but no actual change detection runs automatically.\n        // Instead of going back into the zone in order to trigger a change detection which causes\n        // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n        // an explicit change detection for the checkbox view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    _getAriaChecked() {\n        if (this.checked) {\n            return 'true';\n        }\n        return this.indeterminate ? 'mixed' : 'false';\n    }\n    _transitionCheckState(newState) {\n        let oldState = this._currentCheckState;\n        let element = this._elementRef.nativeElement;\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n        this._currentCheckState = newState;\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n            // Remove the animation class to avoid animation when the checkbox is moved between containers\n            const animationClass = this._currentAnimationClass;\n            this._ngZone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    element.classList.remove(animationClass);\n                }, 1000);\n            });\n        }\n    }\n    _emitChangeEvent() {\n        const event = new MatCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n    /** Toggles the `checked` state of the checkbox. */\n    toggle() {\n        this.checked = !this.checked;\n    }\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event) {\n        var _a;\n        const clickAction = (_a = this._options) === null || _a === void 0 ? void 0 : _a.clickAction;\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && clickAction !== 'check') {\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n            this.toggle();\n            this._transitionCheckState(this._checked ? 1 /* Checked */ : 2 /* Unchecked */);\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        }\n        else if (!this.disabled && clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mat-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n    /** Focuses the checkbox. */\n    focus(origin, options) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    _onInteractionEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n    _getAnimationClassForCheckStateTransition(oldState, newState) {\n        // Don't transition if animations are disabled.\n        if (this._animationMode === 'NoopAnimations') {\n            return '';\n        }\n        let animSuffix = '';\n        switch (oldState) {\n            case 0 /* Init */:\n                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n                // [checked] bound to it.\n                if (newState === 1 /* Checked */) {\n                    animSuffix = 'unchecked-checked';\n                }\n                else if (newState == 3 /* Indeterminate */) {\n                    animSuffix = 'unchecked-indeterminate';\n                }\n                else {\n                    return '';\n                }\n                break;\n            case 2 /* Unchecked */:\n                animSuffix = newState === 1 /* Checked */ ?\n                    'unchecked-checked' : 'unchecked-indeterminate';\n                break;\n            case 1 /* Checked */:\n                animSuffix = newState === 2 /* Unchecked */ ?\n                    'checked-unchecked' : 'checked-indeterminate';\n                break;\n            case 3 /* Indeterminate */:\n                animSuffix = newState === 1 /* Checked */ ?\n                    'indeterminate-checked' : 'indeterminate-unchecked';\n                break;\n        }\n        return `mat-checkbox-anim-${animSuffix}`;\n    }\n    /**\n     * Syncs the indeterminate value with the checkbox DOM node.\n     *\n     * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n     * property is supported on an element boils down to `if (propName in element)`. Domino's\n     * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n     * server-side rendering.\n     */\n    _syncIndeterminate(value) {\n        const nativeCheckbox = this._inputElement;\n        if (nativeCheckbox) {\n            nativeCheckbox.nativeElement.indeterminate = value;\n        }\n    }\n}\nMatCheckbox.ɵfac = function MatCheckbox_Factory(t) { return new (t || MatCheckbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_CHECKBOX_DEFAULT_OPTIONS, 8)); };\nMatCheckbox.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatCheckbox, selectors: [[\"mat-checkbox\"]], viewQuery: function MatCheckbox_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 1);\n        ɵngcc0.ɵɵviewQuery(MatRipple, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ripple = _t.first);\n    } }, hostAttrs: [1, \"mat-checkbox\"], hostVars: 12, hostBindings: function MatCheckbox_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checkbox-indeterminate\", ctx.indeterminate)(\"mat-checkbox-checked\", ctx.checked)(\"mat-checkbox-disabled\", ctx.disabled)(\"mat-checkbox-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], id: \"id\", labelPosition: \"labelPosition\", name: \"name\", required: \"required\", checked: \"checked\", disabled: \"disabled\", indeterminate: \"indeterminate\", ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], value: \"value\" }, outputs: { change: \"change\", indeterminateChange: \"indeterminateChange\" }, exportAs: [\"matCheckbox\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 17, vars: 20, consts: [[1, \"mat-checkbox-layout\"], [\"label\", \"\"], [1, \"mat-checkbox-inner-container\"], [\"type\", \"checkbox\", 1, \"mat-checkbox-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"checked\", \"disabled\", \"tabIndex\", \"change\", \"click\"], [\"input\", \"\"], [\"matRipple\", \"\", 1, \"mat-checkbox-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleRadius\", \"matRippleCentered\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-checkbox-persistent-ripple\"], [1, \"mat-checkbox-frame\"], [1, \"mat-checkbox-background\"], [\"version\", \"1.1\", \"focusable\", \"false\", \"viewBox\", \"0 0 24 24\", 0, \"xml\", \"space\", \"preserve\", 1, \"mat-checkbox-checkmark\"], [\"fill\", \"none\", \"stroke\", \"white\", \"d\", \"M4.1,12.7 9,17.6 20.3,6.3\", 1, \"mat-checkbox-checkmark-path\"], [1, \"mat-checkbox-mixedmark\"], [1, \"mat-checkbox-label\", 3, \"cdkObserveContent\"], [\"checkboxLabel\", \"\"], [2, \"display\", \"none\"]], template: function MatCheckbox_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"input\", 3, 4);\n        ɵngcc0.ɵɵlistener(\"change\", function MatCheckbox_Template_input_change_3_listener($event) { return ctx._onInteractionEvent($event); })(\"click\", function MatCheckbox_Template_input_click_3_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"span\", 5);\n        ɵngcc0.ɵɵelement(6, \"span\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(7, \"span\", 7);\n        ɵngcc0.ɵɵelementStart(8, \"span\", 8);\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(9, \"svg\", 9);\n        ɵngcc0.ɵɵelement(10, \"path\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵnamespaceHTML();\n        ɵngcc0.ɵɵelement(11, \"span\", 11);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(12, \"span\", 12, 13);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatCheckbox_Template_span_cdkObserveContent_12_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(14, \"span\", 14);\n        ɵngcc0.ɵɵtext(15, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(16);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        const _r2 = ɵngcc0.ɵɵreference(13);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-checkbox-inner-container-no-side-margin\", !_r2.textContent || !_r2.textContent.trim());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex);\n        ɵngcc0.ɵɵattribute(\"value\", ctx.value)(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel || null)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-checked\", ctx._getAriaChecked())(\"aria-describedby\", ctx.ariaDescribedby);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleRadius\", 20)(\"matRippleCentered\", true)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(19, _c1));\n    } }, directives: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent], styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{display:inline-block;transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.cdk-high-contrast-active .mat-checkbox.cdk-keyboard-focused .mat-checkbox-frame{border-style:dotted}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{display:block;width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatCheckbox.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: NgZone },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_CHECKBOX_DEFAULT_OPTIONS,] }] }\n];\nMatCheckbox.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n    id: [{ type: Input }],\n    required: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    name: [{ type: Input }],\n    change: [{ type: Output }],\n    indeterminateChange: [{ type: Output }],\n    value: [{ type: Input }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }],\n    ripple: [{ type: ViewChild, args: [MatRipple,] }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    indeterminate: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCheckbox, [{\n        type: Component,\n        args: [{\n                selector: 'mat-checkbox',\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label>\\n  <span class=\\\"mat-checkbox-inner-container\\\"\\n       [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\">\\n    <input #input\\n           class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [checked]=\\\"checked\\\"\\n           [attr.value]=\\\"value\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n    <span matRipple class=\\\"mat-checkbox-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n      <span class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></span>\\n    </span>\\n    <span class=\\\"mat-checkbox-frame\\\"></span>\\n    <span class=\\\"mat-checkbox-background\\\">\\n      <svg version=\\\"1.1\\\"\\n           focusable=\\\"false\\\"\\n           class=\\\"mat-checkbox-checkmark\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           xml:space=\\\"preserve\\\">\\n        <path class=\\\"mat-checkbox-checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              stroke=\\\"white\\\"\\n              d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/>\\n      </svg>\\n      <!-- Element for rendering the indeterminate state checkbox. -->\\n      <span class=\\\"mat-checkbox-mixedmark\\\"></span>\\n    </span>\\n  </span>\\n  <span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                exportAs: 'matCheckbox',\n                host: {\n                    'class': 'mat-checkbox',\n                    '[id]': 'id',\n                    '[attr.tabindex]': 'null',\n                    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n                    '[class.mat-checkbox-checked]': 'checked',\n                    '[class.mat-checkbox-disabled]': 'disabled',\n                    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`\n                },\n                providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n                inputs: ['disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{display:inline-block;transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.cdk-high-contrast-active .mat-checkbox.cdk-keyboard-focused .mat-checkbox-frame{border-style:dotted}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{display:block;width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.NgZone }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_CHECKBOX_DEFAULT_OPTIONS]\n            }] }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], change: [{\n            type: Output\n        }], indeterminateChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], indeterminate: [{\n            type: Input\n        }], ariaDescribedby: [{\n            type: Input,\n            args: ['aria-describedby']\n        }], value: [{\n            type: Input\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }], ripple: [{\n            type: ViewChild,\n            args: [MatRipple]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n    multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nclass MatCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\nMatCheckboxRequiredValidator.ɵfac = function MatCheckboxRequiredValidator_Factory(t) { return ɵMatCheckboxRequiredValidator_BaseFactory(t || MatCheckboxRequiredValidator); };\nMatCheckboxRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCheckboxRequiredValidator, selectors: [[\"mat-checkbox\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"formControl\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"ngModel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatCheckboxRequiredValidator_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatCheckboxRequiredValidator);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCheckboxRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n                providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based checkbox implementations. */\nclass _MatCheckboxRequiredValidatorModule {\n}\n_MatCheckboxRequiredValidatorModule.ɵfac = function _MatCheckboxRequiredValidatorModule_Factory(t) { return new (t || _MatCheckboxRequiredValidatorModule)(); };\n_MatCheckboxRequiredValidatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: _MatCheckboxRequiredValidatorModule });\n_MatCheckboxRequiredValidatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatCheckboxRequiredValidatorModule, { declarations: [MatCheckboxRequiredValidator], exports: [MatCheckboxRequiredValidator] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatCheckboxRequiredValidatorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatCheckboxRequiredValidator],\n                declarations: [MatCheckboxRequiredValidator]\n            }]\n    }], null, null); })();\nclass MatCheckboxModule {\n}\nMatCheckboxModule.ɵfac = function MatCheckboxModule_Factory(t) { return new (t || MatCheckboxModule)(); };\nMatCheckboxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatCheckboxModule });\nMatCheckboxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[\n            MatRippleModule, MatCommonModule, ObserversModule,\n            _MatCheckboxRequiredValidatorModule\n        ], MatCommonModule, _MatCheckboxRequiredValidatorModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatCheckboxModule, { declarations: function () { return [MatCheckbox]; }, imports: function () { return [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule]; }, exports: function () { return [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCheckboxModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    MatRippleModule, MatCommonModule, ObserversModule,\n                    _MatCheckboxRequiredValidatorModule\n                ],\n                exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n                declarations: [MatCheckbox]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, MAT_CHECKBOX_DEFAULT_OPTIONS, MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckbox, MatCheckboxChange, MatCheckboxModule, MatCheckboxRequiredValidator, _MatCheckboxRequiredValidatorModule };\n\n//# sourceMappingURL=checkbox.js.map"]},"metadata":{},"sourceType":"module"}