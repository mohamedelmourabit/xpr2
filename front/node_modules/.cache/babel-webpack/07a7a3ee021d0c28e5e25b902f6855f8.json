{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _createClass from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { isObservable, of, Subject } from 'rxjs';\nimport { ɵɵdefineInjectable, Injectable, InjectionToken } from '@angular/core';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar DataSource = function DataSource() {\n  _classCallCheck(this, DataSource);\n};\n/** Checks whether an object is a data source. */\n\n\nfunction isDataSource(value) {\n  // Check if the value is a DataSource by observing if it has a connect function. Cannot\n  // be checked as an `instanceof DataSource` since people could create their own sources\n  // that match the interface, but don't extend DataSource.\n  return value && typeof value.connect === 'function';\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** DataSource wrapper for a native array. */\n\n\nvar ArrayDataSource = /*#__PURE__*/function (_DataSource) {\n  _inherits(ArrayDataSource, _DataSource);\n\n  var _super = _createSuper(ArrayDataSource);\n\n  function ArrayDataSource(_data) {\n    var _this;\n\n    _classCallCheck(this, ArrayDataSource);\n\n    _this = _super.call(this);\n    _this._data = _data;\n    return _this;\n  }\n\n  _createClass(ArrayDataSource, [{\n    key: \"connect\",\n    value: function connect() {\n      return isObservable(this._data) ? this._data : of(this._data);\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {}\n  }]);\n\n  return ArrayDataSource;\n}(DataSource);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A repeater that destroys views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will always construct a new embedded view for each item.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\n\n\nvar _DisposeViewRepeaterStrategy = /*#__PURE__*/function () {\n  function _DisposeViewRepeaterStrategy() {\n    _classCallCheck(this, _DisposeViewRepeaterStrategy);\n  }\n\n  _createClass(_DisposeViewRepeaterStrategy, [{\n    key: \"applyChanges\",\n    value: function applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n      changes.forEachOperation(function (record, adjustedPreviousIndex, currentIndex) {\n        var view;\n        var operation;\n\n        if (record.previousIndex == null) {\n          var insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n          view = viewContainerRef.createEmbeddedView(insertContext.templateRef, insertContext.context, insertContext.index);\n          operation = 1\n          /* INSERTED */\n          ;\n        } else if (currentIndex == null) {\n          viewContainerRef.remove(adjustedPreviousIndex);\n          operation = 3\n          /* REMOVED */\n          ;\n        } else {\n          view = viewContainerRef.get(adjustedPreviousIndex);\n          viewContainerRef.move(view, currentIndex);\n          operation = 2\n          /* MOVED */\n          ;\n        }\n\n        if (itemViewChanged) {\n          itemViewChanged({\n            context: view === null || view === void 0 ? void 0 : view.context,\n            operation: operation,\n            record: record\n          });\n        }\n      });\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {}\n  }]);\n\n  return _DisposeViewRepeaterStrategy;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A repeater that caches views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will reuse one of the cached views instead of creating a new\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\n * inserts.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\n\n\nvar _RecycleViewRepeaterStrategy = /*#__PURE__*/function () {\n  function _RecycleViewRepeaterStrategy() {\n    _classCallCheck(this, _RecycleViewRepeaterStrategy);\n\n    /**\n     * The size of the cache used to store unused views.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 views.\n     */\n    this.viewCacheSize = 20;\n    /**\n     * View cache that stores embedded view instances that have been previously stamped out,\n     * but don't are not currently rendered. The view repeater will reuse these views rather than\n     * creating brand new ones.\n     *\n     * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\n     */\n\n    this._viewCache = [];\n  }\n  /** Apply changes to the DOM. */\n\n\n  _createClass(_RecycleViewRepeaterStrategy, [{\n    key: \"applyChanges\",\n    value: function applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n      var _this2 = this;\n\n      // Rearrange the views to put them in the right location.\n      changes.forEachOperation(function (record, adjustedPreviousIndex, currentIndex) {\n        var view;\n        var operation;\n\n        if (record.previousIndex == null) {\n          // Item added.\n          var viewArgsFactory = function viewArgsFactory() {\n            return itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n          };\n\n          view = _this2._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));\n          operation = view ? 1\n          /* INSERTED */\n          : 0\n          /* REPLACED */\n          ;\n        } else if (currentIndex == null) {\n          // Item removed.\n          _this2._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);\n\n          operation = 3\n          /* REMOVED */\n          ;\n        } else {\n          // Item moved.\n          view = _this2._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));\n          operation = 2\n          /* MOVED */\n          ;\n        }\n\n        if (itemViewChanged) {\n          itemViewChanged({\n            context: view === null || view === void 0 ? void 0 : view.context,\n            operation: operation,\n            record: record\n          });\n        }\n      });\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      var _iterator = _createForOfIteratorHelper(this._viewCache),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var view = _step.value;\n          view.destroy();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this._viewCache = [];\n    }\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new\n     * one. Returns `undefined` if the item was inserted into a cached view.\n     */\n\n  }, {\n    key: \"_insertView\",\n    value: function _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {\n      var cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);\n\n      if (cachedView) {\n        cachedView.context.$implicit = value;\n        return undefined;\n      }\n\n      var viewArgs = viewArgsFactory();\n      return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);\n    }\n    /** Detaches the view at the given index and inserts into the view cache. */\n\n  }, {\n    key: \"_detachAndCacheView\",\n    value: function _detachAndCacheView(index, viewContainerRef) {\n      var detachedView = viewContainerRef.detach(index);\n\n      this._maybeCacheView(detachedView, viewContainerRef);\n    }\n    /** Moves view at the previous index to the current index. */\n\n  }, {\n    key: \"_moveView\",\n    value: function _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {\n      var view = viewContainerRef.get(adjustedPreviousIndex);\n      viewContainerRef.move(view, currentIndex);\n      view.context.$implicit = value;\n      return view;\n    }\n    /**\n     * Cache the given detached view. If the cache is full, the view will be\n     * destroyed.\n     */\n\n  }, {\n    key: \"_maybeCacheView\",\n    value: function _maybeCacheView(view, viewContainerRef) {\n      if (this._viewCache.length < this.viewCacheSize) {\n        this._viewCache.push(view);\n      } else {\n        var index = viewContainerRef.indexOf(view); // The host component could remove views from the container outside of\n        // the view repeater. It's unlikely this will occur, but just in case,\n        // destroy the view on its own, otherwise destroy it through the\n        // container to ensure that all the references are removed.\n\n        if (index === -1) {\n          view.destroy();\n        } else {\n          viewContainerRef.remove(index);\n        }\n      }\n    }\n    /** Inserts a recycled view from the cache at the given index. */\n\n  }, {\n    key: \"_insertViewFromCache\",\n    value: function _insertViewFromCache(index, viewContainerRef) {\n      var cachedView = this._viewCache.pop();\n\n      if (cachedView) {\n        viewContainerRef.insert(cachedView, index);\n      }\n\n      return cachedView || null;\n    }\n  }]);\n\n  return _RecycleViewRepeaterStrategy;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\n\n\nvar SelectionModel = /*#__PURE__*/function () {\n  function SelectionModel() {\n    var _this3 = this;\n\n    var _multiple = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    var initiallySelectedValues = arguments.length > 1 ? arguments[1] : undefined;\n\n    var _emitChanges = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    _classCallCheck(this, SelectionModel);\n\n    this._multiple = _multiple;\n    this._emitChanges = _emitChanges;\n    /** Currently-selected values. */\n\n    this._selection = new Set();\n    /** Keeps track of the deselected options that haven't been emitted by the change event. */\n\n    this._deselectedToEmit = [];\n    /** Keeps track of the selected options that haven't been emitted by the change event. */\n\n    this._selectedToEmit = [];\n    /** Event emitted when the value has changed. */\n\n    this.changed = new Subject();\n\n    if (initiallySelectedValues && initiallySelectedValues.length) {\n      if (_multiple) {\n        initiallySelectedValues.forEach(function (value) {\n          return _this3._markSelected(value);\n        });\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      } // Clear the array in order to avoid firing the change event for preselected values.\n\n\n      this._selectedToEmit.length = 0;\n    }\n  }\n  /** Selected values. */\n\n\n  _createClass(SelectionModel, [{\n    key: \"selected\",\n    get: function get() {\n      if (!this._selected) {\n        this._selected = Array.from(this._selection.values());\n      }\n\n      return this._selected;\n    }\n    /**\n     * Selects a value or an array of values.\n     */\n\n  }, {\n    key: \"select\",\n    value: function select() {\n      var _this4 = this;\n\n      for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n        values[_key] = arguments[_key];\n      }\n\n      this._verifyValueAssignment(values);\n\n      values.forEach(function (value) {\n        return _this4._markSelected(value);\n      });\n\n      this._emitChangeEvent();\n    }\n    /**\n     * Deselects a value or an array of values.\n     */\n\n  }, {\n    key: \"deselect\",\n    value: function deselect() {\n      var _this5 = this;\n\n      for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        values[_key2] = arguments[_key2];\n      }\n\n      this._verifyValueAssignment(values);\n\n      values.forEach(function (value) {\n        return _this5._unmarkSelected(value);\n      });\n\n      this._emitChangeEvent();\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle(value) {\n      this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._unmarkAll();\n\n      this._emitChangeEvent();\n    }\n    /**\n     * Determines whether a value is selected.\n     */\n\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(value) {\n      return this._selection.has(value);\n    }\n    /**\n     * Determines whether the model does not have a value.\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     */\n\n  }, {\n    key: \"hasValue\",\n    value: function hasValue() {\n      return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n\n  }, {\n    key: \"sort\",\n    value: function sort(predicate) {\n      if (this._multiple && this.selected) {\n        this._selected.sort(predicate);\n      }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     */\n\n  }, {\n    key: \"isMultipleSelection\",\n    value: function isMultipleSelection() {\n      return this._multiple;\n    }\n    /** Emits a change event and clears the records of selected and deselected values. */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent() {\n      // Clear the selected values so they can be re-cached.\n      this._selected = null;\n\n      if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n        this.changed.next({\n          source: this,\n          added: this._selectedToEmit,\n          removed: this._deselectedToEmit\n        });\n        this._deselectedToEmit = [];\n        this._selectedToEmit = [];\n      }\n    }\n    /** Selects a value. */\n\n  }, {\n    key: \"_markSelected\",\n    value: function _markSelected(value) {\n      if (!this.isSelected(value)) {\n        if (!this._multiple) {\n          this._unmarkAll();\n        }\n\n        this._selection.add(value);\n\n        if (this._emitChanges) {\n          this._selectedToEmit.push(value);\n        }\n      }\n    }\n    /** Deselects a value. */\n\n  }, {\n    key: \"_unmarkSelected\",\n    value: function _unmarkSelected(value) {\n      if (this.isSelected(value)) {\n        this._selection.delete(value);\n\n        if (this._emitChanges) {\n          this._deselectedToEmit.push(value);\n        }\n      }\n    }\n    /** Clears out the selected values. */\n\n  }, {\n    key: \"_unmarkAll\",\n    value: function _unmarkAll() {\n      var _this6 = this;\n\n      if (!this.isEmpty()) {\n        this._selection.forEach(function (value) {\n          return _this6._unmarkSelected(value);\n        });\n      }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     */\n\n  }, {\n    key: \"_verifyValueAssignment\",\n    value: function _verifyValueAssignment(values) {\n      if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMultipleValuesInSingleSelectionError();\n      }\n    }\n  }]);\n\n  return SelectionModel;\n}();\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\n\n\nfunction getMultipleValuesInSingleSelectionError() {\n  return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n\n\nvar UniqueSelectionDispatcher = /*#__PURE__*/function () {\n  function UniqueSelectionDispatcher() {\n    _classCallCheck(this, UniqueSelectionDispatcher);\n\n    this._listeners = [];\n  }\n  /**\n   * Notify other items that selection for the given name has been set.\n   * @param id ID of the item.\n   * @param name Name of the item.\n   */\n\n\n  _createClass(UniqueSelectionDispatcher, [{\n    key: \"notify\",\n    value: function notify(id, name) {\n      var _iterator2 = _createForOfIteratorHelper(this._listeners),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var listener = _step2.value;\n          listener(id, name);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @return Function used to deregister listener\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(listener) {\n      var _this7 = this;\n\n      this._listeners.push(listener);\n\n      return function () {\n        _this7._listeners = _this7._listeners.filter(function (registered) {\n          return listener !== registered;\n        });\n      };\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._listeners = [];\n    }\n  }]);\n\n  return UniqueSelectionDispatcher;\n}();\n\nUniqueSelectionDispatcher.ɵfac = function UniqueSelectionDispatcher_Factory(t) {\n  return new (t || UniqueSelectionDispatcher)();\n};\n\nUniqueSelectionDispatcher.ɵprov = ɵɵdefineInjectable({\n  factory: function UniqueSelectionDispatcher_Factory() {\n    return new UniqueSelectionDispatcher();\n  },\n  token: UniqueSelectionDispatcher,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UniqueSelectionDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token for {@link _ViewRepeater}. This token is for use by Angular Material only.\n * @docs-private\n */\n\n\nvar _VIEW_REPEATER_STRATEGY = new InjectionToken('_ViewRepeater');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ArrayDataSource, DataSource, SelectionModel, UniqueSelectionDispatcher, _DisposeViewRepeaterStrategy, _RecycleViewRepeaterStrategy, _VIEW_REPEATER_STRATEGY, getMultipleValuesInSingleSelectionError, isDataSource }; //# sourceMappingURL=collections.js.map","map":{"version":3,"sources":["/Users/mohammedelmourabit/xrp/xpr/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/collections.js"],"names":["isObservable","of","Subject","ɵɵdefineInjectable","Injectable","InjectionToken","ɵngcc0","DataSource","isDataSource","value","connect","ArrayDataSource","_data","_DisposeViewRepeaterStrategy","changes","viewContainerRef","itemContextFactory","itemValueResolver","itemViewChanged","forEachOperation","record","adjustedPreviousIndex","currentIndex","view","operation","previousIndex","insertContext","createEmbeddedView","templateRef","context","index","remove","get","move","_RecycleViewRepeaterStrategy","viewCacheSize","_viewCache","viewArgsFactory","_insertView","_detachAndCacheView","_moveView","destroy","cachedView","_insertViewFromCache","$implicit","undefined","viewArgs","detachedView","detach","_maybeCacheView","length","push","indexOf","pop","insert","SelectionModel","_multiple","initiallySelectedValues","_emitChanges","_selection","Set","_deselectedToEmit","_selectedToEmit","changed","forEach","_markSelected","_selected","Array","from","values","_verifyValueAssignment","_emitChangeEvent","_unmarkSelected","isSelected","deselect","select","_unmarkAll","has","size","isEmpty","predicate","selected","sort","next","source","added","removed","add","delete","ngDevMode","getMultipleValuesInSingleSelectionError","Error","UniqueSelectionDispatcher","_listeners","id","name","listener","filter","registered","ɵfac","UniqueSelectionDispatcher_Factory","t","ɵprov","factory","token","providedIn","ɵsetClassMetadata","type","args","_VIEW_REPEATER_STRATEGY"],"mappings":"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","sourcesContent":["import { isObservable, of, Subject } from 'rxjs';\nimport { ɵɵdefineInjectable, Injectable, InjectionToken } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nclass DataSource {\n}\n/** Checks whether an object is a data source. */\nfunction isDataSource(value) {\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\n    // be checked as an `instanceof DataSource` since people could create their own sources\n    // that match the interface, but don't extend DataSource.\n    return value && typeof value.connect === 'function';\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** DataSource wrapper for a native array. */\nclass ArrayDataSource extends DataSource {\n    constructor(_data) {\n        super();\n        this._data = _data;\n    }\n    connect() {\n        return isObservable(this._data) ? this._data : of(this._data);\n    }\n    disconnect() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A repeater that destroys views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will always construct a new embedded view for each item.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _DisposeViewRepeaterStrategy {\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) {\n                const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = viewContainerRef.createEmbeddedView(insertContext.templateRef, insertContext.context, insertContext.index);\n                operation = 1 /* INSERTED */;\n            }\n            else if (currentIndex == null) {\n                viewContainerRef.remove(adjustedPreviousIndex);\n                operation = 3 /* REMOVED */;\n            }\n            else {\n                view = viewContainerRef.get(adjustedPreviousIndex);\n                viewContainerRef.move(view, currentIndex);\n                operation = 2 /* MOVED */;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view === null || view === void 0 ? void 0 : view.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() {\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A repeater that caches views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will reuse one of the cached views instead of creating a new\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\n * inserts.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _RecycleViewRepeaterStrategy {\n    constructor() {\n        /**\n         * The size of the cache used to store unused views.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 views.\n         */\n        this.viewCacheSize = 20;\n        /**\n         * View cache that stores embedded view instances that have been previously stamped out,\n         * but don't are not currently rendered. The view repeater will reuse these views rather than\n         * creating brand new ones.\n         *\n         * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\n         */\n        this._viewCache = [];\n    }\n    /** Apply changes to the DOM. */\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) { // Item added.\n                const viewArgsFactory = () => itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = this._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = view ? 1 /* INSERTED */ : 0 /* REPLACED */;\n            }\n            else if (currentIndex == null) { // Item removed.\n                this._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);\n                operation = 3 /* REMOVED */;\n            }\n            else { // Item moved.\n                view = this._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = 2 /* MOVED */;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view === null || view === void 0 ? void 0 : view.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() {\n        for (const view of this._viewCache) {\n            view.destroy();\n        }\n        this._viewCache = [];\n    }\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new\n     * one. Returns `undefined` if the item was inserted into a cached view.\n     */\n    _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {\n        const cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);\n        if (cachedView) {\n            cachedView.context.$implicit = value;\n            return undefined;\n        }\n        const viewArgs = viewArgsFactory();\n        return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);\n    }\n    /** Detaches the view at the given index and inserts into the view cache. */\n    _detachAndCacheView(index, viewContainerRef) {\n        const detachedView = viewContainerRef.detach(index);\n        this._maybeCacheView(detachedView, viewContainerRef);\n    }\n    /** Moves view at the previous index to the current index. */\n    _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {\n        const view = viewContainerRef.get(adjustedPreviousIndex);\n        viewContainerRef.move(view, currentIndex);\n        view.context.$implicit = value;\n        return view;\n    }\n    /**\n     * Cache the given detached view. If the cache is full, the view will be\n     * destroyed.\n     */\n    _maybeCacheView(view, viewContainerRef) {\n        if (this._viewCache.length < this.viewCacheSize) {\n            this._viewCache.push(view);\n        }\n        else {\n            const index = viewContainerRef.indexOf(view);\n            // The host component could remove views from the container outside of\n            // the view repeater. It's unlikely this will occur, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            }\n            else {\n                viewContainerRef.remove(index);\n            }\n        }\n    }\n    /** Inserts a recycled view from the cache at the given index. */\n    _insertViewFromCache(index, viewContainerRef) {\n        const cachedView = this._viewCache.pop();\n        if (cachedView) {\n            viewContainerRef.insert(cachedView, index);\n        }\n        return cachedView || null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nclass SelectionModel {\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true) {\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        /** Currently-selected values. */\n        this._selection = new Set();\n        /** Keeps track of the deselected options that haven't been emitted by the change event. */\n        this._deselectedToEmit = [];\n        /** Keeps track of the selected options that haven't been emitted by the change event. */\n        this._selectedToEmit = [];\n        /** Event emitted when the value has changed. */\n        this.changed = new Subject();\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach(value => this._markSelected(value));\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    /** Selected values. */\n    get selected() {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n        return this._selected;\n    }\n    /**\n     * Selects a value or an array of values.\n     */\n    select(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._markSelected(value));\n        this._emitChangeEvent();\n    }\n    /**\n     * Deselects a value or an array of values.\n     */\n    deselect(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._unmarkSelected(value));\n        this._emitChangeEvent();\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     */\n    toggle(value) {\n        this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     */\n    clear() {\n        this._unmarkAll();\n        this._emitChangeEvent();\n    }\n    /**\n     * Determines whether a value is selected.\n     */\n    isSelected(value) {\n        return this._selection.has(value);\n    }\n    /**\n     * Determines whether the model does not have a value.\n     */\n    isEmpty() {\n        return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     */\n    hasValue() {\n        return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n    sort(predicate) {\n        if (this._multiple && this.selected) {\n            this._selected.sort(predicate);\n        }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n    /** Emits a change event and clears the records of selected and deselected values. */\n    _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit\n            });\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n    /** Selects a value. */\n    _markSelected(value) {\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            this._selection.add(value);\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n    /** Deselects a value. */\n    _unmarkSelected(value) {\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n    /** Clears out the selected values. */\n    _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach(value => this._unmarkSelected(value));\n        }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     */\n    _verifyValueAssignment(values) {\n        if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nclass UniqueSelectionDispatcher {\n    constructor() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param id ID of the item.\n     * @param name Name of the item.\n     */\n    notify(id, name) {\n        for (let listener of this._listeners) {\n            listener(id, name);\n        }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @return Function used to deregister listener\n     */\n    listen(listener) {\n        this._listeners.push(listener);\n        return () => {\n            this._listeners = this._listeners.filter((registered) => {\n                return listener !== registered;\n            });\n        };\n    }\n    ngOnDestroy() {\n        this._listeners = [];\n    }\n}\nUniqueSelectionDispatcher.ɵfac = function UniqueSelectionDispatcher_Factory(t) { return new (t || UniqueSelectionDispatcher)(); };\nUniqueSelectionDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function UniqueSelectionDispatcher_Factory() { return new UniqueSelectionDispatcher(); }, token: UniqueSelectionDispatcher, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UniqueSelectionDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token for {@link _ViewRepeater}. This token is for use by Angular Material only.\n * @docs-private\n */\nconst _VIEW_REPEATER_STRATEGY = new InjectionToken('_ViewRepeater');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArrayDataSource, DataSource, SelectionModel, UniqueSelectionDispatcher, _DisposeViewRepeaterStrategy, _RecycleViewRepeaterStrategy, _VIEW_REPEATER_STRATEGY, getMultipleValuesInSingleSelectionError, isDataSource };\n\n//# sourceMappingURL=collections.js.map"]},"metadata":{},"sourceType":"module"}