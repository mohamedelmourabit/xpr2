{"ast":null,"code":"import _createClass from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\nvar _c0 = [\"thumbContainer\"];\nvar _c1 = [\"toggleBar\"];\nvar _c2 = [\"input\"];\n\nvar _c3 = function _c3() {\n  return {\n    enterDuration: 150\n  };\n};\n\nvar _c4 = [\"*\"];\nvar MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n  providedIn: 'root',\n  factory: function factory() {\n    return {\n      disableToggleValue: false\n    };\n  }\n});\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for slide-toggle components.\n\nvar nextUniqueId = 0;\n/** @docs-private */\n\nvar MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return MatSlideToggle;\n  }),\n  multi: true\n};\n/** Change event object emitted by a MatSlideToggle. */\n\nvar MatSlideToggleChange = function MatSlideToggleChange(\n/** The source MatSlideToggle of the event. */\nsource,\n/** The new `checked` value of the MatSlideToggle. */\nchecked) {\n  _classCallCheck(this, MatSlideToggleChange);\n\n  this.source = source;\n  this.checked = checked;\n}; // Boilerplate for applying mixins to MatSlideToggle.\n\n/** @docs-private */\n\n\nvar MatSlideToggleBase = function MatSlideToggleBase(_elementRef) {\n  _classCallCheck(this, MatSlideToggleBase);\n\n  this._elementRef = _elementRef;\n};\n\nvar _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n\n\nvar MatSlideToggle = /*#__PURE__*/function (_MatSlideToggleMixinB) {\n  _inherits(MatSlideToggle, _MatSlideToggleMixinB);\n\n  var _super = _createSuper(MatSlideToggle);\n\n  function MatSlideToggle(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, defaults, _animationMode) {\n    var _this;\n\n    _classCallCheck(this, MatSlideToggle);\n\n    _this = _super.call(this, elementRef);\n    _this._focusMonitor = _focusMonitor;\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this.defaults = defaults;\n    _this._animationMode = _animationMode;\n\n    _this._onChange = function (_) {};\n\n    _this._onTouched = function () {};\n\n    _this._uniqueId = \"mat-slide-toggle-\".concat(++nextUniqueId);\n    _this._required = false;\n    _this._checked = false;\n    /** Name value will be applied to the input element if present. */\n\n    _this.name = null;\n    /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n\n    _this.id = _this._uniqueId;\n    /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n\n    _this.labelPosition = 'after';\n    /** Used to set the aria-label attribute on the underlying input element. */\n\n    _this.ariaLabel = null;\n    /** Used to set the aria-labelledby attribute on the underlying input element. */\n\n    _this.ariaLabelledby = null;\n    /** An event will be dispatched each time the slide-toggle changes its value. */\n\n    _this.change = new EventEmitter();\n    /**\n     * An event will be dispatched each time the slide-toggle input is toggled.\n     * This event is always emitted when the user toggles the slide toggle, but this does not mean\n     * the slide toggle's value has changed.\n     */\n\n    _this.toggleChange = new EventEmitter();\n    _this.tabIndex = parseInt(tabIndex) || 0;\n    return _this;\n  }\n  /** Whether the slide-toggle is required. */\n\n\n  _createClass(MatSlideToggle, [{\n    key: \"required\",\n    get: function get() {\n      return this._required;\n    },\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n    }\n    /** Whether the slide-toggle element is checked or not. */\n\n  }, {\n    key: \"checked\",\n    get: function get() {\n      return this._checked;\n    },\n    set: function set(value) {\n      this._checked = coerceBooleanProperty(value);\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /** Returns the unique id for the visual hidden input. */\n\n  }, {\n    key: \"inputId\",\n    get: function get() {\n      return \"\".concat(this.id || this._uniqueId, \"-input\");\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this2 = this;\n\n      this._focusMonitor.monitor(this._elementRef, true).subscribe(function (focusOrigin) {\n        // Only forward focus manually when it was received programmatically or through the\n        // keyboard. We should not do this for mouse/touch focus for two reasons:\n        // 1. It can prevent clicks from landing in Chrome (see #18269).\n        // 2. They're already handled by the wrapping `label` element.\n        if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n          _this2._inputElement.nativeElement.focus();\n        } else if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(function () {\n            return _this2._onTouched();\n          });\n        }\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /** Method being called whenever the underlying input emits a change event. */\n\n  }, {\n    key: \"_onChangeEvent\",\n    value: function _onChangeEvent(event) {\n      // We always have to stop propagation on the change event.\n      // Otherwise the change event, from the input element, will bubble up and\n      // emit its event object to the component's `change` output.\n      event.stopPropagation();\n      this.toggleChange.emit(); // When the slide toggle's config disables toggle change event by setting\n      // `disableToggleValue: true`, the slide toggle's value does not change, and the\n      // checked state of the underlying input needs to be changed back.\n\n      if (this.defaults.disableToggleValue) {\n        this._inputElement.nativeElement.checked = this.checked;\n        return;\n      } // Sync the value from the underlying input element with the component instance.\n\n\n      this.checked = this._inputElement.nativeElement.checked; // Emit our custom change event only if the underlying input emitted one. This ensures that\n      // there is no change event, when the checked state changes programmatically.\n\n      this._emitChangeEvent();\n    }\n    /** Method being called whenever the slide-toggle has been clicked. */\n\n  }, {\n    key: \"_onInputClick\",\n    value: function _onInputClick(event) {\n      // We have to stop propagation for click events on the visual hidden input element.\n      // By default, when a user clicks on a label element, a generated click event will be\n      // dispatched on the associated input element. Since we are using a label element as our\n      // root container, the click event on the `slide-toggle` will be executed twice.\n      // The real click event will bubble up, and the generated click event also tries to bubble up.\n      // This will lead to multiple click events.\n      // Preventing bubbling for the second event will solve that issue.\n      event.stopPropagation();\n    }\n    /** Implemented as part of ControlValueAccessor. */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.checked = !!value;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._onChange = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /** Implemented as a part of ControlValueAccessor. */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /** Focuses the slide-toggle. */\n\n  }, {\n    key: \"focus\",\n    value: function focus(options, origin) {\n      if (origin) {\n        this._focusMonitor.focusVia(this._inputElement, origin, options);\n      } else {\n        this._inputElement.nativeElement.focus(options);\n      }\n    }\n    /** Toggles the checked state of the slide-toggle. */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this.checked = !this.checked;\n\n      this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent() {\n      this._onChange(this.checked);\n\n      this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /** Method being called whenever the label text changes. */\n\n  }, {\n    key: \"_onLabelTextChange\",\n    value: function _onLabelTextChange() {\n      // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n      // slide-toggle component will be only marked for check, but no actual change detection runs\n      // automatically. Instead of going back into the zone in order to trigger a change detection\n      // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n      // we only trigger an explicit change detection for the slide-toggle view and its children.\n      this._changeDetectorRef.detectChanges();\n    }\n  }]);\n\n  return MatSlideToggle;\n}(_MatSlideToggleMixinBase);\n\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) {\n  return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\n\nMatSlideToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatSlideToggle,\n  selectors: [[\"mat-slide-toggle\"]],\n  viewQuery: function MatSlideToggle_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 1);\n      ɵngcc0.ɵɵviewQuery(_c1, 1);\n      ɵngcc0.ɵɵviewQuery(_c2, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-slide-toggle\"],\n  hostVars: 12,\n  hostBindings: function MatSlideToggle_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : -1)(\"aria-label\", null)(\"aria-labelledby\", null);\n      ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    color: \"color\",\n    tabIndex: \"tabIndex\",\n    name: \"name\",\n    id: \"id\",\n    labelPosition: \"labelPosition\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    required: \"required\",\n    checked: \"checked\"\n  },\n  outputs: {\n    change: \"change\",\n    toggleChange: \"toggleChange\"\n  },\n  exportAs: [\"matSlideToggle\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c4,\n  decls: 16,\n  vars: 18,\n  consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]],\n  template: function MatSlideToggle_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n      ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n      ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n      ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) {\n        return ctx._onChangeEvent($event);\n      })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) {\n        return ctx._onInputClick($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n      ɵngcc0.ɵɵelement(8, \"div\", 8);\n      ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n      ɵngcc0.ɵɵelement(10, \"div\", 10);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n      ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() {\n        return ctx._onLabelTextChange();\n      });\n      ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n      ɵngcc0.ɵɵtext(14, \"\\xA0\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(15);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      var _r0 = ɵngcc0.ɵɵreference(1);\n\n      var _r4 = ɵngcc0.ɵɵreference(12);\n\n      ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n      ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked.toString())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n      ɵngcc0.ɵɵadvance(5);\n      ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c3));\n    }\n  },\n  directives: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent],\n  styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nMatSlideToggle.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: FocusMonitor\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }];\n};\n\nMatSlideToggle.propDecorators = {\n  _thumbEl: [{\n    type: ViewChild,\n    args: ['thumbContainer']\n  }],\n  _thumbBarEl: [{\n    type: ViewChild,\n    args: ['toggleBar']\n  }],\n  name: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  labelPosition: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  required: [{\n    type: Input\n  }],\n  checked: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  toggleChange: [{\n    type: Output\n  }],\n  _inputElement: [{\n    type: ViewChild,\n    args: ['input']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n    type: Component,\n    args: [{\n      selector: 'mat-slide-toggle',\n      exportAs: 'matSlideToggle',\n      host: {\n        'class': 'mat-slide-toggle',\n        '[id]': 'id',\n        // Needs to be `-1` so it can still receive programmatic focus.\n        '[attr.tabindex]': 'disabled ? null : -1',\n        '[attr.aria-label]': 'null',\n        '[attr.aria-labelledby]': 'null',\n        '[class.mat-checked]': 'checked',\n        '[class.mat-disabled]': 'disabled',\n        '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n      },\n      template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n      providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n      inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, {\n    name: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    change: [{\n      type: Output\n    }],\n    toggleChange: [{\n      type: Output\n    }],\n    required: [{\n      type: Input\n    }],\n    checked: [{\n      type: Input\n    }],\n    _thumbEl: [{\n      type: ViewChild,\n      args: ['thumbContainer']\n    }],\n    _thumbBarEl: [{\n      type: ViewChild,\n      args: ['toggleBar']\n    }],\n    _inputElement: [{\n      type: ViewChild,\n      args: ['input']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return MatSlideToggleRequiredValidator;\n  }),\n  multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\n\nvar MatSlideToggleRequiredValidator = /*#__PURE__*/function (_CheckboxRequiredVali) {\n  _inherits(MatSlideToggleRequiredValidator, _CheckboxRequiredVali);\n\n  var _super2 = _createSuper(MatSlideToggleRequiredValidator);\n\n  function MatSlideToggleRequiredValidator() {\n    _classCallCheck(this, MatSlideToggleRequiredValidator);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return MatSlideToggleRequiredValidator;\n}(CheckboxRequiredValidator);\n\nMatSlideToggleRequiredValidator.ɵfac = function MatSlideToggleRequiredValidator_Factory(t) {\n  return ɵMatSlideToggleRequiredValidator_BaseFactory(t || MatSlideToggleRequiredValidator);\n};\n\nMatSlideToggleRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatSlideToggleRequiredValidator,\n  selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵMatSlideToggleRequiredValidator_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n    type: Directive,\n    args: [{\n      selector: \"mat-slide-toggle[required][formControlName],\\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]\",\n      providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** This module is used by both original and MDC-based slide-toggle implementations. */\n\n\nvar _MatSlideToggleRequiredValidatorModule = function _MatSlideToggleRequiredValidatorModule() {\n  _classCallCheck(this, _MatSlideToggleRequiredValidatorModule);\n};\n\n_MatSlideToggleRequiredValidatorModule.ɵfac = function _MatSlideToggleRequiredValidatorModule_Factory(t) {\n  return new (t || _MatSlideToggleRequiredValidatorModule)();\n};\n\n_MatSlideToggleRequiredValidatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: _MatSlideToggleRequiredValidatorModule\n});\n_MatSlideToggleRequiredValidatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatSlideToggleRequiredValidatorModule, {\n    declarations: [MatSlideToggleRequiredValidator],\n    exports: [MatSlideToggleRequiredValidator]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n    type: NgModule,\n    args: [{\n      exports: [MatSlideToggleRequiredValidator],\n      declarations: [MatSlideToggleRequiredValidator]\n    }]\n  }], null, null);\n})();\n\nvar MatSlideToggleModule = function MatSlideToggleModule() {\n  _classCallCheck(this, MatSlideToggleModule);\n};\n\nMatSlideToggleModule.ɵfac = function MatSlideToggleModule_Factory(t) {\n  return new (t || MatSlideToggleModule)();\n};\n\nMatSlideToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatSlideToggleModule\n});\nMatSlideToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  imports: [[_MatSlideToggleRequiredValidatorModule, MatRippleModule, MatCommonModule, ObserversModule], _MatSlideToggleRequiredValidatorModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, {\n    declarations: function declarations() {\n      return [MatSlideToggle];\n    },\n    imports: function imports() {\n      return [_MatSlideToggleRequiredValidatorModule, MatRippleModule, MatCommonModule, ObserversModule];\n    },\n    exports: function exports() {\n      return [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n    type: NgModule,\n    args: [{\n      imports: [_MatSlideToggleRequiredValidatorModule, MatRippleModule, MatCommonModule, ObserversModule],\n      exports: [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule],\n      declarations: [MatSlideToggle]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule }; //# sourceMappingURL=slide-toggle.js.map","map":{"version":3,"sources":["/Users/mohammedelmourabit/xrp/xpr/node_modules/@angular/material/__ivy_ngcc__/fesm2015/slide-toggle.js"],"names":["ObserversModule","InjectionToken","forwardRef","EventEmitter","Component","ViewEncapsulation","ChangeDetectionStrategy","ElementRef","ChangeDetectorRef","Attribute","Inject","Optional","ViewChild","Input","Output","Directive","NgModule","mixinTabIndex","mixinColor","mixinDisableRipple","mixinDisabled","MatRippleModule","MatCommonModule","FocusMonitor","coerceBooleanProperty","NG_VALUE_ACCESSOR","NG_VALIDATORS","CheckboxRequiredValidator","ANIMATION_MODULE_TYPE","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","_c0","_c1","_c2","_c3","enterDuration","_c4","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","providedIn","factory","disableToggleValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","provide","useExisting","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_elementRef","_MatSlideToggleMixinBase","elementRef","_focusMonitor","_changeDetectorRef","tabIndex","defaults","_animationMode","_onChange","_","_onTouched","_uniqueId","_required","_checked","name","id","labelPosition","ariaLabel","ariaLabelledby","change","toggleChange","parseInt","value","markForCheck","monitor","subscribe","focusOrigin","_inputElement","nativeElement","focus","Promise","resolve","then","stopMonitoring","event","stopPropagation","emit","_emitChangeEvent","fn","isDisabled","disabled","options","origin","focusVia","detectChanges","ɵfac","MatSlideToggle_Factory","t","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","MatSlideToggle_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","_thumbEl","first","_thumbBarEl","hostAttrs","hostVars","hostBindings","MatSlideToggle_HostBindings","ɵɵhostProperty","ɵɵattribute","ɵɵclassProp","inputs","disableRipple","color","required","outputs","exportAs","features","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","consts","template","MatSlideToggle_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵlistener","MatSlideToggle_Template_input_change_4_listener","$event","_onChangeEvent","MatSlideToggle_Template_input_click_4_listener","_onInputClick","ɵɵelementEnd","ɵɵelement","MatSlideToggle_Template_span_cdkObserveContent_11_listener","_onLabelTextChange","ɵɵtext","ɵɵprojection","_r0","ɵɵreference","_r4","inputId","ɵɵadvance","textContent","trim","ɵɵproperty","toString","ɵɵpureFunction0","directives","MatRipple","CdkObserveContent","styles","encapsulation","changeDetection","ctorParameters","String","decorators","args","undefined","propDecorators","ngDevMode","ɵsetClassMetadata","selector","host","providers","None","OnPush","MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR","MatSlideToggleRequiredValidator","MatSlideToggleRequiredValidator_Factory","ɵMatSlideToggleRequiredValidator_BaseFactory","ɵdir","ɵɵdefineDirective","ɵɵgetInheritedFactory","_MatSlideToggleRequiredValidatorModule","_MatSlideToggleRequiredValidatorModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","ngJitMode","ɵɵsetNgModuleScope","declarations","exports","MatSlideToggleModule","MatSlideToggleModule_Factory","imports"],"mappings":"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","sourcesContent":["import { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\n\nconst _c0 = [\"thumbContainer\"];\nconst _c1 = [\"toggleBar\"];\nconst _c2 = [\"input\"];\nconst _c3 = function () { return { enterDuration: 150 }; };\nconst _c4 = [\"*\"];\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({ disableToggleValue: false })\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n/** @docs-private */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlideToggle),\n    multi: true\n};\n/** Change event object emitted by a MatSlideToggle. */\nclass MatSlideToggleChange {\n    constructor(\n    /** The source MatSlideToggle of the event. */\n    source, \n    /** The new `checked` value of the MatSlideToggle. */\n    checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, defaults, _animationMode) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.defaults = defaults;\n        this._animationMode = _animationMode;\n        this._onChange = (_) => { };\n        this._onTouched = () => { };\n        this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n        this._required = false;\n        this._checked = false;\n        /** Name value will be applied to the input element if present. */\n        this.name = null;\n        /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n        this.id = this._uniqueId;\n        /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n        this.labelPosition = 'after';\n        /** Used to set the aria-label attribute on the underlying input element. */\n        this.ariaLabel = null;\n        /** Used to set the aria-labelledby attribute on the underlying input element. */\n        this.ariaLabelledby = null;\n        /** An event will be dispatched each time the slide-toggle changes its value. */\n        this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed.\n         */\n        this.toggleChange = new EventEmitter();\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /** Whether the slide-toggle is required. */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /** Whether the slide-toggle element is checked or not. */\n    get checked() { return this._checked; }\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Returns the unique id for the visual hidden input. */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    ngAfterContentInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(focusOrigin => {\n            // Only forward focus manually when it was received programmatically or through the\n            // keyboard. We should not do this for mouse/touch focus for two reasons:\n            // 1. It can prevent clicks from landing in Chrome (see #18269).\n            // 2. They're already handled by the wrapping `label` element.\n            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n                this._inputElement.nativeElement.focus();\n            }\n            else if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                // we defer telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => this._onTouched());\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /** Method being called whenever the underlying input emits a change event. */\n    _onChangeEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        this.toggleChange.emit();\n        // When the slide toggle's config disables toggle change event by setting\n        // `disableToggleValue: true`, the slide toggle's value does not change, and the\n        // checked state of the underlying input needs to be changed back.\n        if (this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    }\n    /** Method being called whenever the slide-toggle has been clicked. */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /** Implemented as a part of ControlValueAccessor. */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Focuses the slide-toggle. */\n    focus(options, origin) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    /** Toggles the checked state of the slide-toggle. */\n    toggle() {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     */\n    _emitChangeEvent() {\n        this._onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n}\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) { return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatSlideToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSlideToggle, selectors: [[\"mat-slide-toggle\"]], viewQuery: function MatSlideToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 1);\n        ɵngcc0.ɵɵviewQuery(_c1, 1);\n        ɵngcc0.ɵɵviewQuery(_c2, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, hostAttrs: [1, \"mat-slide-toggle\"], hostVars: 12, hostBindings: function MatSlideToggle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : -1)(\"aria-label\", null)(\"aria-labelledby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], required: \"required\", checked: \"checked\" }, outputs: { change: \"change\", toggleChange: \"toggleChange\" }, exportAs: [\"matSlideToggle\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 16, vars: 18, consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]], template: function MatSlideToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n        ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) { return ctx._onChangeEvent($event); })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelement(10, \"div\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n        ɵngcc0.ɵɵtext(14, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(15);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        const _r4 = ɵngcc0.ɵɵreference(12);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked.toString())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c3));\n    } }, directives: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent], styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatSlideToggle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatSlideToggle.propDecorators = {\n    _thumbEl: [{ type: ViewChild, args: ['thumbContainer',] }],\n    _thumbBarEl: [{ type: ViewChild, args: ['toggleBar',] }],\n    name: [{ type: Input }],\n    id: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    required: [{ type: Input }],\n    checked: [{ type: Input }],\n    change: [{ type: Output }],\n    toggleChange: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-slide-toggle',\n                exportAs: 'matSlideToggle',\n                host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    // Needs to be `-1` so it can still receive programmatic focus.\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n                inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { name: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], toggleChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], _thumbEl: [{\n            type: ViewChild,\n            args: ['thumbContainer']\n        }], _thumbBarEl: [{\n            type: ViewChild,\n            args: ['toggleBar']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n    multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\n}\nMatSlideToggleRequiredValidator.ɵfac = function MatSlideToggleRequiredValidator_Factory(t) { return ɵMatSlideToggleRequiredValidator_BaseFactory(t || MatSlideToggleRequiredValidator); };\nMatSlideToggleRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSlideToggleRequiredValidator, selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatSlideToggleRequiredValidator_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based slide-toggle implementations. */\nclass _MatSlideToggleRequiredValidatorModule {\n}\n_MatSlideToggleRequiredValidatorModule.ɵfac = function _MatSlideToggleRequiredValidatorModule_Factory(t) { return new (t || _MatSlideToggleRequiredValidatorModule)(); };\n_MatSlideToggleRequiredValidatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: _MatSlideToggleRequiredValidatorModule });\n_MatSlideToggleRequiredValidatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatSlideToggleRequiredValidatorModule, { declarations: [MatSlideToggleRequiredValidator], exports: [MatSlideToggleRequiredValidator] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatSlideToggleRequiredValidator],\n                declarations: [MatSlideToggleRequiredValidator]\n            }]\n    }], null, null); })();\nclass MatSlideToggleModule {\n}\nMatSlideToggleModule.ɵfac = function MatSlideToggleModule_Factory(t) { return new (t || MatSlideToggleModule)(); };\nMatSlideToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSlideToggleModule });\nMatSlideToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[\n            _MatSlideToggleRequiredValidatorModule,\n            MatRippleModule,\n            MatCommonModule,\n            ObserversModule,\n        ], _MatSlideToggleRequiredValidatorModule, MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, { declarations: function () { return [MatSlideToggle]; }, imports: function () { return [_MatSlideToggleRequiredValidatorModule, MatRippleModule,\n        MatCommonModule,\n        ObserversModule]; }, exports: function () { return [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatRippleModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatSlideToggle,\n                    MatCommonModule\n                ],\n                declarations: [MatSlideToggle]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };\n\n//# sourceMappingURL=slide-toggle.js.map"]},"metadata":{},"sourceType":"module"}