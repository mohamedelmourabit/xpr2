{"ast":null,"code":"import _toConsumableArray from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _get from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createForOfIteratorHelper from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { isDataSource, _VIEW_REPEATER_STRATEGY, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/scrolling';\nvar _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]]];\nvar _c1 = [\"caption\", \"colgroup, col\"];\n\nfunction CdkTextColumn_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"th\", 3);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\n  }\n}\n\nfunction CdkTextColumn_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var data_r2 = ctx.$implicit;\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r1.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.dataAccessor(data_r2, ctx_r1.name), \" \");\n  }\n}\n\nexport { DataSource } from '@angular/cdk/collections';\nimport { Platform } from '@angular/cdk/platform';\nimport { ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport { InjectionToken, Directive, TemplateRef, Inject, Optional, Input, ContentChild, ElementRef, Injectable, NgZone, IterableDiffers, ViewContainerRef, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, ChangeDetectorRef, Attribute, SkipSelf, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { Subject, from, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n */\n\nfunction mixinHasStickyInput(base) {\n  return /*#__PURE__*/function (_base) {\n    _inherits(_class, _base);\n\n    var _super = _createSuper(_class);\n\n    function _class() {\n      var _this;\n\n      _classCallCheck(this, _class);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _super.call.apply(_super, [this].concat(args));\n      _this._sticky = false;\n      /** Whether the sticky input has changed since it was last checked. */\n\n      _this._hasStickyChanged = false;\n      return _this;\n    }\n    /** Whether sticky positioning should be applied. */\n\n\n    _createClass(_class, [{\n      key: \"sticky\",\n      get: function get() {\n        return this._sticky;\n      },\n      set: function set(v) {\n        var prevValue = this._sticky;\n        this._sticky = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._sticky;\n      }\n      /** Whether the sticky value has changed since this was last called. */\n\n    }, {\n      key: \"hasStickyChanged\",\n      value: function hasStickyChanged() {\n        var hasStickyChanged = this._hasStickyChanged;\n        this._hasStickyChanged = false;\n        return hasStickyChanged;\n      }\n      /** Resets the dirty check for cases where the sticky state has been used without checking. */\n\n    }, {\n      key: \"resetStickyChanged\",\n      value: function resetStickyChanged() {\n        this._hasStickyChanged = false;\n      }\n    }]);\n\n    return _class;\n  }(base);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\n\n\nvar CDK_TABLE = new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\n\nvar TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n\nvar CdkCellDef = function CdkCellDef(\n/** @docs-private */\ntemplate) {\n  _classCallCheck(this, CdkCellDef);\n\n  this.template = template;\n};\n\nCdkCellDef.ɵfac = function CdkCellDef_Factory(t) {\n  return new (t || CdkCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nCdkCellDef.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkCellDef,\n  selectors: [[\"\", \"cdkCellDef\", \"\"]]\n});\n\nCdkCellDef.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkCellDef]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n\n\nvar CdkHeaderCellDef = function CdkHeaderCellDef(\n/** @docs-private */\ntemplate) {\n  _classCallCheck(this, CdkHeaderCellDef);\n\n  this.template = template;\n};\n\nCdkHeaderCellDef.ɵfac = function CdkHeaderCellDef_Factory(t) {\n  return new (t || CdkHeaderCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nCdkHeaderCellDef.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkHeaderCellDef,\n  selectors: [[\"\", \"cdkHeaderCellDef\", \"\"]]\n});\n\nCdkHeaderCellDef.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkHeaderCellDef]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n\n\nvar CdkFooterCellDef = function CdkFooterCellDef(\n/** @docs-private */\ntemplate) {\n  _classCallCheck(this, CdkFooterCellDef);\n\n  this.template = template;\n};\n\nCdkFooterCellDef.ɵfac = function CdkFooterCellDef_Factory(t) {\n  return new (t || CdkFooterCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nCdkFooterCellDef.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkFooterCellDef,\n  selectors: [[\"\", \"cdkFooterCellDef\", \"\"]]\n});\n\nCdkFooterCellDef.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkFooterCellDef]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})(); // Boilerplate for applying mixins to CdkColumnDef.\n\n/** @docs-private */\n\n\nvar CdkColumnDefBase = function CdkColumnDefBase() {\n  _classCallCheck(this, CdkColumnDefBase);\n};\n\nvar _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\n\n\nvar CdkColumnDef = /*#__PURE__*/function (_CdkColumnDefBase2) {\n  _inherits(CdkColumnDef, _CdkColumnDefBase2);\n\n  var _super2 = _createSuper(CdkColumnDef);\n\n  function CdkColumnDef(_table) {\n    var _this2;\n\n    _classCallCheck(this, CdkColumnDef);\n\n    _this2 = _super2.call(this);\n    _this2._table = _table;\n    _this2._stickyEnd = false;\n    return _this2;\n  }\n  /** Unique name for this column. */\n\n\n  _createClass(CdkColumnDef, [{\n    key: \"name\",\n    get: function get() {\n      return this._name;\n    },\n    set: function set(name) {\n      this._setNameInput(name);\n    }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     */\n\n  }, {\n    key: \"stickyEnd\",\n    get: function get() {\n      return this._stickyEnd;\n    },\n    set: function set(v) {\n      var prevValue = this._stickyEnd;\n      this._stickyEnd = coerceBooleanProperty(v);\n      this._hasStickyChanged = prevValue !== this._stickyEnd;\n    }\n    /**\n     * Overridable method that sets the css classes that will be added to every cell in this\n     * column.\n     * In the future, columnCssClassName will change from type string[] to string and this\n     * will set a single string value.\n     * @docs-private\n     */\n\n  }, {\n    key: \"_updateColumnCssClassName\",\n    value: function _updateColumnCssClassName() {\n      this._columnCssClassName = [\"cdk-column-\".concat(this.cssClassFriendlyName)];\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n\n  }, {\n    key: \"_setNameInput\",\n    value: function _setNameInput(value) {\n      // If the directive is set without a name (updated programmatically), then this setter will\n      // trigger with an empty string and should not overwrite the programmatically set value.\n      if (value) {\n        this._name = value;\n        this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/ig, '-');\n\n        this._updateColumnCssClassName();\n      }\n    }\n  }]);\n\n  return CdkColumnDef;\n}(_CdkColumnDefBase);\n\nCdkColumnDef.ɵfac = function CdkColumnDef_Factory(t) {\n  return new (t || CdkColumnDef)(ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8));\n};\n\nCdkColumnDef.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkColumnDef,\n  selectors: [[\"\", \"cdkColumnDef\", \"\"]],\n  contentQueries: function CdkColumnDef_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkCellDef, 1);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderCellDef, 1);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterCellDef, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerCell = _t.first);\n    }\n  },\n  inputs: {\n    sticky: \"sticky\",\n    name: [\"cdkColumnDef\", \"name\"],\n    stickyEnd: \"stickyEnd\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n    useExisting: CdkColumnDef\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\nCdkColumnDef.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CDK_TABLE]\n    }, {\n      type: Optional\n    }]\n  }];\n};\n\nCdkColumnDef.propDecorators = {\n  name: [{\n    type: Input,\n    args: ['cdkColumnDef']\n  }],\n  stickyEnd: [{\n    type: Input,\n    args: ['stickyEnd']\n  }],\n  cell: [{\n    type: ContentChild,\n    args: [CdkCellDef]\n  }],\n  headerCell: [{\n    type: ContentChild,\n    args: [CdkHeaderCellDef]\n  }],\n  footerCell: [{\n    type: ContentChild,\n    args: [CdkFooterCellDef]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkColumnDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkColumnDef]',\n      inputs: ['sticky'],\n      providers: [{\n        provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n        useExisting: CdkColumnDef\n      }]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TABLE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    name: [{\n      type: Input,\n      args: ['cdkColumnDef']\n    }],\n    stickyEnd: [{\n      type: Input,\n      args: ['stickyEnd']\n    }],\n    cell: [{\n      type: ContentChild,\n      args: [CdkCellDef]\n    }],\n    headerCell: [{\n      type: ContentChild,\n      args: [CdkHeaderCellDef]\n    }],\n    footerCell: [{\n      type: ContentChild,\n      args: [CdkFooterCellDef]\n    }]\n  });\n})();\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\n\n\nvar BaseCdkCell = function BaseCdkCell(columnDef, elementRef) {\n  _classCallCheck(this, BaseCdkCell);\n\n  // If IE 11 is dropped before we switch to setting a single class name, change to multi param\n  // with destructuring.\n  var classList = elementRef.nativeElement.classList;\n\n  var _iterator = _createForOfIteratorHelper(columnDef._columnCssClassName),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var className = _step.value;\n      classList.add(className);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\n/** Header cell template container that adds the right classes and role. */\n\n\nvar CdkHeaderCell = /*#__PURE__*/function (_BaseCdkCell) {\n  _inherits(CdkHeaderCell, _BaseCdkCell);\n\n  var _super3 = _createSuper(CdkHeaderCell);\n\n  function CdkHeaderCell(columnDef, elementRef) {\n    _classCallCheck(this, CdkHeaderCell);\n\n    return _super3.call(this, columnDef, elementRef);\n  }\n\n  return CdkHeaderCell;\n}(BaseCdkCell);\n\nCdkHeaderCell.ɵfac = function CdkHeaderCell_Factory(t) {\n  return new (t || CdkHeaderCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nCdkHeaderCell.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkHeaderCell,\n  selectors: [[\"cdk-header-cell\"], [\"th\", \"cdk-header-cell\", \"\"]],\n  hostAttrs: [\"role\", \"columnheader\", 1, \"cdk-header-cell\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\nCdkHeaderCell.ctorParameters = function () {\n  return [{\n    type: CdkColumnDef\n  }, {\n    type: ElementRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCell, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-header-cell, th[cdk-header-cell]',\n      host: {\n        'class': 'cdk-header-cell',\n        'role': 'columnheader'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkColumnDef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/** Footer cell template container that adds the right classes and role. */\n\n\nvar CdkFooterCell = /*#__PURE__*/function (_BaseCdkCell2) {\n  _inherits(CdkFooterCell, _BaseCdkCell2);\n\n  var _super4 = _createSuper(CdkFooterCell);\n\n  function CdkFooterCell(columnDef, elementRef) {\n    _classCallCheck(this, CdkFooterCell);\n\n    return _super4.call(this, columnDef, elementRef);\n  }\n\n  return CdkFooterCell;\n}(BaseCdkCell);\n\nCdkFooterCell.ɵfac = function CdkFooterCell_Factory(t) {\n  return new (t || CdkFooterCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nCdkFooterCell.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkFooterCell,\n  selectors: [[\"cdk-footer-cell\"], [\"td\", \"cdk-footer-cell\", \"\"]],\n  hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-footer-cell\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\nCdkFooterCell.ctorParameters = function () {\n  return [{\n    type: CdkColumnDef\n  }, {\n    type: ElementRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCell, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n      host: {\n        'class': 'cdk-footer-cell',\n        'role': 'gridcell'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkColumnDef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/** Cell template container that adds the right classes and role. */\n\n\nvar CdkCell = /*#__PURE__*/function (_BaseCdkCell3) {\n  _inherits(CdkCell, _BaseCdkCell3);\n\n  var _super5 = _createSuper(CdkCell);\n\n  function CdkCell(columnDef, elementRef) {\n    _classCallCheck(this, CdkCell);\n\n    return _super5.call(this, columnDef, elementRef);\n  }\n\n  return CdkCell;\n}(BaseCdkCell);\n\nCdkCell.ɵfac = function CdkCell_Factory(t) {\n  return new (t || CdkCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nCdkCell.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkCell,\n  selectors: [[\"cdk-cell\"], [\"td\", \"cdk-cell\", \"\"]],\n  hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-cell\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\nCdkCell.ctorParameters = function () {\n  return [{\n    type: CdkColumnDef\n  }, {\n    type: ElementRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCell, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-cell, td[cdk-cell]',\n      host: {\n        'class': 'cdk-cell',\n        'role': 'gridcell'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkColumnDef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @docs-private\n */\n\n\nvar _Schedule = function _Schedule() {\n  _classCallCheck(this, _Schedule);\n\n  this.tasks = [];\n  this.endTasks = [];\n};\n/** Injection token used to provide a coalesced style scheduler. */\n\n\nvar _COALESCED_STYLE_SCHEDULER = new InjectionToken('_COALESCED_STYLE_SCHEDULER');\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\n\n\nvar _CoalescedStyleScheduler = /*#__PURE__*/function () {\n  function _CoalescedStyleScheduler(_ngZone) {\n    _classCallCheck(this, _CoalescedStyleScheduler);\n\n    this._ngZone = _ngZone;\n    this._currentSchedule = null;\n    this._destroyed = new Subject();\n  }\n  /**\n   * Schedules the specified task to run at the end of the current VM turn.\n   */\n\n\n  _createClass(_CoalescedStyleScheduler, [{\n    key: \"schedule\",\n    value: function schedule(task) {\n      this._createScheduleIfNeeded();\n\n      this._currentSchedule.tasks.push(task);\n    }\n    /**\n     * Schedules the specified task to run after other scheduled tasks at the end of the current\n     * VM turn.\n     */\n\n  }, {\n    key: \"scheduleEnd\",\n    value: function scheduleEnd(task) {\n      this._createScheduleIfNeeded();\n\n      this._currentSchedule.endTasks.push(task);\n    }\n    /** Prevent any further tasks from running. */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n  }, {\n    key: \"_createScheduleIfNeeded\",\n    value: function _createScheduleIfNeeded() {\n      var _this3 = this;\n\n      if (this._currentSchedule) {\n        return;\n      }\n\n      this._currentSchedule = new _Schedule();\n\n      this._getScheduleObservable().pipe(takeUntil(this._destroyed)).subscribe(function () {\n        while (_this3._currentSchedule.tasks.length || _this3._currentSchedule.endTasks.length) {\n          var schedule = _this3._currentSchedule; // Capture new tasks scheduled by the current set of tasks.\n\n          _this3._currentSchedule = new _Schedule();\n\n          var _iterator2 = _createForOfIteratorHelper(schedule.tasks),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var task = _step2.value;\n              task();\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          var _iterator3 = _createForOfIteratorHelper(schedule.endTasks),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var _task = _step3.value;\n\n              _task();\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        }\n\n        _this3._currentSchedule = null;\n      });\n    }\n  }, {\n    key: \"_getScheduleObservable\",\n    value: function _getScheduleObservable() {\n      // Use onStable when in the context of an ongoing change detection cycle so that we\n      // do not accidentally trigger additional cycles.\n      return this._ngZone.isStable ? from(Promise.resolve(undefined)) : this._ngZone.onStable.pipe(take(1));\n    }\n  }]);\n\n  return _CoalescedStyleScheduler;\n}();\n\n_CoalescedStyleScheduler.ɵfac = function _CoalescedStyleScheduler_Factory(t) {\n  return new (t || _CoalescedStyleScheduler)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\n_CoalescedStyleScheduler.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: _CoalescedStyleScheduler,\n  factory: _CoalescedStyleScheduler.ɵfac\n});\n\n_CoalescedStyleScheduler.ctorParameters = function () {\n  return [{\n    type: NgZone\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_CoalescedStyleScheduler, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\n\n\nvar CDK_ROW_TEMPLATE = \"<ng-container cdkCellOutlet></ng-container>\";\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\n\nvar BaseRowDef = /*#__PURE__*/function () {\n  function BaseRowDef(\n  /** @docs-private */\n  template, _differs) {\n    _classCallCheck(this, BaseRowDef);\n\n    this.template = template;\n    this._differs = _differs;\n  }\n\n  _createClass(BaseRowDef, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n      // of the columns property or an empty array if none is provided.\n      if (!this._columnsDiffer) {\n        var columns = changes['columns'] && changes['columns'].currentValue || [];\n        this._columnsDiffer = this._differs.find(columns).create();\n\n        this._columnsDiffer.diff(columns);\n      }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n\n  }, {\n    key: \"getColumnsDiff\",\n    value: function getColumnsDiff() {\n      return this._columnsDiffer.diff(this.columns);\n    }\n    /** Gets this row def's relevant cell template from the provided column def. */\n\n  }, {\n    key: \"extractCellTemplate\",\n    value: function extractCellTemplate(column) {\n      if (this instanceof CdkHeaderRowDef) {\n        return column.headerCell.template;\n      }\n\n      if (this instanceof CdkFooterRowDef) {\n        return column.footerCell.template;\n      } else {\n        return column.cell.template;\n      }\n    }\n  }]);\n\n  return BaseRowDef;\n}();\n\nBaseRowDef.ɵfac = function BaseRowDef_Factory(t) {\n  return new (t || BaseRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers));\n};\n\nBaseRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: BaseRowDef,\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nBaseRowDef.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }, {\n    type: IterableDiffers\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseRowDef, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }];\n  }, null);\n})(); // Boilerplate for applying mixins to CdkHeaderRowDef.\n\n/** @docs-private */\n\n\nvar CdkHeaderRowDefBase = /*#__PURE__*/function (_BaseRowDef) {\n  _inherits(CdkHeaderRowDefBase, _BaseRowDef);\n\n  var _super6 = _createSuper(CdkHeaderRowDefBase);\n\n  function CdkHeaderRowDefBase() {\n    _classCallCheck(this, CdkHeaderRowDefBase);\n\n    return _super6.apply(this, arguments);\n  }\n\n  return CdkHeaderRowDefBase;\n}(BaseRowDef);\n\nvar _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n\n\nvar CdkHeaderRowDef = /*#__PURE__*/function (_CdkHeaderRowDefBase2) {\n  _inherits(CdkHeaderRowDef, _CdkHeaderRowDefBase2);\n\n  var _super7 = _createSuper(CdkHeaderRowDef);\n\n  function CdkHeaderRowDef(template, _differs, _table) {\n    var _this4;\n\n    _classCallCheck(this, CdkHeaderRowDef);\n\n    _this4 = _super7.call(this, template, _differs);\n    _this4._table = _table;\n    return _this4;\n  } // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\n\n\n  _createClass(CdkHeaderRowDef, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      _get(_getPrototypeOf(CdkHeaderRowDef.prototype), \"ngOnChanges\", this).call(this, changes);\n    }\n  }]);\n\n  return CdkHeaderRowDef;\n}(_CdkHeaderRowDefBase);\n\nCdkHeaderRowDef.ɵfac = function CdkHeaderRowDef_Factory(t) {\n  return new (t || CdkHeaderRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8));\n};\n\nCdkHeaderRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkHeaderRowDef,\n  selectors: [[\"\", \"cdkHeaderRowDef\", \"\"]],\n  inputs: {\n    columns: [\"cdkHeaderRowDef\", \"columns\"],\n    sticky: [\"cdkHeaderRowDefSticky\", \"sticky\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nCdkHeaderRowDef.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }, {\n    type: IterableDiffers\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CDK_TABLE]\n    }, {\n      type: Optional\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkHeaderRowDef]',\n      inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky']\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TABLE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})(); // Boilerplate for applying mixins to CdkFooterRowDef.\n\n/** @docs-private */\n\n\nvar CdkFooterRowDefBase = /*#__PURE__*/function (_BaseRowDef2) {\n  _inherits(CdkFooterRowDefBase, _BaseRowDef2);\n\n  var _super8 = _createSuper(CdkFooterRowDefBase);\n\n  function CdkFooterRowDefBase() {\n    _classCallCheck(this, CdkFooterRowDefBase);\n\n    return _super8.apply(this, arguments);\n  }\n\n  return CdkFooterRowDefBase;\n}(BaseRowDef);\n\nvar _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n\n\nvar CdkFooterRowDef = /*#__PURE__*/function (_CdkFooterRowDefBase2) {\n  _inherits(CdkFooterRowDef, _CdkFooterRowDefBase2);\n\n  var _super9 = _createSuper(CdkFooterRowDef);\n\n  function CdkFooterRowDef(template, _differs, _table) {\n    var _this5;\n\n    _classCallCheck(this, CdkFooterRowDef);\n\n    _this5 = _super9.call(this, template, _differs);\n    _this5._table = _table;\n    return _this5;\n  } // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\n\n\n  _createClass(CdkFooterRowDef, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      _get(_getPrototypeOf(CdkFooterRowDef.prototype), \"ngOnChanges\", this).call(this, changes);\n    }\n  }]);\n\n  return CdkFooterRowDef;\n}(_CdkFooterRowDefBase);\n\nCdkFooterRowDef.ɵfac = function CdkFooterRowDef_Factory(t) {\n  return new (t || CdkFooterRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8));\n};\n\nCdkFooterRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkFooterRowDef,\n  selectors: [[\"\", \"cdkFooterRowDef\", \"\"]],\n  inputs: {\n    columns: [\"cdkFooterRowDef\", \"columns\"],\n    sticky: [\"cdkFooterRowDefSticky\", \"sticky\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nCdkFooterRowDef.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }, {\n    type: IterableDiffers\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CDK_TABLE]\n    }, {\n      type: Optional\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkFooterRowDef]',\n      inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky']\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TABLE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n\n\nvar CdkRowDef = /*#__PURE__*/function (_BaseRowDef3) {\n  _inherits(CdkRowDef, _BaseRowDef3);\n\n  var _super10 = _createSuper(CdkRowDef);\n\n  // TODO(andrewseguin): Add an input for providing a switch function to determine\n  //   if this template should be used.\n  function CdkRowDef(template, _differs, _table) {\n    var _this6;\n\n    _classCallCheck(this, CdkRowDef);\n\n    _this6 = _super10.call(this, template, _differs);\n    _this6._table = _table;\n    return _this6;\n  }\n\n  return CdkRowDef;\n}(BaseRowDef);\n\nCdkRowDef.ɵfac = function CdkRowDef_Factory(t) {\n  return new (t || CdkRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8));\n};\n\nCdkRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkRowDef,\n  selectors: [[\"\", \"cdkRowDef\", \"\"]],\n  inputs: {\n    columns: [\"cdkRowDefColumns\", \"columns\"],\n    when: [\"cdkRowDefWhen\", \"when\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\nCdkRowDef.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }, {\n    type: IterableDiffers\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CDK_TABLE]\n    }, {\n      type: Optional\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkRowDef]',\n      inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen']\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TABLE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\n\n\nvar CdkCellOutlet = /*#__PURE__*/function () {\n  function CdkCellOutlet(_viewContainer) {\n    _classCallCheck(this, CdkCellOutlet);\n\n    this._viewContainer = _viewContainer;\n    CdkCellOutlet.mostRecentCellOutlet = this;\n  }\n\n  _createClass(CdkCellOutlet, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      // If this was the last outlet being rendered in the view, remove the reference\n      // from the static property after it has been destroyed to avoid leaking memory.\n      if (CdkCellOutlet.mostRecentCellOutlet === this) {\n        CdkCellOutlet.mostRecentCellOutlet = null;\n      }\n    }\n  }]);\n\n  return CdkCellOutlet;\n}();\n\nCdkCellOutlet.ɵfac = function CdkCellOutlet_Factory(t) {\n  return new (t || CdkCellOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n};\n\nCdkCellOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkCellOutlet,\n  selectors: [[\"\", \"cdkCellOutlet\", \"\"]]\n});\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\n\nCdkCellOutlet.mostRecentCellOutlet = null;\n\nCdkCellOutlet.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkCellOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }];\n  }, null);\n})();\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n\n\nvar CdkHeaderRow = function CdkHeaderRow() {\n  _classCallCheck(this, CdkHeaderRow);\n};\n\nCdkHeaderRow.ɵfac = function CdkHeaderRow_Factory(t) {\n  return new (t || CdkHeaderRow)();\n};\n\nCdkHeaderRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: CdkHeaderRow,\n  selectors: [[\"cdk-header-row\"], [\"tr\", \"cdk-header-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"cdk-header-row\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function CdkHeaderRow_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  directives: [CdkCellOutlet],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRow, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-header-row, tr[cdk-header-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'cdk-header-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, null);\n})();\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n\n\nvar CdkFooterRow = function CdkFooterRow() {\n  _classCallCheck(this, CdkFooterRow);\n};\n\nCdkFooterRow.ɵfac = function CdkFooterRow_Factory(t) {\n  return new (t || CdkFooterRow)();\n};\n\nCdkFooterRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: CdkFooterRow,\n  selectors: [[\"cdk-footer-row\"], [\"tr\", \"cdk-footer-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"cdk-footer-row\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function CdkFooterRow_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  directives: [CdkCellOutlet],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRow, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-footer-row, tr[cdk-footer-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'cdk-footer-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, null);\n})();\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n\n\nvar CdkRow = function CdkRow() {\n  _classCallCheck(this, CdkRow);\n};\n\nCdkRow.ɵfac = function CdkRow_Factory(t) {\n  return new (t || CdkRow)();\n};\n\nCdkRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: CdkRow,\n  selectors: [[\"cdk-row\"], [\"tr\", \"cdk-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"cdk-row\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function CdkRow_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  directives: [CdkCellOutlet],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRow, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-row, tr[cdk-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'cdk-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, null);\n})();\n/** Row that can be used to display a message when no data is shown in the table. */\n\n\nvar CdkNoDataRow = function CdkNoDataRow(templateRef) {\n  _classCallCheck(this, CdkNoDataRow);\n\n  this.templateRef = templateRef;\n};\n\nCdkNoDataRow.ɵfac = function CdkNoDataRow_Factory(t) {\n  return new (t || CdkNoDataRow)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nCdkNoDataRow.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkNoDataRow,\n  selectors: [[\"ng-template\", \"cdkNoDataRow\", \"\"]]\n});\n\nCdkNoDataRow.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkNoDataRow, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[cdkNoDataRow]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\n\n\nvar STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\n\nvar StickyStyler = /*#__PURE__*/function () {\n  /**\n   * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n   *     that uses the native `<table>` element.\n   * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n   *     sticky positioning applied.\n   * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n   *     by reversing left/right positions.\n   * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n   * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n   *     using inline styles. If false, it is assumed that position: sticky is included in\n   *     the component stylesheet for _stickCellCss.\n   * @param _positionListener A listener that is notified of changes to sticky rows/columns\n   *     and their dimensions.\n   */\n  function StickyStyler(_isNativeHtmlTable, _stickCellCss, direction,\n  /**\n   * @deprecated `_coalescedStyleScheduler` parameter to become required.\n   * @breaking-change 11.0.0\n   */\n  _coalescedStyleScheduler) {\n    var _isBrowser = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n\n    var _needsPositionStickyOnElement = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n\n    var _positionListener = arguments.length > 6 ? arguments[6] : undefined;\n\n    _classCallCheck(this, StickyStyler);\n\n    this._isNativeHtmlTable = _isNativeHtmlTable;\n    this._stickCellCss = _stickCellCss;\n    this.direction = direction;\n    this._coalescedStyleScheduler = _coalescedStyleScheduler;\n    this._isBrowser = _isBrowser;\n    this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n    this._positionListener = _positionListener;\n    this._cachedCellWidths = [];\n    this._borderCellCss = {\n      'top': \"\".concat(_stickCellCss, \"-border-elem-top\"),\n      'bottom': \"\".concat(_stickCellCss, \"-border-elem-bottom\"),\n      'left': \"\".concat(_stickCellCss, \"-border-elem-left\"),\n      'right': \"\".concat(_stickCellCss, \"-border-elem-right\")\n    };\n  }\n  /**\n   * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n   * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n   * @param rows The list of rows that should be cleared from sticking in the provided directions\n   * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n   */\n\n\n  _createClass(StickyStyler, [{\n    key: \"clearStickyPositioning\",\n    value: function clearStickyPositioning(rows, stickyDirections) {\n      var _this7 = this;\n\n      var elementsToClear = [];\n\n      var _iterator4 = _createForOfIteratorHelper(rows),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var row = _step4.value;\n\n          // If the row isn't an element (e.g. if it's an `ng-container`),\n          // it won't have inline styles or `children` so we skip it.\n          if (row.nodeType !== row.ELEMENT_NODE) {\n            continue;\n          }\n\n          elementsToClear.push(row);\n\n          for (var i = 0; i < row.children.length; i++) {\n            elementsToClear.push(row.children[i]);\n          }\n        } // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      this._scheduleStyleChanges(function () {\n        var _iterator5 = _createForOfIteratorHelper(elementsToClear),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var element = _step5.value;\n\n            _this7._removeStickyStyle(element, stickyDirections);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      });\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n     *     column cell. If `false` cached widths will be used instead.\n     */\n\n  }, {\n    key: \"updateStickyColumns\",\n    value: function updateStickyColumns(rows, stickyStartStates, stickyEndStates) {\n      var _this8 = this;\n\n      var recalculateCellWidths = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n      if (!rows.length || !this._isBrowser || !(stickyStartStates.some(function (state) {\n        return state;\n      }) || stickyEndStates.some(function (state) {\n        return state;\n      }))) {\n        if (this._positionListener) {\n          this._positionListener.stickyColumnsUpdated({\n            sizes: []\n          });\n\n          this._positionListener.stickyEndColumnsUpdated({\n            sizes: []\n          });\n        }\n\n        return;\n      }\n\n      var firstRow = rows[0];\n      var numCells = firstRow.children.length;\n\n      var cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n\n      var startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n\n      var endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n\n      var lastStickyStart = stickyStartStates.lastIndexOf(true);\n      var firstStickyEnd = stickyEndStates.indexOf(true); // Coalesce with sticky row updates (and potentially other changes like column resize).\n\n      this._scheduleStyleChanges(function () {\n        var isRtl = _this8.direction === 'rtl';\n        var start = isRtl ? 'right' : 'left';\n        var end = isRtl ? 'left' : 'right';\n\n        var _iterator6 = _createForOfIteratorHelper(rows),\n            _step6;\n\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var row = _step6.value;\n\n            for (var i = 0; i < numCells; i++) {\n              var cell = row.children[i];\n\n              if (stickyStartStates[i]) {\n                _this8._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n              }\n\n              if (stickyEndStates[i]) {\n                _this8._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n              }\n            }\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n\n        if (_this8._positionListener) {\n          _this8._positionListener.stickyColumnsUpdated({\n            sizes: lastStickyStart === -1 ? [] : cellWidths.slice(0, lastStickyStart + 1).map(function (width, index) {\n              return stickyStartStates[index] ? width : null;\n            })\n          });\n\n          _this8._positionListener.stickyEndColumnsUpdated({\n            sizes: firstStickyEnd === -1 ? [] : cellWidths.slice(firstStickyEnd).map(function (width, index) {\n              return stickyEndStates[index + firstStickyEnd] ? width : null;\n            }).reverse()\n          });\n        }\n      });\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     */\n\n  }, {\n    key: \"stickRows\",\n    value: function stickRows(rowsToStick, stickyStates, position) {\n      var _this9 = this;\n\n      // Since we can't measure the rows on the server, we can't stick the rows properly.\n      if (!this._isBrowser) {\n        return;\n      } // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n      // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n      // sticky states need to be reversed as well.\n\n\n      var rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n      var states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates; // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n\n      var stickyOffsets = [];\n      var stickyCellHeights = [];\n      var elementsToStick = [];\n\n      for (var rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n        stickyOffsets[rowIndex] = stickyOffset;\n\n        if (!states[rowIndex]) {\n          continue;\n        }\n\n        var row = rows[rowIndex];\n        elementsToStick[rowIndex] = this._isNativeHtmlTable ? Array.from(row.children) : [row];\n        var height = row.getBoundingClientRect().height;\n        stickyOffset += height;\n        stickyCellHeights[rowIndex] = height;\n      }\n\n      var borderedRowIndex = states.lastIndexOf(true); // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n      // (and potentially other changes like column resize).\n\n      this._scheduleStyleChanges(function () {\n        var _a, _b;\n\n        for (var _rowIndex = 0; _rowIndex < rows.length; _rowIndex++) {\n          if (!states[_rowIndex]) {\n            continue;\n          }\n\n          var offset = stickyOffsets[_rowIndex];\n          var isBorderedRowIndex = _rowIndex === borderedRowIndex;\n\n          var _iterator7 = _createForOfIteratorHelper(elementsToStick[_rowIndex]),\n              _step7;\n\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var element = _step7.value;\n\n              _this9._addStickyStyle(element, position, offset, isBorderedRowIndex);\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n        }\n\n        if (position === 'top') {\n          (_a = _this9._positionListener) === null || _a === void 0 ? void 0 : _a.stickyHeaderRowsUpdated({\n            sizes: stickyCellHeights,\n            elements: elementsToStick\n          });\n        } else {\n          (_b = _this9._positionListener) === null || _b === void 0 ? void 0 : _b.stickyFooterRowsUpdated({\n            sizes: stickyCellHeights,\n            elements: elementsToStick\n          });\n        }\n      });\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     */\n\n  }, {\n    key: \"updateStickyFooterContainer\",\n    value: function updateStickyFooterContainer(tableElement, stickyStates) {\n      var _this10 = this;\n\n      if (!this._isNativeHtmlTable) {\n        return;\n      }\n\n      var tfoot = tableElement.querySelector('tfoot'); // Coalesce with other sticky updates (and potentially other changes like column resize).\n\n      this._scheduleStyleChanges(function () {\n        if (stickyStates.some(function (state) {\n          return !state;\n        })) {\n          _this10._removeStickyStyle(tfoot, ['bottom']);\n        } else {\n          _this10._addStickyStyle(tfoot, 'bottom', 0, false);\n        }\n      });\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     */\n\n  }, {\n    key: \"_removeStickyStyle\",\n    value: function _removeStickyStyle(element, stickyDirections) {\n      var _iterator8 = _createForOfIteratorHelper(stickyDirections),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var dir = _step8.value;\n          element.style[dir] = '';\n          element.classList.remove(this._borderCellCss[dir]);\n        } // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        // Short-circuit checking element.style[dir] for stickyDirections as they\n        // were already removed above.\n\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      var hasDirection = STICKY_DIRECTIONS.some(function (dir) {\n        return stickyDirections.indexOf(dir) === -1 && element.style[dir];\n      });\n\n      if (hasDirection) {\n        element.style.zIndex = this._getCalculatedZIndex(element);\n      } else {\n        // When not hasDirection, _getCalculatedZIndex will always return ''.\n        element.style.zIndex = '';\n\n        if (this._needsPositionStickyOnElement) {\n          element.style.position = '';\n        }\n\n        element.classList.remove(this._stickCellCss);\n      }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     */\n\n  }, {\n    key: \"_addStickyStyle\",\n    value: function _addStickyStyle(element, dir, dirValue, isBorderElement) {\n      element.classList.add(this._stickCellCss);\n\n      if (isBorderElement) {\n        element.classList.add(this._borderCellCss[dir]);\n      }\n\n      element.style[dir] = \"\".concat(dirValue, \"px\");\n      element.style.zIndex = this._getCalculatedZIndex(element);\n\n      if (this._needsPositionStickyOnElement) {\n        element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n      }\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     */\n\n  }, {\n    key: \"_getCalculatedZIndex\",\n    value: function _getCalculatedZIndex(element) {\n      var zIndexIncrements = {\n        top: 100,\n        bottom: 10,\n        left: 1,\n        right: 1\n      };\n      var zIndex = 0; // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n      // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n      // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n\n      var _iterator9 = _createForOfIteratorHelper(STICKY_DIRECTIONS),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var dir = _step9.value;\n\n          if (element.style[dir]) {\n            zIndex += zIndexIncrements[dir];\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      return zIndex ? \"\".concat(zIndex) : '';\n    }\n    /** Gets the widths for each cell in the provided row. */\n\n  }, {\n    key: \"_getCellWidths\",\n    value: function _getCellWidths(row) {\n      var recalculateCellWidths = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (!recalculateCellWidths && this._cachedCellWidths.length) {\n        return this._cachedCellWidths;\n      }\n\n      var cellWidths = [];\n      var firstRowCells = row.children;\n\n      for (var i = 0; i < firstRowCells.length; i++) {\n        var cell = firstRowCells[i];\n        cellWidths.push(cell.getBoundingClientRect().width);\n      }\n\n      this._cachedCellWidths = cellWidths;\n      return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n\n  }, {\n    key: \"_getStickyStartColumnPositions\",\n    value: function _getStickyStartColumnPositions(widths, stickyStates) {\n      var positions = [];\n      var nextPosition = 0;\n\n      for (var i = 0; i < widths.length; i++) {\n        if (stickyStates[i]) {\n          positions[i] = nextPosition;\n          nextPosition += widths[i];\n        }\n      }\n\n      return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n\n  }, {\n    key: \"_getStickyEndColumnPositions\",\n    value: function _getStickyEndColumnPositions(widths, stickyStates) {\n      var positions = [];\n      var nextPosition = 0;\n\n      for (var i = widths.length; i > 0; i--) {\n        if (stickyStates[i]) {\n          positions[i] = nextPosition;\n          nextPosition += widths[i];\n        }\n      }\n\n      return positions;\n    }\n    /**\n     * Schedules styles to be applied when the style scheduler deems appropriate.\n     * @breaking-change 11.0.0 This method can be removed in favor of calling\n     * `CoalescedStyleScheduler.schedule` directly once the scheduler is a required parameter.\n     */\n\n  }, {\n    key: \"_scheduleStyleChanges\",\n    value: function _scheduleStyleChanges(changes) {\n      if (this._coalescedStyleScheduler) {\n        this._coalescedStyleScheduler.schedule(changes);\n      } else {\n        changes();\n      }\n    }\n  }]);\n\n  return StickyStyler;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\n\n\nfunction getTableUnknownColumnError(id) {\n  return Error(\"Could not find column with id \\\"\".concat(id, \"\\\".\"));\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\n\n\nfunction getTableDuplicateColumnNameError(name) {\n  return Error(\"Duplicate column definition name provided: \\\"\".concat(name, \"\\\".\"));\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\n\n\nfunction getTableMultipleDefaultRowDefsError() {\n  return Error(\"There can only be one default row without a when predicate function.\");\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\n\n\nfunction getTableMissingMatchingRowDefError(data) {\n  return Error(\"Could not find a matching row definition for the\" + \"provided row data: \".concat(JSON.stringify(data)));\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\n\n\nfunction getTableMissingRowDefsError() {\n  return Error('Missing definitions for header, footer, and row; ' + 'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\n\n\nfunction getTableUnknownDataSourceError() {\n  return Error(\"Provided data source did not match an array, Observable, or DataSource\");\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\n\n\nfunction getTableTextColumnMissingParentTableError() {\n  return Error(\"Text column could not find a parent table for registration.\");\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\n\n\nfunction getTableTextColumnMissingNameError() {\n  return Error(\"Table text column must have a name.\");\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The injection token used to specify the StickyPositioningListener. */\n\n\nvar STICKY_POSITIONING_LISTENER = new InjectionToken('CDK_SPL');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\n\nvar DataRowOutlet = function DataRowOutlet(viewContainer, elementRef) {\n  _classCallCheck(this, DataRowOutlet);\n\n  this.viewContainer = viewContainer;\n  this.elementRef = elementRef;\n};\n\nDataRowOutlet.ɵfac = function DataRowOutlet_Factory(t) {\n  return new (t || DataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nDataRowOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: DataRowOutlet,\n  selectors: [[\"\", \"rowOutlet\", \"\"]]\n});\n\nDataRowOutlet.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }, {\n    type: ElementRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[rowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\n\n\nvar HeaderRowOutlet = function HeaderRowOutlet(viewContainer, elementRef) {\n  _classCallCheck(this, HeaderRowOutlet);\n\n  this.viewContainer = viewContainer;\n  this.elementRef = elementRef;\n};\n\nHeaderRowOutlet.ɵfac = function HeaderRowOutlet_Factory(t) {\n  return new (t || HeaderRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nHeaderRowOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: HeaderRowOutlet,\n  selectors: [[\"\", \"headerRowOutlet\", \"\"]]\n});\n\nHeaderRowOutlet.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }, {\n    type: ElementRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeaderRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[headerRowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\n\n\nvar FooterRowOutlet = function FooterRowOutlet(viewContainer, elementRef) {\n  _classCallCheck(this, FooterRowOutlet);\n\n  this.viewContainer = viewContainer;\n  this.elementRef = elementRef;\n};\n\nFooterRowOutlet.ɵfac = function FooterRowOutlet_Factory(t) {\n  return new (t || FooterRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nFooterRowOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: FooterRowOutlet,\n  selectors: [[\"\", \"footerRowOutlet\", \"\"]]\n});\n\nFooterRowOutlet.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }, {\n    type: ElementRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FooterRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[footerRowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\n\n\nvar NoDataRowOutlet = function NoDataRowOutlet(viewContainer, elementRef) {\n  _classCallCheck(this, NoDataRowOutlet);\n\n  this.viewContainer = viewContainer;\n  this.elementRef = elementRef;\n};\n\nNoDataRowOutlet.ɵfac = function NoDataRowOutlet_Factory(t) {\n  return new (t || NoDataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nNoDataRowOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: NoDataRowOutlet,\n  selectors: [[\"\", \"noDataRowOutlet\", \"\"]]\n});\n\nNoDataRowOutlet.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }, {\n    type: ElementRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NoDataRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[noDataRowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\n\n\nvar CDK_TABLE_TEMPLATE = // Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n\"\\n  <ng-content select=\\\"caption\\\"></ng-content>\\n  <ng-content select=\\\"colgroup, col\\\"></ng-content>\\n  <ng-container headerRowOutlet></ng-container>\\n  <ng-container rowOutlet></ng-container>\\n  <ng-container noDataRowOutlet></ng-container>\\n  <ng-container footerRowOutlet></ng-container>\\n\";\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\n\nvar RowViewRef = /*#__PURE__*/function (_EmbeddedViewRef) {\n  _inherits(RowViewRef, _EmbeddedViewRef);\n\n  var _super11 = _createSuper(RowViewRef);\n\n  function RowViewRef() {\n    _classCallCheck(this, RowViewRef);\n\n    return _super11.apply(this, arguments);\n  }\n\n  return RowViewRef;\n}(EmbeddedViewRef);\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\n\n\nvar CdkTable = /*#__PURE__*/function () {\n  function CdkTable(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform,\n  /**\n   * @deprecated `_coalescedStyleScheduler`, `_viewRepeater` and `_viewportRuler`\n   *    parameters to become required.\n   * @breaking-change 11.0.0\n   */\n  _viewRepeater, _coalescedStyleScheduler, _stickyPositioningListener, // Optional for backwards compatibility. The viewport ruler is provided in root. Therefore,\n  // this property will never be null.\n  // tslint:disable-next-line: lightweight-tokens\n  _viewportRuler) {\n    _classCallCheck(this, CdkTable);\n\n    this._differs = _differs;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    this._dir = _dir;\n    this._platform = _platform;\n    this._viewRepeater = _viewRepeater;\n    this._coalescedStyleScheduler = _coalescedStyleScheduler;\n    this._stickyPositioningListener = _stickyPositioningListener;\n    this._viewportRuler = _viewportRuler;\n    /** Subject that emits when the component has been destroyed. */\n\n    this._onDestroy = new Subject();\n    /**\n     * Map of all the user's defined columns (header, data, and footer cell template) identified by\n     * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n     * any custom column definitions added to `_customColumnDefs`.\n     */\n\n    this._columnDefsByName = new Map();\n    /**\n     * Column definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * column definitions as *its* content child.\n     */\n\n    this._customColumnDefs = new Set();\n    /**\n     * Data row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in data rows as *its* content child.\n     */\n\n    this._customRowDefs = new Set();\n    /**\n     * Header row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in header rows as *its* content child.\n     */\n\n    this._customHeaderRowDefs = new Set();\n    /**\n     * Footer row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n     * built-in footer row as *its* content child.\n     */\n\n    this._customFooterRowDefs = new Set();\n    /**\n     * Whether the header row definition has been changed. Triggers an update to the header row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     */\n\n    this._headerRowDefChanged = true;\n    /**\n     * Whether the footer row definition has been changed. Triggers an update to the footer row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     */\n\n    this._footerRowDefChanged = true;\n    /**\n     * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n     * change.\n     */\n\n    this._stickyColumnStylesNeedReset = true;\n    /**\n     * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n     * `false`, cached values will be used instead. This is only applicable to tables with\n     * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n     */\n\n    this._forceRecalculateCellWidths = true;\n    /**\n     * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n     * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n     * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n     * and row template matches, which allows the `IterableDiffer` to check rows by reference\n     * and understand which rows are added/moved/removed.\n     *\n     * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n     * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n     * contains an array of created pairs. The array is necessary to handle cases where the data\n     * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n     * stored.\n     */\n\n    this._cachedRenderRowsMap = new Map();\n    /**\n     * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n     * table subclasses.\n     */\n\n    this.stickyCssClass = 'cdk-table-sticky';\n    /**\n     * Whether to manually add positon: sticky to all sticky cell elements. Not needed if\n     * the position is set in a selector associated with the value of stickyCssClass. May be\n     * overridden by table subclasses\n     */\n\n    this.needsPositionStickyOnElement = true;\n    /** Whether the no data row is currently showing anything. */\n\n    this._isShowingNoDataRow = false;\n    this._multiTemplateDataRows = false;\n    this._fixedLayout = false; // TODO(andrewseguin): Remove max value as the end index\n    //   and instead calculate the view on init and scroll.\n\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     *\n     * @docs-private\n     */\n\n    this.viewChange = new BehaviorSubject({\n      start: 0,\n      end: Number.MAX_VALUE\n    });\n\n    if (!role) {\n      this._elementRef.nativeElement.setAttribute('role', 'grid');\n    }\n\n    this._document = _document;\n    this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n  }\n  /**\n   * Tracking function that will be used to check the differences in data changes. Used similarly\n   * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n   * relative to the function to know if a row should be added/removed/moved.\n   * Accepts a function that takes two parameters, `index` and `item`.\n   */\n\n\n  _createClass(CdkTable, [{\n    key: \"trackBy\",\n    get: function get() {\n      return this._trackByFn;\n    },\n    set: function set(fn) {\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n        console.warn(\"trackBy must be a function, but received \".concat(JSON.stringify(fn), \".\"));\n      }\n\n      this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     */\n\n  }, {\n    key: \"dataSource\",\n    get: function get() {\n      return this._dataSource;\n    },\n    set: function set(dataSource) {\n      if (this._dataSource !== dataSource) {\n        this._switchDataSource(dataSource);\n      }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     */\n\n  }, {\n    key: \"multiTemplateDataRows\",\n    get: function get() {\n      return this._multiTemplateDataRows;\n    },\n    set: function set(v) {\n      this._multiTemplateDataRows = coerceBooleanProperty(v); // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n      // this setter will be invoked before the row outlet has been defined hence the null check.\n\n      if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n        this._forceRenderDataRows();\n\n        this.updateStickyColumnStyles();\n      }\n    }\n    /**\n     * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n     * and optimize rendering sticky styles for native tables. No-op for flex tables.\n     */\n\n  }, {\n    key: \"fixedLayout\",\n    get: function get() {\n      return this._fixedLayout;\n    },\n    set: function set(v) {\n      this._fixedLayout = coerceBooleanProperty(v); // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n\n      this._forceRecalculateCellWidths = true;\n      this._stickyColumnStylesNeedReset = true;\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this11 = this;\n\n      this._setupStickyStyler();\n\n      if (this._isNativeHtmlTable) {\n        this._applyNativeTableSections();\n      } // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n      // the user has provided a custom trackBy, return the result of that function as evaluated\n      // with the values of the `RenderRow`'s data and index.\n\n\n      this._dataDiffer = this._differs.find([]).create(function (_i, dataRow) {\n        return _this11.trackBy ? _this11.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n      }); // Table cell dimensions may change after resizing the window. Signal the sticky styler to\n      // refresh its cache of cell widths the next time sticky styles are updated.\n      // @breaking-change 11.0.0 Remove null check for _viewportRuler once it's a required parameter.\n\n      if (this._viewportRuler) {\n        this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(function () {\n          _this11._forceRecalculateCellWidths = true;\n        });\n      }\n    }\n  }, {\n    key: \"ngAfterContentChecked\",\n    value: function ngAfterContentChecked() {\n      // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n      this._cacheRowDefs();\n\n      this._cacheColumnDefs(); // Make sure that the user has at least added header, footer, or data row def.\n\n\n      if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableMissingRowDefsError();\n      } // Render updates if the list of columns have been changed for the header, row, or footer defs.\n\n\n      var columnsChanged = this._renderUpdatedColumns();\n\n      var rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged; // Ensure sticky column styles are reset if set to `true` elsewhere.\n\n      this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n      this._forceRecalculateCellWidths = rowDefsChanged; // If the header row definition has been changed, trigger a render to the header row.\n\n      if (this._headerRowDefChanged) {\n        this._forceRenderHeaderRows();\n\n        this._headerRowDefChanged = false;\n      } // If the footer row definition has been changed, trigger a render to the footer row.\n\n\n      if (this._footerRowDefChanged) {\n        this._forceRenderFooterRows();\n\n        this._footerRowDefChanged = false;\n      } // If there is a data source and row definitions, connect to the data source unless a\n      // connection has already been made.\n\n\n      if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n        this._observeRenderChanges();\n      } else if (this._stickyColumnStylesNeedReset) {\n        // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n        // called when it row data arrives. Otherwise, we need to call it proactively.\n        this.updateStickyColumnStyles();\n      }\n\n      this._checkStickyStates();\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._rowOutlet.viewContainer.clear();\n\n      this._noDataRowOutlet.viewContainer.clear();\n\n      this._headerRowOutlet.viewContainer.clear();\n\n      this._footerRowOutlet.viewContainer.clear();\n\n      this._cachedRenderRowsMap.clear();\n\n      this._onDestroy.next();\n\n      this._onDestroy.complete();\n\n      if (isDataSource(this.dataSource)) {\n        this.dataSource.disconnect(this);\n      }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     */\n\n  }, {\n    key: \"renderRows\",\n    value: function renderRows() {\n      var _this12 = this;\n\n      this._renderRows = this._getAllRenderRows();\n\n      var changes = this._dataDiffer.diff(this._renderRows);\n\n      if (!changes) {\n        this._updateNoDataRow();\n\n        return;\n      }\n\n      var viewContainer = this._rowOutlet.viewContainer; // @breaking-change 11.0.0 Remove null check for `_viewRepeater` and the\n      // `else` clause once `_viewRepeater` is turned into a required parameter.\n\n      if (this._viewRepeater) {\n        this._viewRepeater.applyChanges(changes, viewContainer, function (record, _adjustedPreviousIndex, currentIndex) {\n          return _this12._getEmbeddedViewArgs(record.item, currentIndex);\n        }, function (record) {\n          return record.item.data;\n        }, function (change) {\n          if (change.operation === 1\n          /* INSERTED */\n          && change.context) {\n            _this12._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n          }\n        });\n      } else {\n        changes.forEachOperation(function (record, prevIndex, currentIndex) {\n          if (record.previousIndex == null) {\n            var renderRow = record.item;\n            var rowDef = renderRow.rowDef;\n            var context = {\n              $implicit: renderRow.data\n            };\n\n            _this12._renderRow(_this12._rowOutlet, rowDef, currentIndex, context);\n          } else if (currentIndex == null) {\n            viewContainer.remove(prevIndex);\n          } else {\n            var view = viewContainer.get(prevIndex);\n            viewContainer.move(view, currentIndex);\n          }\n        });\n      } // Update the meta context of a row's context data (index, count, first, last, ...)\n\n\n      this._updateRowIndexContext(); // Update rows that did not get added/removed/moved but may have had their identity changed,\n      // e.g. if trackBy matched data on some property but the actual data reference changed.\n\n\n      changes.forEachIdentityChange(function (record) {\n        var rowView = viewContainer.get(record.currentIndex);\n        rowView.context.$implicit = record.item.data;\n      });\n\n      this._updateNoDataRow();\n\n      this.updateStickyColumnStyles();\n    }\n    /** Adds a column definition that was not included as part of the content children. */\n\n  }, {\n    key: \"addColumnDef\",\n    value: function addColumnDef(columnDef) {\n      this._customColumnDefs.add(columnDef);\n    }\n    /** Removes a column definition that was not included as part of the content children. */\n\n  }, {\n    key: \"removeColumnDef\",\n    value: function removeColumnDef(columnDef) {\n      this._customColumnDefs.delete(columnDef);\n    }\n    /** Adds a row definition that was not included as part of the content children. */\n\n  }, {\n    key: \"addRowDef\",\n    value: function addRowDef(rowDef) {\n      this._customRowDefs.add(rowDef);\n    }\n    /** Removes a row definition that was not included as part of the content children. */\n\n  }, {\n    key: \"removeRowDef\",\n    value: function removeRowDef(rowDef) {\n      this._customRowDefs.delete(rowDef);\n    }\n    /** Adds a header row definition that was not included as part of the content children. */\n\n  }, {\n    key: \"addHeaderRowDef\",\n    value: function addHeaderRowDef(headerRowDef) {\n      this._customHeaderRowDefs.add(headerRowDef);\n\n      this._headerRowDefChanged = true;\n    }\n    /** Removes a header row definition that was not included as part of the content children. */\n\n  }, {\n    key: \"removeHeaderRowDef\",\n    value: function removeHeaderRowDef(headerRowDef) {\n      this._customHeaderRowDefs.delete(headerRowDef);\n\n      this._headerRowDefChanged = true;\n    }\n    /** Adds a footer row definition that was not included as part of the content children. */\n\n  }, {\n    key: \"addFooterRowDef\",\n    value: function addFooterRowDef(footerRowDef) {\n      this._customFooterRowDefs.add(footerRowDef);\n\n      this._footerRowDefChanged = true;\n    }\n    /** Removes a footer row definition that was not included as part of the content children. */\n\n  }, {\n    key: \"removeFooterRowDef\",\n    value: function removeFooterRowDef(footerRowDef) {\n      this._customFooterRowDefs.delete(footerRowDef);\n\n      this._footerRowDefChanged = true;\n    }\n    /** Sets a no data row definition that was not included as a part of the content children. */\n\n  }, {\n    key: \"setNoDataRow\",\n    value: function setNoDataRow(noDataRow) {\n      this._customNoDataRow = noDataRow;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n\n  }, {\n    key: \"updateStickyHeaderRowStyles\",\n    value: function updateStickyHeaderRowStyles() {\n      var headerRows = this._getRenderedRows(this._headerRowOutlet);\n\n      var tableElement = this._elementRef.nativeElement; // Hide the thead element if there are no header rows. This is necessary to satisfy\n      // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n      // required child `row`.\n\n      var thead = tableElement.querySelector('thead');\n\n      if (thead) {\n        thead.style.display = headerRows.length ? '' : 'none';\n      }\n\n      var stickyStates = this._headerRowDefs.map(function (def) {\n        return def.sticky;\n      });\n\n      this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n\n      this._stickyStyler.stickRows(headerRows, stickyStates, 'top'); // Reset the dirty state of the sticky input change since it has been used.\n\n\n      this._headerRowDefs.forEach(function (def) {\n        return def.resetStickyChanged();\n      });\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n\n  }, {\n    key: \"updateStickyFooterRowStyles\",\n    value: function updateStickyFooterRowStyles() {\n      var footerRows = this._getRenderedRows(this._footerRowOutlet);\n\n      var tableElement = this._elementRef.nativeElement; // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n      // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n      // required child `row`.\n\n      var tfoot = tableElement.querySelector('tfoot');\n\n      if (tfoot) {\n        tfoot.style.display = footerRows.length ? '' : 'none';\n      }\n\n      var stickyStates = this._footerRowDefs.map(function (def) {\n        return def.sticky;\n      });\n\n      this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n\n      this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n\n      this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates); // Reset the dirty state of the sticky input change since it has been used.\n\n\n      this._footerRowDefs.forEach(function (def) {\n        return def.resetStickyChanged();\n      });\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     */\n\n  }, {\n    key: \"updateStickyColumnStyles\",\n    value: function updateStickyColumnStyles() {\n      var _this13 = this;\n\n      var headerRows = this._getRenderedRows(this._headerRowOutlet);\n\n      var dataRows = this._getRenderedRows(this._rowOutlet);\n\n      var footerRows = this._getRenderedRows(this._footerRowOutlet); // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n      // In a table using a fixed layout, row content won't affect column width, so sticky styles\n      // don't need to be cleared unless either the sticky column config changes or one of the row\n      // defs change.\n\n\n      if (this._isNativeHtmlTable && !this._fixedLayout || this._stickyColumnStylesNeedReset) {\n        // Clear the left and right positioning from all columns in the table across all rows since\n        // sticky columns span across all table sections (header, data, footer)\n        this._stickyStyler.clearStickyPositioning([].concat(_toConsumableArray(headerRows), _toConsumableArray(dataRows), _toConsumableArray(footerRows)), ['left', 'right']);\n\n        this._stickyColumnStylesNeedReset = false;\n      } // Update the sticky styles for each header row depending on the def's sticky state\n\n\n      headerRows.forEach(function (headerRow, i) {\n        _this13._addStickyColumnStyles([headerRow], _this13._headerRowDefs[i]);\n      }); // Update the sticky styles for each data row depending on its def's sticky state\n\n      this._rowDefs.forEach(function (rowDef) {\n        // Collect all the rows rendered with this row definition.\n        var rows = [];\n\n        for (var i = 0; i < dataRows.length; i++) {\n          if (_this13._renderRows[i].rowDef === rowDef) {\n            rows.push(dataRows[i]);\n          }\n        }\n\n        _this13._addStickyColumnStyles(rows, rowDef);\n      }); // Update the sticky styles for each footer row depending on the def's sticky state\n\n\n      footerRows.forEach(function (footerRow, i) {\n        _this13._addStickyColumnStyles([footerRow], _this13._footerRowDefs[i]);\n      }); // Reset the dirty state of the sticky input change since it has been used.\n\n      Array.from(this._columnDefsByName.values()).forEach(function (def) {\n        return def.resetStickyChanged();\n      });\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     */\n\n  }, {\n    key: \"_getAllRenderRows\",\n    value: function _getAllRenderRows() {\n      var renderRows = []; // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n      // new cache while unused ones can be picked up by garbage collection.\n\n      var prevCachedRenderRows = this._cachedRenderRowsMap;\n      this._cachedRenderRowsMap = new Map(); // For each data object, get the list of rows that should be rendered, represented by the\n      // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n\n      for (var i = 0; i < this._data.length; i++) {\n        var data = this._data[i];\n\n        var renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n\n        if (!this._cachedRenderRowsMap.has(data)) {\n          this._cachedRenderRowsMap.set(data, new WeakMap());\n        }\n\n        for (var j = 0; j < renderRowsForData.length; j++) {\n          var renderRow = renderRowsForData[j];\n\n          var cache = this._cachedRenderRowsMap.get(renderRow.data);\n\n          if (cache.has(renderRow.rowDef)) {\n            cache.get(renderRow.rowDef).push(renderRow);\n          } else {\n            cache.set(renderRow.rowDef, [renderRow]);\n          }\n\n          renderRows.push(renderRow);\n        }\n      }\n\n      return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     */\n\n  }, {\n    key: \"_getRenderRowsForData\",\n    value: function _getRenderRowsForData(data, dataIndex, cache) {\n      var rowDefs = this._getRowDefs(data, dataIndex);\n\n      return rowDefs.map(function (rowDef) {\n        var cachedRenderRows = cache && cache.has(rowDef) ? cache.get(rowDef) : [];\n\n        if (cachedRenderRows.length) {\n          var dataRow = cachedRenderRows.shift();\n          dataRow.dataIndex = dataIndex;\n          return dataRow;\n        } else {\n          return {\n            data: data,\n            rowDef: rowDef,\n            dataIndex: dataIndex\n          };\n        }\n      });\n    }\n    /** Update the map containing the content's column definitions. */\n\n  }, {\n    key: \"_cacheColumnDefs\",\n    value: function _cacheColumnDefs() {\n      var _this14 = this;\n\n      this._columnDefsByName.clear();\n\n      var columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n      columnDefs.forEach(function (columnDef) {\n        if (_this14._columnDefsByName.has(columnDef.name) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTableDuplicateColumnNameError(columnDef.name);\n        }\n\n        _this14._columnDefsByName.set(columnDef.name, columnDef);\n      });\n    }\n    /** Update the list of all available row definitions that can be used. */\n\n  }, {\n    key: \"_cacheRowDefs\",\n    value: function _cacheRowDefs() {\n      this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n      this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n      this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs); // After all row definitions are determined, find the row definition to be considered default.\n\n      var defaultRowDefs = this._rowDefs.filter(function (def) {\n        return !def.when;\n      });\n\n      if (!this.multiTemplateDataRows && defaultRowDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableMultipleDefaultRowDefsError();\n      }\n\n      this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n\n  }, {\n    key: \"_renderUpdatedColumns\",\n    value: function _renderUpdatedColumns() {\n      var columnsDiffReducer = function columnsDiffReducer(acc, def) {\n        return acc || !!def.getColumnsDiff();\n      }; // Force re-render data rows if the list of column definitions have changed.\n\n\n      var dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n\n      if (dataColumnsChanged) {\n        this._forceRenderDataRows();\n      } // Force re-render header/footer rows if the list of column definitions have changed.\n\n\n      var headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n\n      if (headerColumnsChanged) {\n        this._forceRenderHeaderRows();\n      }\n\n      var footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n\n      if (footerColumnsChanged) {\n        this._forceRenderFooterRows();\n      }\n\n      return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n\n  }, {\n    key: \"_switchDataSource\",\n    value: function _switchDataSource(dataSource) {\n      this._data = [];\n\n      if (isDataSource(this.dataSource)) {\n        this.dataSource.disconnect(this);\n      } // Stop listening for data from the previous data source.\n\n\n      if (this._renderChangeSubscription) {\n        this._renderChangeSubscription.unsubscribe();\n\n        this._renderChangeSubscription = null;\n      }\n\n      if (!dataSource) {\n        if (this._dataDiffer) {\n          this._dataDiffer.diff([]);\n        }\n\n        this._rowOutlet.viewContainer.clear();\n      }\n\n      this._dataSource = dataSource;\n    }\n    /** Set up a subscription for the data provided by the data source. */\n\n  }, {\n    key: \"_observeRenderChanges\",\n    value: function _observeRenderChanges() {\n      var _this15 = this;\n\n      // If no data source has been set, there is nothing to observe for changes.\n      if (!this.dataSource) {\n        return;\n      }\n\n      var dataStream;\n\n      if (isDataSource(this.dataSource)) {\n        dataStream = this.dataSource.connect(this);\n      } else if (isObservable(this.dataSource)) {\n        dataStream = this.dataSource;\n      } else if (Array.isArray(this.dataSource)) {\n        dataStream = of(this.dataSource);\n      }\n\n      if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableUnknownDataSourceError();\n      }\n\n      this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(function (data) {\n        _this15._data = data || [];\n\n        _this15.renderRows();\n      });\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n\n  }, {\n    key: \"_forceRenderHeaderRows\",\n    value: function _forceRenderHeaderRows() {\n      var _this16 = this;\n\n      // Clear the header row outlet if any content exists.\n      if (this._headerRowOutlet.viewContainer.length > 0) {\n        this._headerRowOutlet.viewContainer.clear();\n      }\n\n      this._headerRowDefs.forEach(function (def, i) {\n        return _this16._renderRow(_this16._headerRowOutlet, def, i);\n      });\n\n      this.updateStickyHeaderRowStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n\n  }, {\n    key: \"_forceRenderFooterRows\",\n    value: function _forceRenderFooterRows() {\n      var _this17 = this;\n\n      // Clear the footer row outlet if any content exists.\n      if (this._footerRowOutlet.viewContainer.length > 0) {\n        this._footerRowOutlet.viewContainer.clear();\n      }\n\n      this._footerRowDefs.forEach(function (def, i) {\n        return _this17._renderRow(_this17._footerRowOutlet, def, i);\n      });\n\n      this.updateStickyFooterRowStyles();\n    }\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\n\n  }, {\n    key: \"_addStickyColumnStyles\",\n    value: function _addStickyColumnStyles(rows, rowDef) {\n      var _this18 = this;\n\n      var columnDefs = Array.from(rowDef.columns || []).map(function (columnName) {\n        var columnDef = _this18._columnDefsByName.get(columnName);\n\n        if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTableUnknownColumnError(columnName);\n        }\n\n        return columnDef;\n      });\n      var stickyStartStates = columnDefs.map(function (columnDef) {\n        return columnDef.sticky;\n      });\n      var stickyEndStates = columnDefs.map(function (columnDef) {\n        return columnDef.stickyEnd;\n      });\n\n      this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n    }\n    /** Gets the list of rows that have been rendered in the row outlet. */\n\n  }, {\n    key: \"_getRenderedRows\",\n    value: function _getRenderedRows(rowOutlet) {\n      var renderedRows = [];\n\n      for (var i = 0; i < rowOutlet.viewContainer.length; i++) {\n        var viewRef = rowOutlet.viewContainer.get(i);\n        renderedRows.push(viewRef.rootNodes[0]);\n      }\n\n      return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n\n  }, {\n    key: \"_getRowDefs\",\n    value: function _getRowDefs(data, dataIndex) {\n      if (this._rowDefs.length == 1) {\n        return [this._rowDefs[0]];\n      }\n\n      var rowDefs = [];\n\n      if (this.multiTemplateDataRows) {\n        rowDefs = this._rowDefs.filter(function (def) {\n          return !def.when || def.when(dataIndex, data);\n        });\n      } else {\n        var rowDef = this._rowDefs.find(function (def) {\n          return def.when && def.when(dataIndex, data);\n        }) || this._defaultRowDef;\n\n        if (rowDef) {\n          rowDefs.push(rowDef);\n        }\n      }\n\n      if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableMissingMatchingRowDefError(data);\n      }\n\n      return rowDefs;\n    }\n  }, {\n    key: \"_getEmbeddedViewArgs\",\n    value: function _getEmbeddedViewArgs(renderRow, index) {\n      var rowDef = renderRow.rowDef;\n      var context = {\n        $implicit: renderRow.data\n      };\n      return {\n        templateRef: rowDef.template,\n        context: context,\n        index: index\n      };\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     */\n\n  }, {\n    key: \"_renderRow\",\n    value: function _renderRow(outlet, rowDef, index) {\n      var context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n      var view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n\n      this._renderCellTemplateForItem(rowDef, context);\n\n      return view;\n    }\n  }, {\n    key: \"_renderCellTemplateForItem\",\n    value: function _renderCellTemplateForItem(rowDef, context) {\n      var _iterator10 = _createForOfIteratorHelper(this._getCellTemplates(rowDef)),\n          _step10;\n\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var cellTemplate = _step10.value;\n\n          if (CdkCellOutlet.mostRecentCellOutlet) {\n            CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n          }\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     */\n\n  }, {\n    key: \"_updateRowIndexContext\",\n    value: function _updateRowIndexContext() {\n      var viewContainer = this._rowOutlet.viewContainer;\n\n      for (var renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n        var viewRef = viewContainer.get(renderIndex);\n        var context = viewRef.context;\n        context.count = count;\n        context.first = renderIndex === 0;\n        context.last = renderIndex === count - 1;\n        context.even = renderIndex % 2 === 0;\n        context.odd = !context.even;\n\n        if (this.multiTemplateDataRows) {\n          context.dataIndex = this._renderRows[renderIndex].dataIndex;\n          context.renderIndex = renderIndex;\n        } else {\n          context.index = this._renderRows[renderIndex].dataIndex;\n        }\n      }\n    }\n    /** Gets the column definitions for the provided row def. */\n\n  }, {\n    key: \"_getCellTemplates\",\n    value: function _getCellTemplates(rowDef) {\n      var _this19 = this;\n\n      if (!rowDef || !rowDef.columns) {\n        return [];\n      }\n\n      return Array.from(rowDef.columns, function (columnId) {\n        var column = _this19._columnDefsByName.get(columnId);\n\n        if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTableUnknownColumnError(columnId);\n        }\n\n        return rowDef.extractCellTemplate(column);\n      });\n    }\n    /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\n\n  }, {\n    key: \"_applyNativeTableSections\",\n    value: function _applyNativeTableSections() {\n      var documentFragment = this._document.createDocumentFragment();\n\n      var sections = [{\n        tag: 'thead',\n        outlets: [this._headerRowOutlet]\n      }, {\n        tag: 'tbody',\n        outlets: [this._rowOutlet, this._noDataRowOutlet]\n      }, {\n        tag: 'tfoot',\n        outlets: [this._footerRowOutlet]\n      }];\n\n      for (var _i2 = 0, _sections = sections; _i2 < _sections.length; _i2++) {\n        var section = _sections[_i2];\n\n        var element = this._document.createElement(section.tag);\n\n        element.setAttribute('role', 'rowgroup');\n\n        var _iterator11 = _createForOfIteratorHelper(section.outlets),\n            _step11;\n\n        try {\n          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n            var outlet = _step11.value;\n            element.appendChild(outlet.elementRef.nativeElement);\n          }\n        } catch (err) {\n          _iterator11.e(err);\n        } finally {\n          _iterator11.f();\n        }\n\n        documentFragment.appendChild(element);\n      } // Use a DocumentFragment so we don't hit the DOM on each iteration.\n\n\n      this._elementRef.nativeElement.appendChild(documentFragment);\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     */\n\n  }, {\n    key: \"_forceRenderDataRows\",\n    value: function _forceRenderDataRows() {\n      this._dataDiffer.diff([]);\n\n      this._rowOutlet.viewContainer.clear();\n\n      this.renderRows();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     */\n\n  }, {\n    key: \"_checkStickyStates\",\n    value: function _checkStickyStates() {\n      var stickyCheckReducer = function stickyCheckReducer(acc, d) {\n        return acc || d.hasStickyChanged();\n      }; // Note that the check needs to occur for every definition since it notifies the definition\n      // that it can reset its dirty state. Using another operator like `some` may short-circuit\n      // remaining definitions and leave them in an unchecked state.\n\n\n      if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n        this.updateStickyHeaderRowStyles();\n      }\n\n      if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n        this.updateStickyFooterRowStyles();\n      }\n\n      if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n        this._stickyColumnStylesNeedReset = true;\n        this.updateStickyColumnStyles();\n      }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     */\n\n  }, {\n    key: \"_setupStickyStyler\",\n    value: function _setupStickyStyler() {\n      var _this20 = this;\n\n      var direction = this._dir ? this._dir.value : 'ltr';\n      this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener);\n      (this._dir ? this._dir.change : of()).pipe(takeUntil(this._onDestroy)).subscribe(function (value) {\n        _this20._stickyStyler.direction = value;\n\n        _this20.updateStickyColumnStyles();\n      });\n    }\n    /** Filters definitions that belong to this table from a QueryList. */\n\n  }, {\n    key: \"_getOwnDefs\",\n    value: function _getOwnDefs(items) {\n      var _this21 = this;\n\n      return items.filter(function (item) {\n        return !item._table || item._table === _this21;\n      });\n    }\n    /** Creates or removes the no data row, depending on whether any data is being shown. */\n\n  }, {\n    key: \"_updateNoDataRow\",\n    value: function _updateNoDataRow() {\n      var noDataRow = this._customNoDataRow || this._noDataRow;\n\n      if (noDataRow) {\n        var shouldShow = this._rowOutlet.viewContainer.length === 0;\n\n        if (shouldShow !== this._isShowingNoDataRow) {\n          var container = this._noDataRowOutlet.viewContainer;\n          shouldShow ? container.createEmbeddedView(noDataRow.templateRef) : container.clear();\n          this._isShowingNoDataRow = shouldShow;\n        }\n      }\n    }\n  }]);\n\n  return CdkTable;\n}();\n\nCdkTable.ɵfac = function CdkTable_Factory(t) {\n  return new (t || CdkTable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('role'), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform), ɵngcc0.ɵɵdirectiveInject(_VIEW_REPEATER_STRATEGY, 8), ɵngcc0.ɵɵdirectiveInject(_COALESCED_STYLE_SCHEDULER, 8), ɵngcc0.ɵɵdirectiveInject(STICKY_POSITIONING_LISTENER, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ViewportRuler, 8));\n};\n\nCdkTable.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: CdkTable,\n  selectors: [[\"cdk-table\"], [\"table\", \"cdk-table\", \"\"]],\n  contentQueries: function CdkTable_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkNoDataRow, 1);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkColumnDef, 1);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkRowDef, 1);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderRowDef, 1);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterRowDef, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._noDataRow = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentColumnDefs = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentRowDefs = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentHeaderRowDefs = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentFooterRowDefs = _t);\n    }\n  },\n  viewQuery: function CdkTable_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(DataRowOutlet, 3);\n      ɵngcc0.ɵɵviewQuery(HeaderRowOutlet, 3);\n      ɵngcc0.ɵɵviewQuery(FooterRowOutlet, 3);\n      ɵngcc0.ɵɵviewQuery(NoDataRowOutlet, 3);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._rowOutlet = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headerRowOutlet = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._footerRowOutlet = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._noDataRowOutlet = _t.first);\n    }\n  },\n  hostAttrs: [1, \"cdk-table\"],\n  hostVars: 2,\n  hostBindings: function CdkTable_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"cdk-table-fixed-layout\", ctx.fixedLayout);\n    }\n  },\n  inputs: {\n    trackBy: \"trackBy\",\n    dataSource: \"dataSource\",\n    multiTemplateDataRows: \"multiTemplateDataRows\",\n    fixedLayout: \"fixedLayout\"\n  },\n  exportAs: [\"cdkTable\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CDK_TABLE,\n    useExisting: CdkTable\n  }, {\n    provide: _VIEW_REPEATER_STRATEGY,\n    useClass: _DisposeViewRepeaterStrategy\n  }, {\n    provide: _COALESCED_STYLE_SCHEDULER,\n    useClass: _CoalescedStyleScheduler\n  }, // Prevent nested tables from seeing this table's StickyPositioningListener.\n  {\n    provide: STICKY_POSITIONING_LISTENER,\n    useValue: null\n  }])],\n  ngContentSelectors: _c1,\n  decls: 6,\n  vars: 0,\n  consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]],\n  template: function CdkTable_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c0);\n      ɵngcc0.ɵɵprojection(0);\n      ɵngcc0.ɵɵprojection(1, 1);\n      ɵngcc0.ɵɵelementContainer(2, 0);\n      ɵngcc0.ɵɵelementContainer(3, 1);\n      ɵngcc0.ɵɵelementContainer(4, 2);\n      ɵngcc0.ɵɵelementContainer(5, 3);\n    }\n  },\n  directives: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet],\n  styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"],\n  encapsulation: 2\n});\n\nCdkTable.ctorParameters = function () {\n  return [{\n    type: IterableDiffers\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: ElementRef\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['role']\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: Platform\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [_VIEW_REPEATER_STRATEGY]\n    }]\n  }, {\n    type: _CoalescedStyleScheduler,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [_COALESCED_STYLE_SCHEDULER]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: SkipSelf\n    }, {\n      type: Inject,\n      args: [STICKY_POSITIONING_LISTENER]\n    }]\n  }, {\n    type: ViewportRuler,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nCdkTable.propDecorators = {\n  trackBy: [{\n    type: Input\n  }],\n  dataSource: [{\n    type: Input\n  }],\n  multiTemplateDataRows: [{\n    type: Input\n  }],\n  fixedLayout: [{\n    type: Input\n  }],\n  _rowOutlet: [{\n    type: ViewChild,\n    args: [DataRowOutlet, {\n      static: true\n    }]\n  }],\n  _headerRowOutlet: [{\n    type: ViewChild,\n    args: [HeaderRowOutlet, {\n      static: true\n    }]\n  }],\n  _footerRowOutlet: [{\n    type: ViewChild,\n    args: [FooterRowOutlet, {\n      static: true\n    }]\n  }],\n  _noDataRowOutlet: [{\n    type: ViewChild,\n    args: [NoDataRowOutlet, {\n      static: true\n    }]\n  }],\n  _contentColumnDefs: [{\n    type: ContentChildren,\n    args: [CdkColumnDef, {\n      descendants: true\n    }]\n  }],\n  _contentRowDefs: [{\n    type: ContentChildren,\n    args: [CdkRowDef, {\n      descendants: true\n    }]\n  }],\n  _contentHeaderRowDefs: [{\n    type: ContentChildren,\n    args: [CdkHeaderRowDef, {\n      descendants: true\n    }]\n  }],\n  _contentFooterRowDefs: [{\n    type: ContentChildren,\n    args: [CdkFooterRowDef, {\n      descendants: true\n    }]\n  }],\n  _noDataRow: [{\n    type: ContentChild,\n    args: [CdkNoDataRow]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTable, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-table, table[cdk-table]',\n      exportAs: 'cdkTable',\n      template: CDK_TABLE_TEMPLATE,\n      host: {\n        'class': 'cdk-table',\n        '[class.cdk-table-fixed-layout]': 'fixedLayout'\n      },\n      encapsulation: ViewEncapsulation.None,\n      // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\n      // The view for `MatTable` consists entirely of templates declared in other views. As they are\n      // declared elsewhere, they are checked when their declaration points are checked.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      providers: [{\n        provide: CDK_TABLE,\n        useExisting: CdkTable\n      }, {\n        provide: _VIEW_REPEATER_STRATEGY,\n        useClass: _DisposeViewRepeaterStrategy\n      }, {\n        provide: _COALESCED_STYLE_SCHEDULER,\n        useClass: _CoalescedStyleScheduler\n      }, // Prevent nested tables from seeing this table's StickyPositioningListener.\n      {\n        provide: STICKY_POSITIONING_LISTENER,\n        useValue: null\n      }],\n      styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['role']\n      }]\n    }, {\n      type: ɵngcc1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc2.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [_VIEW_REPEATER_STRATEGY]\n      }]\n    }, {\n      type: _CoalescedStyleScheduler,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [_COALESCED_STYLE_SCHEDULER]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }, {\n        type: Inject,\n        args: [STICKY_POSITIONING_LISTENER]\n      }]\n    }, {\n      type: ɵngcc3.ViewportRuler,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    trackBy: [{\n      type: Input\n    }],\n    dataSource: [{\n      type: Input\n    }],\n    multiTemplateDataRows: [{\n      type: Input\n    }],\n    fixedLayout: [{\n      type: Input\n    }],\n    _rowOutlet: [{\n      type: ViewChild,\n      args: [DataRowOutlet, {\n        static: true\n      }]\n    }],\n    _headerRowOutlet: [{\n      type: ViewChild,\n      args: [HeaderRowOutlet, {\n        static: true\n      }]\n    }],\n    _footerRowOutlet: [{\n      type: ViewChild,\n      args: [FooterRowOutlet, {\n        static: true\n      }]\n    }],\n    _noDataRowOutlet: [{\n      type: ViewChild,\n      args: [NoDataRowOutlet, {\n        static: true\n      }]\n    }],\n    _contentColumnDefs: [{\n      type: ContentChildren,\n      args: [CdkColumnDef, {\n        descendants: true\n      }]\n    }],\n    _contentRowDefs: [{\n      type: ContentChildren,\n      args: [CdkRowDef, {\n        descendants: true\n      }]\n    }],\n    _contentHeaderRowDefs: [{\n      type: ContentChildren,\n      args: [CdkHeaderRowDef, {\n        descendants: true\n      }]\n    }],\n    _contentFooterRowDefs: [{\n      type: ContentChildren,\n      args: [CdkFooterRowDef, {\n        descendants: true\n      }]\n    }],\n    _noDataRow: [{\n      type: ContentChild,\n      args: [CdkNoDataRow]\n    }]\n  });\n})();\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\n\n\nfunction mergeArrayAndSet(array, set) {\n  return array.concat(Array.from(set));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n\n\nvar CdkTextColumn = /*#__PURE__*/function () {\n  function CdkTextColumn( // `CdkTextColumn` is always requiring a table, but we just assert it manually\n  // for better error reporting.\n  // tslint:disable-next-line: lightweight-tokens\n  _table, _options) {\n    _classCallCheck(this, CdkTextColumn);\n\n    this._table = _table;\n    this._options = _options;\n    /** Alignment of the cell values. */\n\n    this.justify = 'start';\n    this._options = _options || {};\n  }\n  /** Column name that should be used to reference this column. */\n\n\n  _createClass(CdkTextColumn, [{\n    key: \"name\",\n    get: function get() {\n      return this._name;\n    },\n    set: function set(name) {\n      this._name = name; // With Ivy, inputs can be initialized before static query results are\n      // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n\n      this._syncColumnDefName();\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._syncColumnDefName();\n\n      if (this.headerText === undefined) {\n        this.headerText = this._createDefaultHeaderText();\n      }\n\n      if (!this.dataAccessor) {\n        this.dataAccessor = this._options.defaultDataAccessor || function (data, name) {\n          return data[name];\n        };\n      }\n\n      if (this._table) {\n        // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n        // since the columnDef will not pick up its content by the time the table finishes checking\n        // its content and initializing the rows.\n        this.columnDef.cell = this.cell;\n        this.columnDef.headerCell = this.headerCell;\n\n        this._table.addColumnDef(this.columnDef);\n      } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        throw getTableTextColumnMissingParentTableError();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this._table) {\n        this._table.removeColumnDef(this.columnDef);\n      }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     */\n\n  }, {\n    key: \"_createDefaultHeaderText\",\n    value: function _createDefaultHeaderText() {\n      var name = this.name;\n\n      if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableTextColumnMissingNameError();\n      }\n\n      if (this._options && this._options.defaultHeaderTextTransform) {\n        return this._options.defaultHeaderTextTransform(name);\n      }\n\n      return name[0].toUpperCase() + name.slice(1);\n    }\n    /** Synchronizes the column definition name with the text column name. */\n\n  }, {\n    key: \"_syncColumnDefName\",\n    value: function _syncColumnDefName() {\n      if (this.columnDef) {\n        this.columnDef.name = this.name;\n      }\n    }\n  }]);\n\n  return CdkTextColumn;\n}();\n\nCdkTextColumn.ɵfac = function CdkTextColumn_Factory(t) {\n  return new (t || CdkTextColumn)(ɵngcc0.ɵɵdirectiveInject(CdkTable, 8), ɵngcc0.ɵɵdirectiveInject(TEXT_COLUMN_OPTIONS, 8));\n};\n\nCdkTextColumn.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: CdkTextColumn,\n  selectors: [[\"cdk-text-column\"]],\n  viewQuery: function CdkTextColumn_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(CdkColumnDef, 3);\n      ɵngcc0.ɵɵviewQuery(CdkCellDef, 3);\n      ɵngcc0.ɵɵviewQuery(CdkHeaderCellDef, 3);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnDef = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n    }\n  },\n  inputs: {\n    justify: \"justify\",\n    name: \"name\",\n    headerText: \"headerText\",\n    dataAccessor: \"dataAccessor\"\n  },\n  decls: 3,\n  vars: 0,\n  consts: [[\"cdkColumnDef\", \"\"], [\"cdk-header-cell\", \"\", 3, \"text-align\", 4, \"cdkHeaderCellDef\"], [\"cdk-cell\", \"\", 3, \"text-align\", 4, \"cdkCellDef\"], [\"cdk-header-cell\", \"\"], [\"cdk-cell\", \"\"]],\n  template: function CdkTextColumn_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainerStart(0, 0);\n      ɵngcc0.ɵɵtemplate(1, CdkTextColumn_th_1_Template, 2, 3, \"th\", 1);\n      ɵngcc0.ɵɵtemplate(2, CdkTextColumn_td_2_Template, 2, 3, \"td\", 2);\n      ɵngcc0.ɵɵelementContainerEnd();\n    }\n  },\n  directives: [CdkColumnDef, CdkHeaderCellDef, CdkCellDef, CdkHeaderCell, CdkCell],\n  encapsulation: 2\n});\n\nCdkTextColumn.ctorParameters = function () {\n  return [{\n    type: CdkTable,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [TEXT_COLUMN_OPTIONS]\n    }]\n  }];\n};\n\nCdkTextColumn.propDecorators = {\n  name: [{\n    type: Input\n  }],\n  headerText: [{\n    type: Input\n  }],\n  dataAccessor: [{\n    type: Input\n  }],\n  justify: [{\n    type: Input\n  }],\n  columnDef: [{\n    type: ViewChild,\n    args: [CdkColumnDef, {\n      static: true\n    }]\n  }],\n  cell: [{\n    type: ViewChild,\n    args: [CdkCellDef, {\n      static: true\n    }]\n  }],\n  headerCell: [{\n    type: ViewChild,\n    args: [CdkHeaderCellDef, {\n      static: true\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTextColumn, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-text-column',\n      template: \"\\n    <ng-container cdkColumnDef>\\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\\\"justify\\\">\\n        {{headerText}}\\n      </th>\\n      <td cdk-cell *cdkCellDef=\\\"let data\\\" [style.text-align]=\\\"justify\\\">\\n        {{dataAccessor(data, name)}}\\n      </td>\\n    </ng-container>\\n  \",\n      encapsulation: ViewEncapsulation.None,\n      // Change detection is intentionally not set to OnPush. This component's template will be provided\n      // to the table to be inserted into its view. This is problematic when change detection runs since\n      // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n      // mean's the template in the table's view will not have the updated value (and in fact will cause\n      // an ExpressionChangedAfterItHasBeenCheckedError).\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default\n    }]\n  }], function () {\n    return [{\n      type: CdkTable,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [TEXT_COLUMN_OPTIONS]\n      }]\n    }];\n  }, {\n    justify: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    headerText: [{\n      type: Input\n    }],\n    dataAccessor: [{\n      type: Input\n    }],\n    columnDef: [{\n      type: ViewChild,\n      args: [CdkColumnDef, {\n        static: true\n      }]\n    }],\n    cell: [{\n      type: ViewChild,\n      args: [CdkCellDef, {\n        static: true\n      }]\n    }],\n    headerCell: [{\n      type: ViewChild,\n      args: [CdkHeaderCellDef, {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar EXPORTED_DECLARATIONS = [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, NoDataRowOutlet];\n\nvar CdkTableModule = function CdkTableModule() {\n  _classCallCheck(this, CdkTableModule);\n};\n\nCdkTableModule.ɵfac = function CdkTableModule_Factory(t) {\n  return new (t || CdkTableModule)();\n};\n\nCdkTableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: CdkTableModule\n});\nCdkTableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  imports: [[ScrollingModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTableModule, {\n    declarations: function declarations() {\n      return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, NoDataRowOutlet];\n    },\n    imports: function imports() {\n      return [ScrollingModule];\n    },\n    exports: function exports() {\n      return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, NoDataRowOutlet];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTableModule, [{\n    type: NgModule,\n    args: [{\n      exports: EXPORTED_DECLARATIONS,\n      declarations: EXPORTED_DECLARATIONS,\n      imports: [ScrollingModule]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, STICKY_POSITIONING_LISTENER, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput }; //# sourceMappingURL=table.js.map","map":{"version":3,"sources":["/Users/mohammedelmourabit/xrp/xpr/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/table.js"],"names":["Directionality","coerceBooleanProperty","isDataSource","_VIEW_REPEATER_STRATEGY","_DisposeViewRepeaterStrategy","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","_c0","_c1","CdkTextColumn_th_1_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ctx_r0","ɵɵnextContext","ɵɵstyleProp","justify","ɵɵadvance","ɵɵtextInterpolate1","headerText","CdkTextColumn_td_2_Template","data_r2","$implicit","ctx_r1","dataAccessor","name","DataSource","Platform","ViewportRuler","ScrollingModule","DOCUMENT","InjectionToken","Directive","TemplateRef","Inject","Optional","Input","ContentChild","ElementRef","Injectable","NgZone","IterableDiffers","ViewContainerRef","Component","ChangeDetectionStrategy","ViewEncapsulation","EmbeddedViewRef","ChangeDetectorRef","Attribute","SkipSelf","ViewChild","ContentChildren","NgModule","Subject","from","BehaviorSubject","isObservable","of","takeUntil","take","mixinHasStickyInput","base","args","_sticky","_hasStickyChanged","v","prevValue","hasStickyChanged","CDK_TABLE","TEXT_COLUMN_OPTIONS","CdkCellDef","template","ɵfac","CdkCellDef_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","ctorParameters","ngDevMode","ɵsetClassMetadata","selector","CdkHeaderCellDef","CdkHeaderCellDef_Factory","CdkFooterCellDef","CdkFooterCellDef_Factory","CdkColumnDefBase","_CdkColumnDefBase","CdkColumnDef","_table","_stickyEnd","_name","_setNameInput","_columnCssClassName","cssClassFriendlyName","value","replace","_updateColumnCssClassName","CdkColumnDef_Factory","contentQueries","CdkColumnDef_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","cell","first","headerCell","footerCell","inputs","sticky","stickyEnd","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","undefined","decorators","propDecorators","providers","BaseCdkCell","columnDef","elementRef","classList","nativeElement","className","add","CdkHeaderCell","CdkHeaderCell_Factory","hostAttrs","host","CdkFooterCell","CdkFooterCell_Factory","CdkCell","CdkCell_Factory","_Schedule","tasks","endTasks","_COALESCED_STYLE_SCHEDULER","_CoalescedStyleScheduler","_ngZone","_currentSchedule","_destroyed","task","_createScheduleIfNeeded","push","next","complete","_getScheduleObservable","pipe","subscribe","length","schedule","isStable","Promise","resolve","onStable","_CoalescedStyleScheduler_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","CDK_ROW_TEMPLATE","BaseRowDef","_differs","changes","_columnsDiffer","columns","currentValue","find","create","diff","column","CdkHeaderRowDef","CdkFooterRowDef","BaseRowDef_Factory","ɵɵNgOnChangesFeature","CdkHeaderRowDefBase","_CdkHeaderRowDefBase","CdkHeaderRowDef_Factory","CdkFooterRowDefBase","_CdkFooterRowDefBase","CdkFooterRowDef_Factory","CdkRowDef","CdkRowDef_Factory","when","CdkCellOutlet","_viewContainer","mostRecentCellOutlet","CdkCellOutlet_Factory","CdkHeaderRow","CdkHeaderRow_Factory","ɵcmp","ɵɵdefineComponent","decls","vars","consts","CdkHeaderRow_Template","ɵɵelementContainer","directives","encapsulation","changeDetection","Default","None","CdkFooterRow","CdkFooterRow_Factory","CdkFooterRow_Template","CdkRow","CdkRow_Factory","CdkRow_Template","CdkNoDataRow","templateRef","CdkNoDataRow_Factory","STICKY_DIRECTIONS","StickyStyler","_isNativeHtmlTable","_stickCellCss","direction","_coalescedStyleScheduler","_isBrowser","_needsPositionStickyOnElement","_positionListener","_cachedCellWidths","_borderCellCss","rows","stickyDirections","elementsToClear","row","nodeType","ELEMENT_NODE","i","children","_scheduleStyleChanges","element","_removeStickyStyle","stickyStartStates","stickyEndStates","recalculateCellWidths","some","state","stickyColumnsUpdated","sizes","stickyEndColumnsUpdated","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","lastStickyStart","lastIndexOf","firstStickyEnd","indexOf","isRtl","start","end","_addStickyStyle","slice","map","width","index","reverse","rowsToStick","stickyStates","position","states","stickyOffsets","stickyCellHeights","elementsToStick","rowIndex","stickyOffset","Array","height","getBoundingClientRect","borderedRowIndex","_a","_b","offset","isBorderedRowIndex","stickyHeaderRowsUpdated","elements","stickyFooterRowsUpdated","tableElement","tfoot","querySelector","dir","style","remove","hasDirection","zIndex","_getCalculatedZIndex","dirValue","isBorderElement","cssText","zIndexIncrements","top","bottom","left","right","firstRowCells","widths","positions","nextPosition","getTableUnknownColumnError","id","Error","getTableDuplicateColumnNameError","getTableMultipleDefaultRowDefsError","getTableMissingMatchingRowDefError","data","JSON","stringify","getTableMissingRowDefsError","getTableUnknownDataSourceError","getTableTextColumnMissingParentTableError","getTableTextColumnMissingNameError","STICKY_POSITIONING_LISTENER","DataRowOutlet","viewContainer","DataRowOutlet_Factory","HeaderRowOutlet","HeaderRowOutlet_Factory","FooterRowOutlet","FooterRowOutlet_Factory","NoDataRowOutlet","NoDataRowOutlet_Factory","CDK_TABLE_TEMPLATE","RowViewRef","CdkTable","_changeDetectorRef","_elementRef","role","_dir","_document","_platform","_viewRepeater","_stickyPositioningListener","_viewportRuler","_onDestroy","_columnDefsByName","Map","_customColumnDefs","Set","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_stickyColumnStylesNeedReset","_forceRecalculateCellWidths","_cachedRenderRowsMap","stickyCssClass","needsPositionStickyOnElement","_isShowingNoDataRow","_multiTemplateDataRows","_fixedLayout","viewChange","Number","MAX_VALUE","setAttribute","nodeName","_trackByFn","fn","console","warn","_dataSource","dataSource","_switchDataSource","_rowOutlet","_forceRenderDataRows","updateStickyColumnStyles","_setupStickyStyler","_applyNativeTableSections","_dataDiffer","_i","dataRow","trackBy","dataIndex","change","_cacheRowDefs","_cacheColumnDefs","_headerRowDefs","_footerRowDefs","_rowDefs","columnsChanged","_renderUpdatedColumns","rowDefsChanged","_forceRenderHeaderRows","_forceRenderFooterRows","_renderChangeSubscription","_observeRenderChanges","_checkStickyStates","clear","_noDataRowOutlet","_headerRowOutlet","_footerRowOutlet","disconnect","_renderRows","_getAllRenderRows","_updateNoDataRow","applyChanges","record","_adjustedPreviousIndex","currentIndex","_getEmbeddedViewArgs","item","operation","context","_renderCellTemplateForItem","rowDef","forEachOperation","prevIndex","previousIndex","renderRow","_renderRow","view","get","move","_updateRowIndexContext","forEachIdentityChange","rowView","delete","headerRowDef","footerRowDef","noDataRow","_customNoDataRow","headerRows","_getRenderedRows","thead","display","def","_stickyStyler","clearStickyPositioning","stickRows","forEach","resetStickyChanged","footerRows","updateStickyFooterContainer","dataRows","headerRow","_addStickyColumnStyles","footerRow","values","renderRows","prevCachedRenderRows","_data","renderRowsForData","_getRenderRowsForData","has","set","WeakMap","j","cache","rowDefs","_getRowDefs","cachedRenderRows","shift","columnDefs","mergeArrayAndSet","_getOwnDefs","_contentColumnDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","filter","multiTemplateDataRows","_defaultRowDef","columnsDiffReducer","acc","getColumnsDiff","dataColumnsChanged","reduce","headerColumnsChanged","footerColumnsChanged","unsubscribe","dataStream","connect","isArray","updateStickyHeaderRowStyles","updateStickyFooterRowStyles","columnName","updateStickyColumns","rowOutlet","renderedRows","viewRef","rootNodes","outlet","createEmbeddedView","_getCellTemplates","cellTemplate","markForCheck","renderIndex","count","last","even","odd","columnId","extractCellTemplate","documentFragment","createDocumentFragment","sections","tag","outlets","section","createElement","appendChild","stickyCheckReducer","d","isBrowser","items","_noDataRow","shouldShow","container","CdkTable_Factory","ɵɵinjectAttribute","CdkTable_ContentQueries","viewQuery","CdkTable_Query","ɵɵviewQuery","hostVars","hostBindings","CdkTable_HostBindings","ɵɵclassProp","fixedLayout","exportAs","useClass","useValue","ngContentSelectors","CdkTable_Template","ɵɵprojectionDef","ɵɵprojection","styles","String","static","descendants","array","concat","CdkTextColumn","_options","_syncColumnDefName","_createDefaultHeaderText","defaultDataAccessor","addColumnDef","removeColumnDef","defaultHeaderTextTransform","toUpperCase","CdkTextColumn_Factory","CdkTextColumn_Query","CdkTextColumn_Template","ɵɵelementContainerStart","ɵɵtemplate","ɵɵelementContainerEnd","EXPORTED_DECLARATIONS","CdkTableModule","CdkTableModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["import { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { isDataSource, _VIEW_REPEATER_STRATEGY, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/scrolling';\n\nconst _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]]];\nconst _c1 = [\"caption\", \"colgroup, col\"];\nfunction CdkTextColumn_th_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"th\", 3);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\n} }\nfunction CdkTextColumn_td_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const data_r2 = ctx.$implicit;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r1.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.dataAccessor(data_r2, ctx_r1.name), \" \");\n} }\nexport { DataSource } from '@angular/cdk/collections';\nimport { Platform } from '@angular/cdk/platform';\nimport { ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport { InjectionToken, Directive, TemplateRef, Inject, Optional, Input, ContentChild, ElementRef, Injectable, NgZone, IterableDiffers, ViewContainerRef, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, ChangeDetectorRef, Attribute, SkipSelf, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { Subject, from, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            this._sticky = false;\n            /** Whether the sticky input has changed since it was last checked. */\n            this._hasStickyChanged = false;\n        }\n        /** Whether sticky positioning should be applied. */\n        get sticky() { return this._sticky; }\n        set sticky(v) {\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        /** Whether the sticky value has changed since this was last called. */\n        hasStickyChanged() {\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /** Resets the dirty check for cases where the sticky state has been used without checking. */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkCellDef.ɵfac = function CdkCellDef_Factory(t) { return new (t || CdkCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkCellDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkCellDef, selectors: [[\"\", \"cdkCellDef\", \"\"]] });\nCdkCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkHeaderCellDef.ɵfac = function CdkHeaderCellDef_Factory(t) { return new (t || CdkHeaderCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkHeaderCellDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderCellDef, selectors: [[\"\", \"cdkHeaderCellDef\", \"\"]] });\nCdkHeaderCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkHeaderCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkFooterCellDef.ɵfac = function CdkFooterCellDef_Factory(t) { return new (t || CdkFooterCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkFooterCellDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkFooterCellDef, selectors: [[\"\", \"cdkFooterCellDef\", \"\"]] });\nCdkFooterCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkFooterCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n// Boilerplate for applying mixins to CdkColumnDef.\n/** @docs-private */\nclass CdkColumnDefBase {\n}\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef extends _CdkColumnDefBase {\n    constructor(_table) {\n        super();\n        this._table = _table;\n        this._stickyEnd = false;\n    }\n    /** Unique name for this column. */\n    get name() { return this._name; }\n    set name(name) { this._setNameInput(name); }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    set stickyEnd(v) {\n        const prevValue = this._stickyEnd;\n        this._stickyEnd = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._stickyEnd;\n    }\n    /**\n     * Overridable method that sets the css classes that will be added to every cell in this\n     * column.\n     * In the future, columnCssClassName will change from type string[] to string and this\n     * will set a single string value.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setNameInput(value) {\n        // If the directive is set without a name (updated programmatically), then this setter will\n        // trigger with an empty string and should not overwrite the programmatically set value.\n        if (value) {\n            this._name = value;\n            this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/ig, '-');\n            this._updateColumnCssClassName();\n        }\n    }\n}\nCdkColumnDef.ɵfac = function CdkColumnDef_Factory(t) { return new (t || CdkColumnDef)(ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\nCdkColumnDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkColumnDef, selectors: [[\"\", \"cdkColumnDef\", \"\"]], contentQueries: function CdkColumnDef_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkCellDef, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderCellDef, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterCellDef, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerCell = _t.first);\n    } }, inputs: { sticky: \"sticky\", name: [\"cdkColumnDef\", \"name\"], stickyEnd: \"stickyEnd\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkColumnDef.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\nCdkColumnDef.propDecorators = {\n    name: [{ type: Input, args: ['cdkColumnDef',] }],\n    stickyEnd: [{ type: Input, args: ['stickyEnd',] }],\n    cell: [{ type: ContentChild, args: [CdkCellDef,] }],\n    headerCell: [{ type: ContentChild, args: [CdkHeaderCellDef,] }],\n    footerCell: [{ type: ContentChild, args: [CdkFooterCellDef,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkColumnDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkColumnDef]',\n                inputs: ['sticky'],\n                providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }]\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TABLE]\n            }, {\n                type: Optional\n            }] }]; }, { name: [{\n            type: Input,\n            args: ['cdkColumnDef']\n        }], stickyEnd: [{\n            type: Input,\n            args: ['stickyEnd']\n        }], cell: [{\n            type: ContentChild,\n            args: [CdkCellDef]\n        }], headerCell: [{\n            type: ContentChild,\n            args: [CdkHeaderCellDef]\n        }], footerCell: [{\n            type: ContentChild,\n            args: [CdkFooterCellDef]\n        }] }); })();\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nclass BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        // If IE 11 is dropped before we switch to setting a single class name, change to multi param\n        // with destructuring.\n        const classList = elementRef.nativeElement.classList;\n        for (const className of columnDef._columnCssClassName) {\n            classList.add(className);\n        }\n    }\n}\n/** Header cell template container that adds the right classes and role. */\nclass CdkHeaderCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkHeaderCell.ɵfac = function CdkHeaderCell_Factory(t) { return new (t || CdkHeaderCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkHeaderCell.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderCell, selectors: [[\"cdk-header-cell\"], [\"th\", \"cdk-header-cell\", \"\"]], hostAttrs: [\"role\", \"columnheader\", 1, \"cdk-header-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkHeaderCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-header-cell, th[cdk-header-cell]',\n                host: {\n                    'class': 'cdk-header-cell',\n                    'role': 'columnheader'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/** Footer cell template container that adds the right classes and role. */\nclass CdkFooterCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkFooterCell.ɵfac = function CdkFooterCell_Factory(t) { return new (t || CdkFooterCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkFooterCell.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkFooterCell, selectors: [[\"cdk-footer-cell\"], [\"td\", \"cdk-footer-cell\", \"\"]], hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-footer-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkFooterCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                host: {\n                    'class': 'cdk-footer-cell',\n                    'role': 'gridcell'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/** Cell template container that adds the right classes and role. */\nclass CdkCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkCell.ɵfac = function CdkCell_Factory(t) { return new (t || CdkCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkCell.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkCell, selectors: [[\"cdk-cell\"], [\"td\", \"cdk-cell\", \"\"]], hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-cell, td[cdk-cell]',\n                host: {\n                    'class': 'cdk-cell',\n                    'role': 'gridcell'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @docs-private\n */\nclass _Schedule {\n    constructor() {\n        this.tasks = [];\n        this.endTasks = [];\n    }\n}\n/** Injection token used to provide a coalesced style scheduler. */\nconst _COALESCED_STYLE_SCHEDULER = new InjectionToken('_COALESCED_STYLE_SCHEDULER');\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\nclass _CoalescedStyleScheduler {\n    constructor(_ngZone) {\n        this._ngZone = _ngZone;\n        this._currentSchedule = null;\n        this._destroyed = new Subject();\n    }\n    /**\n     * Schedules the specified task to run at the end of the current VM turn.\n     */\n    schedule(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.tasks.push(task);\n    }\n    /**\n     * Schedules the specified task to run after other scheduled tasks at the end of the current\n     * VM turn.\n     */\n    scheduleEnd(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.endTasks.push(task);\n    }\n    /** Prevent any further tasks from running. */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    _createScheduleIfNeeded() {\n        if (this._currentSchedule) {\n            return;\n        }\n        this._currentSchedule = new _Schedule();\n        this._getScheduleObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n            while (this._currentSchedule.tasks.length || this._currentSchedule.endTasks.length) {\n                const schedule = this._currentSchedule;\n                // Capture new tasks scheduled by the current set of tasks.\n                this._currentSchedule = new _Schedule();\n                for (const task of schedule.tasks) {\n                    task();\n                }\n                for (const task of schedule.endTasks) {\n                    task();\n                }\n            }\n            this._currentSchedule = null;\n        });\n    }\n    _getScheduleObservable() {\n        // Use onStable when in the context of an ongoing change detection cycle so that we\n        // do not accidentally trigger additional cycles.\n        return this._ngZone.isStable ?\n            from(Promise.resolve(undefined)) :\n            this._ngZone.onStable.pipe(take(1));\n    }\n}\n_CoalescedStyleScheduler.ɵfac = function _CoalescedStyleScheduler_Factory(t) { return new (t || _CoalescedStyleScheduler)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\n_CoalescedStyleScheduler.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: _CoalescedStyleScheduler, factory: _CoalescedStyleScheduler.ɵfac });\n_CoalescedStyleScheduler.ctorParameters = () => [\n    { type: NgZone }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_CoalescedStyleScheduler, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc0.NgZone }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nclass BaseRowDef {\n    constructor(\n    /** @docs-private */ template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /** Gets this row def's relevant cell template from the provided column def. */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n}\nBaseRowDef.ɵfac = function BaseRowDef_Factory(t) { return new (t || BaseRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nBaseRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: BaseRowDef, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nBaseRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseRowDef, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }]; }, null); })();\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/** @docs-private */\nclass CdkHeaderRowDefBase extends BaseRowDef {\n}\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkHeaderRowDef.ɵfac = function CdkHeaderRowDef_Factory(t) { return new (t || CdkHeaderRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\nCdkHeaderRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderRowDef, selectors: [[\"\", \"cdkHeaderRowDef\", \"\"]], inputs: { columns: [\"cdkHeaderRowDef\", \"columns\"], sticky: [\"cdkHeaderRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkHeaderRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkHeaderRowDef]',\n                inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TABLE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/** @docs-private */\nclass CdkFooterRowDefBase extends BaseRowDef {\n}\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkFooterRowDef.ɵfac = function CdkFooterRowDef_Factory(t) { return new (t || CdkFooterRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\nCdkFooterRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkFooterRowDef, selectors: [[\"\", \"cdkFooterRowDef\", \"\"]], inputs: { columns: [\"cdkFooterRowDef\", \"columns\"], sticky: [\"cdkFooterRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkFooterRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkFooterRowDef]',\n                inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TABLE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass CdkRowDef extends BaseRowDef {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n}\nCdkRowDef.ɵfac = function CdkRowDef_Factory(t) { return new (t || CdkRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\nCdkRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkRowDef, selectors: [[\"\", \"cdkRowDef\", \"\"]], inputs: { columns: [\"cdkRowDefColumns\", \"columns\"], when: [\"cdkRowDefWhen\", \"when\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkRowDef]',\n                inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TABLE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\nclass CdkCellOutlet {\n    constructor(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n}\nCdkCellOutlet.ɵfac = function CdkCellOutlet_Factory(t) { return new (t || CdkCellOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\nCdkCellOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkCellOutlet, selectors: [[\"\", \"cdkCellOutlet\", \"\"]] });\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nCdkCellOutlet.mostRecentCellOutlet = null;\nCdkCellOutlet.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellOutlet, [{\n        type: Directive,\n        args: [{ selector: '[cdkCellOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass CdkHeaderRow {\n}\nCdkHeaderRow.ɵfac = function CdkHeaderRow_Factory(t) { return new (t || CdkHeaderRow)(); };\nCdkHeaderRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkHeaderRow, selectors: [[\"cdk-header-row\"], [\"tr\", \"cdk-header-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-header-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkHeaderRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkCellOutlet], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRow, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-header-row, tr[cdk-header-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-header-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, null); })();\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass CdkFooterRow {\n}\nCdkFooterRow.ɵfac = function CdkFooterRow_Factory(t) { return new (t || CdkFooterRow)(); };\nCdkFooterRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkFooterRow, selectors: [[\"cdk-footer-row\"], [\"tr\", \"cdk-footer-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-footer-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkFooterRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkCellOutlet], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRow, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-footer-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, null); })();\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass CdkRow {\n}\nCdkRow.ɵfac = function CdkRow_Factory(t) { return new (t || CdkRow)(); };\nCdkRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkRow, selectors: [[\"cdk-row\"], [\"tr\", \"cdk-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkCellOutlet], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRow, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-row, tr[cdk-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, null); })();\n/** Row that can be used to display a message when no data is shown in the table. */\nclass CdkNoDataRow {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkNoDataRow.ɵfac = function CdkNoDataRow_Factory(t) { return new (t || CdkNoDataRow)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkNoDataRow.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkNoDataRow, selectors: [[\"ng-template\", \"cdkNoDataRow\", \"\"]] });\nCdkNoDataRow.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkNoDataRow, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkNoDataRow]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nclass StickyStyler {\n    /**\n     * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n     * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n     *     using inline styles. If false, it is assumed that position: sticky is included in\n     *     the component stylesheet for _stickCellCss.\n     * @param _positionListener A listener that is notified of changes to sticky rows/columns\n     *     and their dimensions.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, \n    /**\n     * @deprecated `_coalescedStyleScheduler` parameter to become required.\n     * @breaking-change 11.0.0\n     */\n    _coalescedStyleScheduler, _isBrowser = true, _needsPositionStickyOnElement = true, _positionListener) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this.direction = direction;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._isBrowser = _isBrowser;\n        this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n        this._positionListener = _positionListener;\n        this._cachedCellWidths = [];\n        this._borderCellCss = {\n            'top': `${_stickCellCss}-border-elem-top`,\n            'bottom': `${_stickCellCss}-border-elem-bottom`,\n            'left': `${_stickCellCss}-border-elem-left`,\n            'right': `${_stickCellCss}-border-elem-right`,\n        };\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param rows The list of rows that should be cleared from sticking in the provided directions\n     * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        const elementsToClear = [];\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            elementsToClear.push(row);\n            for (let i = 0; i < row.children.length; i++) {\n                elementsToClear.push(row.children[i]);\n            }\n        }\n        // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n        this._scheduleStyleChanges(() => {\n            for (const element of elementsToClear) {\n                this._removeStickyStyle(element, stickyDirections);\n            }\n        });\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n     *     column cell. If `false` cached widths will be used instead.\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates, recalculateCellWidths = true) {\n        if (!rows.length || !this._isBrowser || !(stickyStartStates.some(state => state) ||\n            stickyEndStates.some(state => state))) {\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({ sizes: [] });\n                this._positionListener.stickyEndColumnsUpdated({ sizes: [] });\n            }\n            return;\n        }\n        const firstRow = rows[0];\n        const numCells = firstRow.children.length;\n        const cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n        const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n        const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n        const lastStickyStart = stickyStartStates.lastIndexOf(true);\n        const firstStickyEnd = stickyEndStates.indexOf(true);\n        // Coalesce with sticky row updates (and potentially other changes like column resize).\n        this._scheduleStyleChanges(() => {\n            const isRtl = this.direction === 'rtl';\n            const start = isRtl ? 'right' : 'left';\n            const end = isRtl ? 'left' : 'right';\n            for (const row of rows) {\n                for (let i = 0; i < numCells; i++) {\n                    const cell = row.children[i];\n                    if (stickyStartStates[i]) {\n                        this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n                    }\n                    if (stickyEndStates[i]) {\n                        this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n                    }\n                }\n            }\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({\n                    sizes: lastStickyStart === -1 ?\n                        [] :\n                        cellWidths\n                            .slice(0, lastStickyStart + 1)\n                            .map((width, index) => stickyStartStates[index] ? width : null)\n                });\n                this._positionListener.stickyEndColumnsUpdated({\n                    sizes: firstStickyEnd === -1 ?\n                        [] :\n                        cellWidths\n                            .slice(firstStickyEnd)\n                            .map((width, index) => stickyEndStates[index + firstStickyEnd] ? width : null)\n                            .reverse()\n                });\n            }\n        });\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n        // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n        // sticky states need to be reversed as well.\n        const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n        const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n        // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n        const stickyOffsets = [];\n        const stickyCellHeights = [];\n        const elementsToStick = [];\n        for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n            stickyOffsets[rowIndex] = stickyOffset;\n            if (!states[rowIndex]) {\n                continue;\n            }\n            const row = rows[rowIndex];\n            elementsToStick[rowIndex] = this._isNativeHtmlTable ?\n                Array.from(row.children) : [row];\n            const height = row.getBoundingClientRect().height;\n            stickyOffset += height;\n            stickyCellHeights[rowIndex] = height;\n        }\n        const borderedRowIndex = states.lastIndexOf(true);\n        // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n        // (and potentially other changes like column resize).\n        this._scheduleStyleChanges(() => {\n            var _a, _b;\n            for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n                if (!states[rowIndex]) {\n                    continue;\n                }\n                const offset = stickyOffsets[rowIndex];\n                const isBorderedRowIndex = rowIndex === borderedRowIndex;\n                for (const element of elementsToStick[rowIndex]) {\n                    this._addStickyStyle(element, position, offset, isBorderedRowIndex);\n                }\n            }\n            if (position === 'top') {\n                (_a = this._positionListener) === null || _a === void 0 ? void 0 : _a.stickyHeaderRowsUpdated({ sizes: stickyCellHeights, elements: elementsToStick });\n            }\n            else {\n                (_b = this._positionListener) === null || _b === void 0 ? void 0 : _b.stickyFooterRowsUpdated({ sizes: stickyCellHeights, elements: elementsToStick });\n            }\n        });\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        const tfoot = tableElement.querySelector('tfoot');\n        // Coalesce with other sticky updates (and potentially other changes like column resize).\n        this._scheduleStyleChanges(() => {\n            if (stickyStates.some(state => !state)) {\n                this._removeStickyStyle(tfoot, ['bottom']);\n            }\n            else {\n                this._addStickyStyle(tfoot, 'bottom', 0, false);\n            }\n        });\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n            element.classList.remove(this._borderCellCss[dir]);\n        }\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        // Short-circuit checking element.style[dir] for stickyDirections as they\n        // were already removed above.\n        const hasDirection = STICKY_DIRECTIONS.some(dir => stickyDirections.indexOf(dir) === -1 && element.style[dir]);\n        if (hasDirection) {\n            element.style.zIndex = this._getCalculatedZIndex(element);\n        }\n        else {\n            // When not hasDirection, _getCalculatedZIndex will always return ''.\n            element.style.zIndex = '';\n            if (this._needsPositionStickyOnElement) {\n                element.style.position = '';\n            }\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     */\n    _addStickyStyle(element, dir, dirValue, isBorderElement) {\n        element.classList.add(this._stickCellCss);\n        if (isBorderElement) {\n            element.classList.add(this._borderCellCss[dir]);\n        }\n        element.style[dir] = `${dirValue}px`;\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        if (this._needsPositionStickyOnElement) {\n            element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        }\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     */\n    _getCalculatedZIndex(element) {\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        let zIndex = 0;\n        // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n        // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n        // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /** Gets the widths for each cell in the provided row. */\n    _getCellWidths(row, recalculateCellWidths = true) {\n        if (!recalculateCellWidths && this._cachedCellWidths.length) {\n            return this._cachedCellWidths;\n        }\n        const cellWidths = [];\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            let cell = firstRowCells[i];\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        this._cachedCellWidths = cellWidths;\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Schedules styles to be applied when the style scheduler deems appropriate.\n     * @breaking-change 11.0.0 This method can be removed in favor of calling\n     * `CoalescedStyleScheduler.schedule` directly once the scheduler is a required parameter.\n     */\n    _scheduleStyleChanges(changes) {\n        if (this._coalescedStyleScheduler) {\n            this._coalescedStyleScheduler.schedule(changes);\n        }\n        else {\n            changes();\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the StickyPositioningListener. */\nconst STICKY_POSITIONING_LISTENER = new InjectionToken('CDK_SPL');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\nclass DataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nDataRowOutlet.ɵfac = function DataRowOutlet_Factory(t) { return new (t || DataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nDataRowOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DataRowOutlet, selectors: [[\"\", \"rowOutlet\", \"\"]] });\nDataRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[rowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\nclass HeaderRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nHeaderRowOutlet.ɵfac = function HeaderRowOutlet_Factory(t) { return new (t || HeaderRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nHeaderRowOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: HeaderRowOutlet, selectors: [[\"\", \"headerRowOutlet\", \"\"]] });\nHeaderRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeaderRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[headerRowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\nclass FooterRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nFooterRowOutlet.ɵfac = function FooterRowOutlet_Factory(t) { return new (t || FooterRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nFooterRowOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FooterRowOutlet, selectors: [[\"\", \"footerRowOutlet\", \"\"]] });\nFooterRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FooterRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[footerRowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\nclass NoDataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nNoDataRowOutlet.ɵfac = function NoDataRowOutlet_Factory(t) { return new (t || NoDataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nNoDataRowOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NoDataRowOutlet, selectors: [[\"\", \"noDataRowOutlet\", \"\"]] });\nNoDataRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NoDataRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[noDataRowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nconst CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"></ng-content>\n  <ng-content select=\"colgroup, col\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container noDataRowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\nclass RowViewRef extends EmbeddedViewRef {\n}\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\nclass CdkTable {\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform, \n    /**\n     * @deprecated `_coalescedStyleScheduler`, `_viewRepeater` and `_viewportRuler`\n     *    parameters to become required.\n     * @breaking-change 11.0.0\n     */\n    _viewRepeater, _coalescedStyleScheduler, _stickyPositioningListener, \n    // Optional for backwards compatibility. The viewport ruler is provided in root. Therefore,\n    // this property will never be null.\n    // tslint:disable-next-line: lightweight-tokens\n    _viewportRuler) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        this._viewRepeater = _viewRepeater;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._stickyPositioningListener = _stickyPositioningListener;\n        this._viewportRuler = _viewportRuler;\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *its* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *its* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *its* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *its* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n         * change.\n         */\n        this._stickyColumnStylesNeedReset = true;\n        /**\n         * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n         * `false`, cached values will be used instead. This is only applicable to tables with\n         * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n         */\n        this._forceRecalculateCellWidths = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        /**\n         * Whether to manually add positon: sticky to all sticky cell elements. Not needed if\n         * the position is set in a selector associated with the value of stickyCssClass. May be\n         * overridden by table subclasses\n         */\n        this.needsPositionStickyOnElement = true;\n        /** Whether the no data row is currently showing anything. */\n        this._isShowingNoDataRow = false;\n        this._multiTemplateDataRows = false;\n        this._fixedLayout = false;\n        // TODO(andrewseguin): Remove max value as the end index\n        //   and instead calculate the view on init and scroll.\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         *\n         * @docs-private\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'grid');\n        }\n        this._document = _document;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    set trackBy(fn) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    set multiTemplateDataRows(v) {\n        this._multiTemplateDataRows = coerceBooleanProperty(v);\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n     * and optimize rendering sticky styles for native tables. No-op for flex tables.\n     */\n    get fixedLayout() {\n        return this._fixedLayout;\n    }\n    set fixedLayout(v) {\n        this._fixedLayout = coerceBooleanProperty(v);\n        // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n        this._forceRecalculateCellWidths = true;\n        this._stickyColumnStylesNeedReset = true;\n    }\n    ngOnInit() {\n        this._setupStickyStyler();\n        if (this._isNativeHtmlTable) {\n            this._applyNativeTableSections();\n        }\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        });\n        // Table cell dimensions may change after resizing the window. Signal the sticky styler to\n        // refresh its cache of cell widths the next time sticky styles are updated.\n        // @breaking-change 11.0.0 Remove null check for _viewportRuler once it's a required parameter.\n        if (this._viewportRuler) {\n            this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(() => {\n                this._forceRecalculateCellWidths = true;\n            });\n        }\n    }\n    ngAfterContentChecked() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        const columnsChanged = this._renderUpdatedColumns();\n        const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\n        // Ensure sticky column styles are reset if set to `true` elsewhere.\n        this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n        this._forceRecalculateCellWidths = rowDefsChanged;\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        else if (this._stickyColumnStylesNeedReset) {\n            // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n            // called when it row data arrives. Otherwise, we need to call it proactively.\n            this.updateStickyColumnStyles();\n        }\n        this._checkStickyStates();\n    }\n    ngOnDestroy() {\n        this._rowOutlet.viewContainer.clear();\n        this._noDataRowOutlet.viewContainer.clear();\n        this._headerRowOutlet.viewContainer.clear();\n        this._footerRowOutlet.viewContainer.clear();\n        this._cachedRenderRowsMap.clear();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            this._updateNoDataRow();\n            return;\n        }\n        const viewContainer = this._rowOutlet.viewContainer;\n        // @breaking-change 11.0.0 Remove null check for `_viewRepeater` and the\n        // `else` clause once `_viewRepeater` is turned into a required parameter.\n        if (this._viewRepeater) {\n            this._viewRepeater.applyChanges(changes, viewContainer, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record.item, currentIndex), (record) => record.item.data, (change) => {\n                if (change.operation === 1 /* INSERTED */ && change.context) {\n                    this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n                }\n            });\n        }\n        else {\n            changes.forEachOperation((record, prevIndex, currentIndex) => {\n                if (record.previousIndex == null) {\n                    const renderRow = record.item;\n                    const rowDef = renderRow.rowDef;\n                    const context = { $implicit: renderRow.data };\n                    this._renderRow(this._rowOutlet, rowDef, currentIndex, context);\n                }\n                else if (currentIndex == null) {\n                    viewContainer.remove(prevIndex);\n                }\n                else {\n                    const view = viewContainer.get(prevIndex);\n                    viewContainer.move(view, currentIndex);\n                }\n            });\n        }\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((record) => {\n            const rowView = viewContainer.get(record.currentIndex);\n            rowView.context.$implicit = record.item.data;\n        });\n        this._updateNoDataRow();\n        this.updateStickyColumnStyles();\n    }\n    /** Adds a column definition that was not included as part of the content children. */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /** Removes a column definition that was not included as part of the content children. */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /** Adds a row definition that was not included as part of the content children. */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /** Removes a row definition that was not included as part of the content children. */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /** Adds a header row definition that was not included as part of the content children. */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Removes a header row definition that was not included as part of the content children. */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Adds a footer row definition that was not included as part of the content children. */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Removes a footer row definition that was not included as part of the content children. */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Sets a no data row definition that was not included as a part of the content children. */\n    setNoDataRow(noDataRow) {\n        this._customNoDataRow = noDataRow;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyHeaderRowStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const tableElement = this._elementRef.nativeElement;\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        const thead = tableElement.querySelector('thead');\n        if (thead) {\n            thead.style.display = headerRows.length ? '' : 'none';\n        }\n        const stickyStates = this._headerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyFooterRowStyles() {\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        const tableElement = this._elementRef.nativeElement;\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        const tfoot = tableElement.querySelector('tfoot');\n        if (tfoot) {\n            tfoot.style.display = footerRows.length ? '' : 'none';\n        }\n        const stickyStates = this._footerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     */\n    updateStickyColumnStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n        // In a table using a fixed layout, row content won't affect column width, so sticky styles\n        // don't need to be cleared unless either the sticky column config changes or one of the row\n        // defs change.\n        if ((this._isNativeHtmlTable && !this._fixedLayout)\n            || this._stickyColumnStylesNeedReset) {\n            // Clear the left and right positioning from all columns in the table across all rows since\n            // sticky columns span across all table sections (header, data, footer)\n            this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n            this._stickyColumnStylesNeedReset = false;\n        }\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        });\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach(rowDef => {\n            // Collect all the rows rendered with this row definition.\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        });\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        });\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     */\n    _getAllRenderRows() {\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            let data = this._data[i];\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                let renderRow = renderRowsForData[j];\n                const cache = this._cachedRenderRowsMap.get(renderRow.data);\n                if (cache.has(renderRow.rowDef)) {\n                    cache.get(renderRow.rowDef).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map(rowDef => {\n            const cachedRenderRows = (cache && cache.has(rowDef)) ? cache.get(rowDef) : [];\n            if (cachedRenderRows.length) {\n                const dataRow = cachedRenderRows.shift();\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        });\n    }\n    /** Update the map containing the content's column definitions. */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n        columnDefs.forEach(columnDef => {\n            if (this._columnDefsByName.has(columnDef.name) &&\n                (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        });\n    }\n    /** Update the list of all available row definitions that can be used. */\n    _cacheRowDefs() {\n        this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n        this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n        this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n        if (!this.multiTemplateDataRows && defaultRowDefs.length > 1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n    _renderUpdatedColumns() {\n        const columnsDiffReducer = (acc, def) => acc || !!def.getColumnsDiff();\n        // Force re-render data rows if the list of column definitions have changed.\n        const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n        if (dataColumnsChanged) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed.\n        const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n        if (headerColumnsChanged) {\n            this._forceRenderHeaderRows();\n        }\n        const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n        if (footerColumnsChanged) {\n            this._forceRenderFooterRows();\n        }\n        return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            this._rowOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        let dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (isObservable(this.dataSource)) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n            .subscribe(data => {\n            this._data = data || [];\n            this.renderRows();\n        });\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n        this.updateStickyHeaderRowStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n        this.updateStickyFooterRowStyles();\n    }\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\n    _addStickyColumnStyles(rows, rowDef) {\n        const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return columnDef;\n        });\n        const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n        const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n    }\n    /** Gets the list of rows that have been rendered in the row outlet. */\n    _getRenderedRows(rowOutlet) {\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            const viewRef = rowOutlet.viewContainer.get(i);\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n        }\n        else {\n            let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    _getEmbeddedViewArgs(renderRow, index) {\n        const rowDef = renderRow.rowDef;\n        const context = { $implicit: renderRow.data };\n        return {\n            templateRef: rowDef.template,\n            context,\n            index,\n        };\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        this._renderCellTemplateForItem(rowDef, context);\n        return view;\n    }\n    _renderCellTemplateForItem(rowDef, context) {\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     */\n    _updateRowIndexContext() {\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            const viewRef = viewContainer.get(renderIndex);\n            const context = viewRef.context;\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /** Gets the column definitions for the provided row def. */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, columnId => {\n            const column = this._columnDefsByName.get(columnId);\n            if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        });\n    }\n    /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\n    _applyNativeTableSections() {\n        const documentFragment = this._document.createDocumentFragment();\n        const sections = [\n            { tag: 'thead', outlets: [this._headerRowOutlet] },\n            { tag: 'tbody', outlets: [this._rowOutlet, this._noDataRowOutlet] },\n            { tag: 'tfoot', outlets: [this._footerRowOutlet] },\n        ];\n        for (const section of sections) {\n            const element = this._document.createElement(section.tag);\n            element.setAttribute('role', 'rowgroup');\n            for (const outlet of section.outlets) {\n                element.appendChild(outlet.elementRef.nativeElement);\n            }\n            documentFragment.appendChild(element);\n        }\n        // Use a DocumentFragment so we don't hit the DOM on each iteration.\n        this._elementRef.nativeElement.appendChild(documentFragment);\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     */\n    _checkStickyStates() {\n        const stickyCheckReducer = (acc, d) => {\n            return acc || d.hasStickyChanged();\n        };\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this._stickyColumnStylesNeedReset = true;\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     */\n    _setupStickyStyler() {\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        });\n    }\n    /** Filters definitions that belong to this table from a QueryList. */\n    _getOwnDefs(items) {\n        return items.filter(item => !item._table || item._table === this);\n    }\n    /** Creates or removes the no data row, depending on whether any data is being shown. */\n    _updateNoDataRow() {\n        const noDataRow = this._customNoDataRow || this._noDataRow;\n        if (noDataRow) {\n            const shouldShow = this._rowOutlet.viewContainer.length === 0;\n            if (shouldShow !== this._isShowingNoDataRow) {\n                const container = this._noDataRowOutlet.viewContainer;\n                shouldShow ? container.createEmbeddedView(noDataRow.templateRef) : container.clear();\n                this._isShowingNoDataRow = shouldShow;\n            }\n        }\n    }\n}\nCdkTable.ɵfac = function CdkTable_Factory(t) { return new (t || CdkTable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('role'), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform), ɵngcc0.ɵɵdirectiveInject(_VIEW_REPEATER_STRATEGY, 8), ɵngcc0.ɵɵdirectiveInject(_COALESCED_STYLE_SCHEDULER, 8), ɵngcc0.ɵɵdirectiveInject(STICKY_POSITIONING_LISTENER, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ViewportRuler, 8)); };\nCdkTable.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkTable, selectors: [[\"cdk-table\"], [\"table\", \"cdk-table\", \"\"]], contentQueries: function CdkTable_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkNoDataRow, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkColumnDef, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkRowDef, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderRowDef, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterRowDef, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._noDataRow = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentColumnDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentRowDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentHeaderRowDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentFooterRowDefs = _t);\n    } }, viewQuery: function CdkTable_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(DataRowOutlet, 3);\n        ɵngcc0.ɵɵviewQuery(HeaderRowOutlet, 3);\n        ɵngcc0.ɵɵviewQuery(FooterRowOutlet, 3);\n        ɵngcc0.ɵɵviewQuery(NoDataRowOutlet, 3);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._rowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headerRowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._footerRowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._noDataRowOutlet = _t.first);\n    } }, hostAttrs: [1, \"cdk-table\"], hostVars: 2, hostBindings: function CdkTable_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-table-fixed-layout\", ctx.fixedLayout);\n    } }, inputs: { trackBy: \"trackBy\", dataSource: \"dataSource\", multiTemplateDataRows: \"multiTemplateDataRows\", fixedLayout: \"fixedLayout\" }, exportAs: [\"cdkTable\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CDK_TABLE, useExisting: CdkTable },\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n            { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n            // Prevent nested tables from seeing this table's StickyPositioningListener.\n            { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n        ])], ngContentSelectors: _c1, decls: 6, vars: 0, consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]], template: function CdkTable_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵprojection(1, 1);\n        ɵngcc0.ɵɵelementContainer(2, 0);\n        ɵngcc0.ɵɵelementContainer(3, 1);\n        ɵngcc0.ɵɵelementContainer(4, 2);\n        ɵngcc0.ɵɵelementContainer(5, 3);\n    } }, directives: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet], styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"], encapsulation: 2 });\nCdkTable.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [_VIEW_REPEATER_STRATEGY,] }] },\n    { type: _CoalescedStyleScheduler, decorators: [{ type: Optional }, { type: Inject, args: [_COALESCED_STYLE_SCHEDULER,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [STICKY_POSITIONING_LISTENER,] }] },\n    { type: ViewportRuler, decorators: [{ type: Optional }] }\n];\nCdkTable.propDecorators = {\n    trackBy: [{ type: Input }],\n    dataSource: [{ type: Input }],\n    multiTemplateDataRows: [{ type: Input }],\n    fixedLayout: [{ type: Input }],\n    _rowOutlet: [{ type: ViewChild, args: [DataRowOutlet, { static: true },] }],\n    _headerRowOutlet: [{ type: ViewChild, args: [HeaderRowOutlet, { static: true },] }],\n    _footerRowOutlet: [{ type: ViewChild, args: [FooterRowOutlet, { static: true },] }],\n    _noDataRowOutlet: [{ type: ViewChild, args: [NoDataRowOutlet, { static: true },] }],\n    _contentColumnDefs: [{ type: ContentChildren, args: [CdkColumnDef, { descendants: true },] }],\n    _contentRowDefs: [{ type: ContentChildren, args: [CdkRowDef, { descendants: true },] }],\n    _contentHeaderRowDefs: [{ type: ContentChildren, args: [CdkHeaderRowDef, {\n                    descendants: true\n                },] }],\n    _contentFooterRowDefs: [{ type: ContentChildren, args: [CdkFooterRowDef, {\n                    descendants: true\n                },] }],\n    _noDataRow: [{ type: ContentChild, args: [CdkNoDataRow,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTable, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-table, table[cdk-table]',\n                exportAs: 'cdkTable',\n                template: CDK_TABLE_TEMPLATE,\n                host: {\n                    'class': 'cdk-table',\n                    '[class.cdk-table-fixed-layout]': 'fixedLayout'\n                },\n                encapsulation: ViewEncapsulation.None,\n                // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\n                // The view for `MatTable` consists entirely of templates declared in other views. As they are\n                // declared elsewhere, they are checked when their declaration points are checked.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                providers: [\n                    { provide: CDK_TABLE, useExisting: CdkTable },\n                    { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                    { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                    // Prevent nested tables from seeing this table's StickyPositioningListener.\n                    { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                ],\n                styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['role']\n            }] }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [_VIEW_REPEATER_STRATEGY]\n            }] }, { type: _CoalescedStyleScheduler, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [_COALESCED_STYLE_SCHEDULER]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }, {\n                type: Inject,\n                args: [STICKY_POSITIONING_LISTENER]\n            }] }, { type: ɵngcc3.ViewportRuler, decorators: [{\n                type: Optional\n            }] }]; }, { trackBy: [{\n            type: Input\n        }], dataSource: [{\n            type: Input\n        }], multiTemplateDataRows: [{\n            type: Input\n        }], fixedLayout: [{\n            type: Input\n        }], _rowOutlet: [{\n            type: ViewChild,\n            args: [DataRowOutlet, { static: true }]\n        }], _headerRowOutlet: [{\n            type: ViewChild,\n            args: [HeaderRowOutlet, { static: true }]\n        }], _footerRowOutlet: [{\n            type: ViewChild,\n            args: [FooterRowOutlet, { static: true }]\n        }], _noDataRowOutlet: [{\n            type: ViewChild,\n            args: [NoDataRowOutlet, { static: true }]\n        }], _contentColumnDefs: [{\n            type: ContentChildren,\n            args: [CdkColumnDef, { descendants: true }]\n        }], _contentRowDefs: [{\n            type: ContentChildren,\n            args: [CdkRowDef, { descendants: true }]\n        }], _contentHeaderRowDefs: [{\n            type: ContentChildren,\n            args: [CdkHeaderRowDef, {\n                    descendants: true\n                }]\n        }], _contentFooterRowDefs: [{\n            type: ContentChildren,\n            args: [CdkFooterRowDef, {\n                    descendants: true\n                }]\n        }], _noDataRow: [{\n            type: ContentChild,\n            args: [CdkNoDataRow]\n        }] }); })();\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet(array, set) {\n    return array.concat(Array.from(set));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass CdkTextColumn {\n    constructor(\n    // `CdkTextColumn` is always requiring a table, but we just assert it manually\n    // for better error reporting.\n    // tslint:disable-next-line: lightweight-tokens\n    _table, _options) {\n        this._table = _table;\n        this._options = _options;\n        /** Alignment of the cell values. */\n        this.justify = 'start';\n        this._options = _options || {};\n    }\n    /** Column name that should be used to reference this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._name = name;\n        // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n        this._syncColumnDefName();\n    }\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((data, name) => data[name]);\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    ngOnDestroy() {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     */\n    _createDefaultHeaderText() {\n        const name = this.name;\n        if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    }\n    /** Synchronizes the column definition name with the text column name. */\n    _syncColumnDefName() {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    }\n}\nCdkTextColumn.ɵfac = function CdkTextColumn_Factory(t) { return new (t || CdkTextColumn)(ɵngcc0.ɵɵdirectiveInject(CdkTable, 8), ɵngcc0.ɵɵdirectiveInject(TEXT_COLUMN_OPTIONS, 8)); };\nCdkTextColumn.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkTextColumn, selectors: [[\"cdk-text-column\"]], viewQuery: function CdkTextColumn_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkColumnDef, 3);\n        ɵngcc0.ɵɵviewQuery(CdkCellDef, 3);\n        ɵngcc0.ɵɵviewQuery(CdkHeaderCellDef, 3);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnDef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n    } }, inputs: { justify: \"justify\", name: \"name\", headerText: \"headerText\", dataAccessor: \"dataAccessor\" }, decls: 3, vars: 0, consts: [[\"cdkColumnDef\", \"\"], [\"cdk-header-cell\", \"\", 3, \"text-align\", 4, \"cdkHeaderCellDef\"], [\"cdk-cell\", \"\", 3, \"text-align\", 4, \"cdkCellDef\"], [\"cdk-header-cell\", \"\"], [\"cdk-cell\", \"\"]], template: function CdkTextColumn_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\n        ɵngcc0.ɵɵtemplate(1, CdkTextColumn_th_1_Template, 2, 3, \"th\", 1);\n        ɵngcc0.ɵɵtemplate(2, CdkTextColumn_td_2_Template, 2, 3, \"td\", 2);\n        ɵngcc0.ɵɵelementContainerEnd();\n    } }, directives: [CdkColumnDef, CdkHeaderCellDef, CdkCellDef, CdkHeaderCell, CdkCell], encapsulation: 2 });\nCdkTextColumn.ctorParameters = () => [\n    { type: CdkTable, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TEXT_COLUMN_OPTIONS,] }] }\n];\nCdkTextColumn.propDecorators = {\n    name: [{ type: Input }],\n    headerText: [{ type: Input }],\n    dataAccessor: [{ type: Input }],\n    justify: [{ type: Input }],\n    columnDef: [{ type: ViewChild, args: [CdkColumnDef, { static: true },] }],\n    cell: [{ type: ViewChild, args: [CdkCellDef, { static: true },] }],\n    headerCell: [{ type: ViewChild, args: [CdkHeaderCellDef, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTextColumn, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-text-column',\n                template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                encapsulation: ViewEncapsulation.None,\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\n                // to the table to be inserted into its view. This is problematic when change detection runs since\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\n                // an ExpressionChangedAfterItHasBeenCheckedError).\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], function () { return [{ type: CdkTable, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [TEXT_COLUMN_OPTIONS]\n            }] }]; }, { justify: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], headerText: [{\n            type: Input\n        }], dataAccessor: [{\n            type: Input\n        }], columnDef: [{\n            type: ViewChild,\n            args: [CdkColumnDef, { static: true }]\n        }], cell: [{\n            type: ViewChild,\n            args: [CdkCellDef, { static: true }]\n        }], headerCell: [{\n            type: ViewChild,\n            args: [CdkHeaderCellDef, { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n    CdkNoDataRow,\n    NoDataRowOutlet,\n];\nclass CdkTableModule {\n}\nCdkTableModule.ɵfac = function CdkTableModule_Factory(t) { return new (t || CdkTableModule)(); };\nCdkTableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CdkTableModule });\nCdkTableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[ScrollingModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTableModule, { declarations: function () { return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, NoDataRowOutlet]; }, imports: function () { return [ScrollingModule]; }, exports: function () { return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, NoDataRowOutlet]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTableModule, [{\n        type: NgModule,\n        args: [{\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS,\n                imports: [ScrollingModule]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, STICKY_POSITIONING_LISTENER, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };\n\n//# sourceMappingURL=table.js.map"]},"metadata":{},"sourceType":"module"}