{"ast":null,"code":"import _assertThisInitialized from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { ElementRef, Directive, TemplateRef, ViewContainerRef, EventEmitter, ComponentFactoryResolver, Inject, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\n\nimport * as Éµngcc0 from '@angular/core';\n\nfunction throwNullPortalError() {\n  throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\n\n\nfunction throwPortalAlreadyAttachedError() {\n  throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\n\n\nfunction throwPortalOutletAlreadyDisposedError() {\n  throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\n\n\nfunction throwUnknownPortalTypeError() {\n  throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' + 'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\n\n\nfunction throwNullPortalOutletError() {\n  throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\n\n\nfunction throwNoPortalAttachedError() {\n  throw Error('Attempting to detach a portal that is not attached to a host');\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\n\n\nvar Portal = /*#__PURE__*/function () {\n  function Portal() {\n    _classCallCheck(this, Portal);\n  }\n\n  _createClass(Portal, [{\n    key: \"attach\",\n    value:\n    /** Attach this portal to a host. */\n    function attach(host) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (host == null) {\n          throwNullPortalOutletError();\n        }\n\n        if (host.hasAttached()) {\n          throwPortalAlreadyAttachedError();\n        }\n      }\n\n      this._attachedHost = host;\n      return host.attach(this);\n    }\n    /** Detach this portal from its host */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      var host = this._attachedHost;\n\n      if (host != null) {\n        this._attachedHost = null;\n        host.detach();\n      } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        throwNoPortalAttachedError();\n      }\n    }\n    /** Whether this portal is attached to a host. */\n\n  }, {\n    key: \"isAttached\",\n    get: function get() {\n      return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n\n  }, {\n    key: \"setAttachedHost\",\n    value: function setAttachedHost(host) {\n      this._attachedHost = host;\n    }\n  }]);\n\n  return Portal;\n}();\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\n\n\nvar ComponentPortal = /*#__PURE__*/function (_Portal) {\n  _inherits(ComponentPortal, _Portal);\n\n  var _super = _createSuper(ComponentPortal);\n\n  function ComponentPortal(component, viewContainerRef, injector, componentFactoryResolver) {\n    var _this;\n\n    _classCallCheck(this, ComponentPortal);\n\n    _this = _super.call(this);\n    _this.component = component;\n    _this.viewContainerRef = viewContainerRef;\n    _this.injector = injector;\n    _this.componentFactoryResolver = componentFactoryResolver;\n    return _this;\n  }\n\n  return ComponentPortal;\n}(Portal);\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\n\n\nvar TemplatePortal = /*#__PURE__*/function (_Portal2) {\n  _inherits(TemplatePortal, _Portal2);\n\n  var _super2 = _createSuper(TemplatePortal);\n\n  function TemplatePortal(template, viewContainerRef, context) {\n    var _this2;\n\n    _classCallCheck(this, TemplatePortal);\n\n    _this2 = _super2.call(this);\n    _this2.templateRef = template;\n    _this2.viewContainerRef = viewContainerRef;\n    _this2.context = context;\n    return _this2;\n  }\n\n  _createClass(TemplatePortal, [{\n    key: \"origin\",\n    get: function get() {\n      return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n\n  }, {\n    key: \"attach\",\n    value: function attach(host) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.context;\n      this.context = context;\n      return _get(_getPrototypeOf(TemplatePortal.prototype), \"attach\", this).call(this, host);\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this.context = undefined;\n      return _get(_getPrototypeOf(TemplatePortal.prototype), \"detach\", this).call(this);\n    }\n  }]);\n\n  return TemplatePortal;\n}(Portal);\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\n\n\nvar DomPortal = /*#__PURE__*/function (_Portal3) {\n  _inherits(DomPortal, _Portal3);\n\n  var _super3 = _createSuper(DomPortal);\n\n  function DomPortal(element) {\n    var _this3;\n\n    _classCallCheck(this, DomPortal);\n\n    _this3 = _super3.call(this);\n    _this3.element = element instanceof ElementRef ? element.nativeElement : element;\n    return _this3;\n  }\n\n  return DomPortal;\n}(Portal);\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\n\n\nvar BasePortalOutlet = /*#__PURE__*/function () {\n  function BasePortalOutlet() {\n    _classCallCheck(this, BasePortalOutlet);\n\n    /** Whether this host has already been permanently disposed. */\n    this._isDisposed = false; // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n\n    this.attachDomPortal = null;\n  }\n  /** Whether this host has an attached portal. */\n\n\n  _createClass(BasePortalOutlet, [{\n    key: \"hasAttached\",\n    value: function hasAttached() {\n      return !!this._attachedPortal;\n    }\n    /** Attaches a portal. */\n\n  }, {\n    key: \"attach\",\n    value: function attach(portal) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!portal) {\n          throwNullPortalError();\n        }\n\n        if (this.hasAttached()) {\n          throwPortalAlreadyAttachedError();\n        }\n\n        if (this._isDisposed) {\n          throwPortalOutletAlreadyDisposedError();\n        }\n      }\n\n      if (portal instanceof ComponentPortal) {\n        this._attachedPortal = portal;\n        return this.attachComponentPortal(portal);\n      } else if (portal instanceof TemplatePortal) {\n        this._attachedPortal = portal;\n        return this.attachTemplatePortal(portal); // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n      } else if (this.attachDomPortal && portal instanceof DomPortal) {\n        this._attachedPortal = portal;\n        return this.attachDomPortal(portal);\n      }\n\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        throwUnknownPortalTypeError();\n      }\n    }\n    /** Detaches a previously attached portal. */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      if (this._attachedPortal) {\n        this._attachedPortal.setAttachedHost(null);\n\n        this._attachedPortal = null;\n      }\n\n      this._invokeDisposeFn();\n    }\n    /** Permanently dispose of this portal host. */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.hasAttached()) {\n        this.detach();\n      }\n\n      this._invokeDisposeFn();\n\n      this._isDisposed = true;\n    }\n    /** @docs-private */\n\n  }, {\n    key: \"setDisposeFn\",\n    value: function setDisposeFn(fn) {\n      this._disposeFn = fn;\n    }\n  }, {\n    key: \"_invokeDisposeFn\",\n    value: function _invokeDisposeFn() {\n      if (this._disposeFn) {\n        this._disposeFn();\n\n        this._disposeFn = null;\n      }\n    }\n  }]);\n\n  return BasePortalOutlet;\n}();\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\n\n\nvar BasePortalHost = /*#__PURE__*/function (_BasePortalOutlet) {\n  _inherits(BasePortalHost, _BasePortalOutlet);\n\n  var _super4 = _createSuper(BasePortalHost);\n\n  function BasePortalHost() {\n    _classCallCheck(this, BasePortalHost);\n\n    return _super4.apply(this, arguments);\n  }\n\n  return BasePortalHost;\n}(BasePortalOutlet);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\n\n\nvar DomPortalOutlet = /*#__PURE__*/function (_BasePortalOutlet2) {\n  _inherits(DomPortalOutlet, _BasePortalOutlet2);\n\n  var _super5 = _createSuper(DomPortalOutlet);\n\n  function DomPortalOutlet(\n  /** Element into which the content is projected. */\n  outletElement, _componentFactoryResolver, _appRef, _defaultInjector,\n  /**\n   * @deprecated `_document` Parameter to be made required.\n   * @breaking-change 10.0.0\n   */\n  _document) {\n    var _thisSuper, _this4;\n\n    _classCallCheck(this, DomPortalOutlet);\n\n    _this4 = _super5.call(this);\n    _this4.outletElement = outletElement;\n    _this4._componentFactoryResolver = _componentFactoryResolver;\n    _this4._appRef = _appRef;\n    _this4._defaultInjector = _defaultInjector;\n    /**\n     * Attaches a DOM portal by transferring its content into the outlet.\n     * @param portal Portal to be attached.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n\n    _this4.attachDomPortal = function (portal) {\n      // @breaking-change 10.0.0 Remove check and error once the\n      // `_document` constructor parameter is required.\n      if (!_this4._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Cannot attach DOM portal without _document constructor parameter');\n      }\n\n      var element = portal.element;\n\n      if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('DOM portal content must be attached to a parent node.');\n      } // Anchor used to save the element's previous position so\n      // that we can restore it when the portal is detached.\n\n\n      var anchorNode = _this4._document.createComment('dom-portal');\n\n      element.parentNode.insertBefore(anchorNode, element);\n\n      _this4.outletElement.appendChild(element);\n\n      _get((_thisSuper = _assertThisInitialized(_this4), _getPrototypeOf(DomPortalOutlet.prototype)), \"setDisposeFn\", _thisSuper).call(_thisSuper, function () {\n        // We can't use `replaceWith` here because IE doesn't support it.\n        if (anchorNode.parentNode) {\n          anchorNode.parentNode.replaceChild(element, anchorNode);\n        }\n      });\n    };\n\n    _this4._document = _document;\n    return _this4;\n  }\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   * @returns Reference to the created component.\n   */\n\n\n  _createClass(DomPortalOutlet, [{\n    key: \"attachComponentPortal\",\n    value: function attachComponentPortal(portal) {\n      var _this5 = this;\n\n      var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n      var componentFactory = resolver.resolveComponentFactory(portal.component);\n      var componentRef; // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n      // for the component (in terms of Angular's component tree, not rendering).\n      // When the ViewContainerRef is missing, we use the factory to create the component directly\n      // and then manually attach the view to the application.\n\n      if (portal.viewContainerRef) {\n        componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n        this.setDisposeFn(function () {\n          return componentRef.destroy();\n        });\n      } else {\n        componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n\n        this._appRef.attachView(componentRef.hostView);\n\n        this.setDisposeFn(function () {\n          _this5._appRef.detachView(componentRef.hostView);\n\n          componentRef.destroy();\n        });\n      } // At this point the component has been instantiated, so we move it to the location in the DOM\n      // where we want it to be rendered.\n\n\n      this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n      return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n\n  }, {\n    key: \"attachTemplatePortal\",\n    value: function attachTemplatePortal(portal) {\n      var _this6 = this;\n\n      var viewContainer = portal.viewContainerRef;\n      var viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context); // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n      // But for the DomPortalOutlet the view can be added everywhere in the DOM\n      // (e.g Overlay Container) To move the view to the specified host element. We just\n      // re-append the existing root nodes.\n\n      viewRef.rootNodes.forEach(function (rootNode) {\n        return _this6.outletElement.appendChild(rootNode);\n      }); // Note that we want to detect changes after the nodes have been moved so that\n      // any directives inside the portal that are looking at the DOM inside a lifecycle\n      // hook won't be invoked too early.\n\n      viewRef.detectChanges();\n      this.setDisposeFn(function () {\n        var index = viewContainer.indexOf(viewRef);\n\n        if (index !== -1) {\n          viewContainer.remove(index);\n        }\n      }); // TODO(jelbourn): Return locals from view.\n\n      return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(DomPortalOutlet.prototype), \"dispose\", this).call(this);\n\n      if (this.outletElement.parentNode != null) {\n        this.outletElement.parentNode.removeChild(this.outletElement);\n      }\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n\n  }, {\n    key: \"_getComponentRootNode\",\n    value: function _getComponentRootNode(componentRef) {\n      return componentRef.hostView.rootNodes[0];\n    }\n  }]);\n\n  return DomPortalOutlet;\n}(BasePortalOutlet);\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\n\n\nvar DomPortalHost = /*#__PURE__*/function (_DomPortalOutlet) {\n  _inherits(DomPortalHost, _DomPortalOutlet);\n\n  var _super6 = _createSuper(DomPortalHost);\n\n  function DomPortalHost() {\n    _classCallCheck(this, DomPortalHost);\n\n    return _super6.apply(this, arguments);\n  }\n\n  return DomPortalHost;\n}(DomPortalOutlet);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\n\n\nvar CdkPortal = /*#__PURE__*/function (_TemplatePortal) {\n  _inherits(CdkPortal, _TemplatePortal);\n\n  var _super7 = _createSuper(CdkPortal);\n\n  function CdkPortal(templateRef, viewContainerRef) {\n    _classCallCheck(this, CdkPortal);\n\n    return _super7.call(this, templateRef, viewContainerRef);\n  }\n\n  return CdkPortal;\n}(TemplatePortal);\n\nCdkPortal.Éµfac = function CdkPortal_Factory(t) {\n  return new (t || CdkPortal)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.TemplateRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ViewContainerRef));\n};\n\nCdkPortal.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n  type: CdkPortal,\n  selectors: [[\"\", \"cdkPortal\", \"\"]],\n  exportAs: [\"cdkPortal\"],\n  features: [Éµngcc0.ÉµÉµInheritDefinitionFeature]\n});\n\nCdkPortal.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }, {\n    type: ViewContainerRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(CdkPortal, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkPortal]',\n      exportAs: 'cdkPortal'\n    }]\n  }], function () {\n    return [{\n      type: Éµngcc0.TemplateRef\n    }, {\n      type: Éµngcc0.ViewContainerRef\n    }];\n  }, null);\n})();\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\n\n\nvar TemplatePortalDirective = /*#__PURE__*/function (_CdkPortal) {\n  _inherits(TemplatePortalDirective, _CdkPortal);\n\n  var _super8 = _createSuper(TemplatePortalDirective);\n\n  function TemplatePortalDirective() {\n    _classCallCheck(this, TemplatePortalDirective);\n\n    return _super8.apply(this, arguments);\n  }\n\n  return TemplatePortalDirective;\n}(CdkPortal);\n\nTemplatePortalDirective.Éµfac = function TemplatePortalDirective_Factory(t) {\n  return ÉµTemplatePortalDirective_BaseFactory(t || TemplatePortalDirective);\n};\n\nTemplatePortalDirective.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n  type: TemplatePortalDirective,\n  selectors: [[\"\", \"cdk-portal\", \"\"], [\"\", \"portal\", \"\"]],\n  exportAs: [\"cdkPortal\"],\n  features: [Éµngcc0.ÉµÉµProvidersFeature([{\n    provide: CdkPortal,\n    useExisting: TemplatePortalDirective\n  }]), Éµngcc0.ÉµÉµInheritDefinitionFeature]\n});\nvar ÉµTemplatePortalDirective_BaseFactory = /*@__PURE__*/Éµngcc0.ÉµÉµgetInheritedFactory(TemplatePortalDirective);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(TemplatePortalDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-portal], [portal]',\n      exportAs: 'cdkPortal',\n      providers: [{\n        provide: CdkPortal,\n        useExisting: TemplatePortalDirective\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\n\n\nvar CdkPortalOutlet = /*#__PURE__*/function (_BasePortalOutlet3) {\n  _inherits(CdkPortalOutlet, _BasePortalOutlet3);\n\n  var _super9 = _createSuper(CdkPortalOutlet);\n\n  function CdkPortalOutlet(_componentFactoryResolver, _viewContainerRef,\n  /**\n   * @deprecated `_document` parameter to be made required.\n   * @breaking-change 9.0.0\n   */\n  _document) {\n    var _thisSuper2, _this7;\n\n    _classCallCheck(this, CdkPortalOutlet);\n\n    _this7 = _super9.call(this);\n    _this7._componentFactoryResolver = _componentFactoryResolver;\n    _this7._viewContainerRef = _viewContainerRef;\n    /** Whether the portal component is initialized. */\n\n    _this7._isInitialized = false;\n    /** Emits when a portal is attached to the outlet. */\n\n    _this7.attached = new EventEmitter();\n    /**\n     * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n     * @param portal Portal to be attached.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n\n    _this7.attachDomPortal = function (portal) {\n      // @breaking-change 9.0.0 Remove check and error once the\n      // `_document` constructor parameter is required.\n      if (!_this7._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Cannot attach DOM portal without _document constructor parameter');\n      }\n\n      var element = portal.element;\n\n      if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('DOM portal content must be attached to a parent node.');\n      } // Anchor used to save the element's previous position so\n      // that we can restore it when the portal is detached.\n\n\n      var anchorNode = _this7._document.createComment('dom-portal');\n\n      portal.setAttachedHost(_assertThisInitialized(_this7));\n      element.parentNode.insertBefore(anchorNode, element);\n\n      _this7._getRootNode().appendChild(element);\n\n      _get((_thisSuper2 = _assertThisInitialized(_this7), _getPrototypeOf(CdkPortalOutlet.prototype)), \"setDisposeFn\", _thisSuper2).call(_thisSuper2, function () {\n        if (anchorNode.parentNode) {\n          anchorNode.parentNode.replaceChild(element, anchorNode);\n        }\n      });\n    };\n\n    _this7._document = _document;\n    return _this7;\n  }\n  /** Portal associated with the Portal outlet. */\n\n\n  _createClass(CdkPortalOutlet, [{\n    key: \"portal\",\n    get: function get() {\n      return this._attachedPortal;\n    },\n    set: function set(portal) {\n      // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n      // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n      // and attach a portal programmatically in the parent component. When Angular does the first CD\n      // round, it will fire the setter with empty string, causing the user's content to be cleared.\n      if (this.hasAttached() && !portal && !this._isInitialized) {\n        return;\n      }\n\n      if (this.hasAttached()) {\n        _get(_getPrototypeOf(CdkPortalOutlet.prototype), \"detach\", this).call(this);\n      }\n\n      if (portal) {\n        _get(_getPrototypeOf(CdkPortalOutlet.prototype), \"attach\", this).call(this, portal);\n      }\n\n      this._attachedPortal = portal;\n    }\n    /** Component or view reference that is attached to the portal. */\n\n  }, {\n    key: \"attachedRef\",\n    get: function get() {\n      return this._attachedRef;\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._isInitialized = true;\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      _get(_getPrototypeOf(CdkPortalOutlet.prototype), \"dispose\", this).call(this);\n\n      this._attachedPortal = null;\n      this._attachedRef = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n\n  }, {\n    key: \"attachComponentPortal\",\n    value: function attachComponentPortal(portal) {\n      portal.setAttachedHost(this); // If the portal specifies an origin, use that as the logical location of the component\n      // in the application tree. Otherwise use the location of this PortalOutlet.\n\n      var viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;\n      var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n      var componentFactory = resolver.resolveComponentFactory(portal.component);\n      var ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector); // If we're using a view container that's different from the injected one (e.g. when the portal\n      // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n      // inside of the alternate view container.\n\n      if (viewContainerRef !== this._viewContainerRef) {\n        this._getRootNode().appendChild(ref.hostView.rootNodes[0]);\n      }\n\n      _get(_getPrototypeOf(CdkPortalOutlet.prototype), \"setDisposeFn\", this).call(this, function () {\n        return ref.destroy();\n      });\n\n      this._attachedPortal = portal;\n      this._attachedRef = ref;\n      this.attached.emit(ref);\n      return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortalHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n\n  }, {\n    key: \"attachTemplatePortal\",\n    value: function attachTemplatePortal(portal) {\n      var _this8 = this;\n\n      portal.setAttachedHost(this);\n\n      var viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n\n      _get(_getPrototypeOf(CdkPortalOutlet.prototype), \"setDisposeFn\", this).call(this, function () {\n        return _this8._viewContainerRef.clear();\n      });\n\n      this._attachedPortal = portal;\n      this._attachedRef = viewRef;\n      this.attached.emit(viewRef);\n      return viewRef;\n    }\n    /** Gets the root node of the portal outlet. */\n\n  }, {\n    key: \"_getRootNode\",\n    value: function _getRootNode() {\n      var nativeElement = this._viewContainerRef.element.nativeElement; // The directive could be set on a template which will result in a comment\n      // node being the root. Use the comment's parent node if that is the case.\n\n      return nativeElement.nodeType === nativeElement.ELEMENT_NODE ? nativeElement : nativeElement.parentNode;\n    }\n  }]);\n\n  return CdkPortalOutlet;\n}(BasePortalOutlet);\n\nCdkPortalOutlet.Éµfac = function CdkPortalOutlet_Factory(t) {\n  return new (t || CdkPortalOutlet)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ComponentFactoryResolver), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ViewContainerRef), Éµngcc0.ÉµÉµdirectiveInject(DOCUMENT));\n};\n\nCdkPortalOutlet.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n  type: CdkPortalOutlet,\n  selectors: [[\"\", \"cdkPortalOutlet\", \"\"]],\n  inputs: {\n    portal: [\"cdkPortalOutlet\", \"portal\"]\n  },\n  outputs: {\n    attached: \"attached\"\n  },\n  exportAs: [\"cdkPortalOutlet\"],\n  features: [Éµngcc0.ÉµÉµInheritDefinitionFeature]\n});\n\nCdkPortalOutlet.ctorParameters = function () {\n  return [{\n    type: ComponentFactoryResolver\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\nCdkPortalOutlet.propDecorators = {\n  attached: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(CdkPortalOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkPortalOutlet]',\n      exportAs: 'cdkPortalOutlet',\n      inputs: ['portal: cdkPortalOutlet']\n    }]\n  }], function () {\n    return [{\n      type: Éµngcc0.ComponentFactoryResolver\n    }, {\n      type: Éµngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    attached: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\n\n\nvar PortalHostDirective = /*#__PURE__*/function (_CdkPortalOutlet) {\n  _inherits(PortalHostDirective, _CdkPortalOutlet);\n\n  var _super10 = _createSuper(PortalHostDirective);\n\n  function PortalHostDirective() {\n    _classCallCheck(this, PortalHostDirective);\n\n    return _super10.apply(this, arguments);\n  }\n\n  return PortalHostDirective;\n}(CdkPortalOutlet);\n\nPortalHostDirective.Éµfac = function PortalHostDirective_Factory(t) {\n  return ÉµPortalHostDirective_BaseFactory(t || PortalHostDirective);\n};\n\nPortalHostDirective.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n  type: PortalHostDirective,\n  selectors: [[\"\", \"cdkPortalHost\", \"\"], [\"\", \"portalHost\", \"\"]],\n  inputs: {\n    portal: [\"cdkPortalHost\", \"portal\"]\n  },\n  exportAs: [\"cdkPortalHost\"],\n  features: [Éµngcc0.ÉµÉµProvidersFeature([{\n    provide: CdkPortalOutlet,\n    useExisting: PortalHostDirective\n  }]), Éµngcc0.ÉµÉµInheritDefinitionFeature]\n});\nvar ÉµPortalHostDirective_BaseFactory = /*@__PURE__*/Éµngcc0.ÉµÉµgetInheritedFactory(PortalHostDirective);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(PortalHostDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkPortalHost], [portalHost]',\n      exportAs: 'cdkPortalHost',\n      inputs: ['portal: cdkPortalHost'],\n      providers: [{\n        provide: CdkPortalOutlet,\n        useExisting: PortalHostDirective\n      }]\n    }]\n  }], null, null);\n})();\n\nvar PortalModule = function PortalModule() {\n  _classCallCheck(this, PortalModule);\n};\n\nPortalModule.Éµfac = function PortalModule_Factory(t) {\n  return new (t || PortalModule)();\n};\n\nPortalModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({\n  type: PortalModule\n});\nPortalModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(PortalModule, {\n    declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n    exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(PortalModule, [{\n    type: NgModule,\n    args: [{\n      exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n      declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n * @deprecated Use `Injector.create` instead.\n * @breaking-change 11.0.0\n */\n\n\nvar PortalInjector = /*#__PURE__*/function () {\n  function PortalInjector(_parentInjector, _customTokens) {\n    _classCallCheck(this, PortalInjector);\n\n    this._parentInjector = _parentInjector;\n    this._customTokens = _customTokens;\n  }\n\n  _createClass(PortalInjector, [{\n    key: \"get\",\n    value: function get(token, notFoundValue) {\n      var value = this._customTokens.get(token);\n\n      if (typeof value !== 'undefined') {\n        return value;\n      }\n\n      return this._parentInjector.get(token, notFoundValue);\n    }\n  }]);\n\n  return PortalInjector;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BasePortalHost, BasePortalOutlet, CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortal, DomPortalHost, DomPortalOutlet, Portal, PortalHostDirective, PortalInjector, PortalModule, TemplatePortal, TemplatePortalDirective }; //# sourceMappingURL=portal.js.map","map":{"version":3,"sources":["/Users/mohammedelmourabit/xrp/xpr/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/portal.js"],"names":["ElementRef","Directive","TemplateRef","ViewContainerRef","EventEmitter","ComponentFactoryResolver","Inject","Output","NgModule","DOCUMENT","Éµngcc0","throwNullPortalError","Error","throwPortalAlreadyAttachedError","throwPortalOutletAlreadyDisposedError","throwUnknownPortalTypeError","throwNullPortalOutletError","throwNoPortalAttachedError","Portal","host","ngDevMode","hasAttached","_attachedHost","attach","detach","ComponentPortal","component","viewContainerRef","injector","componentFactoryResolver","TemplatePortal","template","context","templateRef","elementRef","undefined","DomPortal","element","nativeElement","BasePortalOutlet","_isDisposed","attachDomPortal","_attachedPortal","portal","attachComponentPortal","attachTemplatePortal","setAttachedHost","_invokeDisposeFn","fn","_disposeFn","BasePortalHost","DomPortalOutlet","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","_document","parentNode","anchorNode","createComment","insertBefore","appendChild","replaceChild","resolver","componentFactory","resolveComponentFactory","componentRef","createComponent","length","setDisposeFn","destroy","create","attachView","hostView","detachView","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","rootNodes","forEach","rootNode","detectChanges","index","indexOf","remove","removeChild","DomPortalHost","CdkPortal","Éµfac","CdkPortal_Factory","t","ÉµÉµdirectiveInject","Éµdir","ÉµÉµdefineDirective","type","selectors","exportAs","features","ÉµÉµInheritDefinitionFeature","ctorParameters","ÉµsetClassMetadata","args","selector","TemplatePortalDirective","TemplatePortalDirective_Factory","ÉµTemplatePortalDirective_BaseFactory","ÉµÉµProvidersFeature","provide","useExisting","ÉµÉµgetInheritedFactory","providers","CdkPortalOutlet","_viewContainerRef","_isInitialized","attached","_getRootNode","_attachedRef","ref","emit","clear","nodeType","ELEMENT_NODE","CdkPortalOutlet_Factory","inputs","outputs","decorators","propDecorators","PortalHostDirective","PortalHostDirective_Factory","ÉµPortalHostDirective_BaseFactory","PortalModule","PortalModule_Factory","Éµmod","ÉµÉµdefineNgModule","Éµinj","ÉµÉµdefineInjector","ngJitMode","ÉµÉµsetNgModuleScope","declarations","exports","PortalInjector","_parentInjector","_customTokens","token","notFoundValue","value","get"],"mappings":"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","sourcesContent":["import { ElementRef, Directive, TemplateRef, ViewContainerRef, EventEmitter, ComponentFactoryResolver, Inject, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nimport * as Éµngcc0 from '@angular/core';\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nclass Portal {\n    /** Attach this portal to a host. */\n    attach(host) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (host == null) {\n                throwNullPortalOutletError();\n            }\n            if (host.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n        }\n        this._attachedHost = host;\n        return host.attach(this);\n    }\n    /** Detach this portal from its host */\n    detach() {\n        let host = this._attachedHost;\n        if (host != null) {\n            this._attachedHost = null;\n            host.detach();\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwNoPortalAttachedError();\n        }\n    }\n    /** Whether this portal is attached to a host. */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal extends Portal {\n    constructor(component, viewContainerRef, injector, componentFactoryResolver) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n    }\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nclass TemplatePortal extends Portal {\n    constructor(template, viewContainerRef, context) {\n        super();\n        this.templateRef = template;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n    }\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\nclass DomPortal extends Portal {\n    constructor(element) {\n        super();\n        this.element = element instanceof ElementRef ? element.nativeElement : element;\n    }\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nclass BasePortalOutlet {\n    constructor() {\n        /** Whether this host has already been permanently disposed. */\n        this._isDisposed = false;\n        // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n        this.attachDomPortal = null;\n    }\n    /** Whether this host has an attached portal. */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /** Attaches a portal. */\n    attach(portal) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!portal) {\n                throwNullPortalError();\n            }\n            if (this.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n            if (this._isDisposed) {\n                throwPortalOutletAlreadyDisposedError();\n            }\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n            // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n        }\n        else if (this.attachDomPortal && portal instanceof DomPortal) {\n            this._attachedPortal = portal;\n            return this.attachDomPortal(portal);\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwUnknownPortalTypeError();\n        }\n    }\n    /** Detaches a previously attached portal. */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /** Permanently dispose of this portal host. */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /** @docs-private */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass BasePortalHost extends BasePortalOutlet {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    constructor(\n    /** Element into which the content is projected. */\n    outletElement, _componentFactoryResolver, _appRef, _defaultInjector, \n    /**\n     * @deprecated `_document` Parameter to be made required.\n     * @breaking-change 10.0.0\n     */\n    _document) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n        /**\n         * Attaches a DOM portal by transferring its content into the outlet.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 10.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            element.parentNode.insertBefore(anchorNode, element);\n            this.outletElement.appendChild(element);\n            super.setDisposeFn(() => {\n                // We can't use `replaceWith` here because IE doesn't support it.\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn(() => componentRef.destroy());\n        }\n        else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(() => {\n                this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        let viewContainer = portal.viewContainerRef;\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n        // Note that we want to detect changes after the nodes have been moved so that\n        // any directives inside the portal that are looking at the DOM inside a lifecycle\n        // hook won't be invoked too early.\n        viewRef.detectChanges();\n        this.setDisposeFn((() => {\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        }));\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     */\n    dispose() {\n        super.dispose();\n        if (this.outletElement.parentNode != null) {\n            this.outletElement.parentNode.removeChild(this.outletElement);\n        }\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n    _getComponentRootNode(componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    }\n}\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass DomPortalHost extends DomPortalOutlet {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    constructor(templateRef, viewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n}\nCdkPortal.Éµfac = function CdkPortal_Factory(t) { return new (t || CdkPortal)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.TemplateRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ViewContainerRef)); };\nCdkPortal.Éµdir = Éµngcc0.ÉµÉµdefineDirective({ type: CdkPortal, selectors: [[\"\", \"cdkPortal\", \"\"]], exportAs: [\"cdkPortal\"], features: [Éµngcc0.ÉµÉµInheritDefinitionFeature] });\nCdkPortal.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: ViewContainerRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(CdkPortal, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortal]',\n                exportAs: 'cdkPortal'\n            }]\n    }], function () { return [{ type: Éµngcc0.TemplateRef }, { type: Éµngcc0.ViewContainerRef }]; }, null); })();\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\nclass TemplatePortalDirective extends CdkPortal {\n}\nTemplatePortalDirective.Éµfac = function TemplatePortalDirective_Factory(t) { return ÉµTemplatePortalDirective_BaseFactory(t || TemplatePortalDirective); };\nTemplatePortalDirective.Éµdir = Éµngcc0.ÉµÉµdefineDirective({ type: TemplatePortalDirective, selectors: [[\"\", \"cdk-portal\", \"\"], [\"\", \"portal\", \"\"]], exportAs: [\"cdkPortal\"], features: [Éµngcc0.ÉµÉµProvidersFeature([{\n                provide: CdkPortal,\n                useExisting: TemplatePortalDirective\n            }]), Éµngcc0.ÉµÉµInheritDefinitionFeature] });\nconst ÉµTemplatePortalDirective_BaseFactory = /*@__PURE__*/ Éµngcc0.ÉµÉµgetInheritedFactory(TemplatePortalDirective);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(TemplatePortalDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-portal], [portal]',\n                exportAs: 'cdkPortal',\n                providers: [{\n                        provide: CdkPortal,\n                        useExisting: TemplatePortalDirective\n                    }]\n            }]\n    }], null, null); })();\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    constructor(_componentFactoryResolver, _viewContainerRef, \n    /**\n     * @deprecated `_document` parameter to be made required.\n     * @breaking-change 9.0.0\n     */\n    _document) {\n        super();\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n        /** Whether the portal component is initialized. */\n        this._isInitialized = false;\n        /** Emits when a portal is attached to the outlet. */\n        this.attached = new EventEmitter();\n        /**\n         * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 9.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            portal.setAttachedHost(this);\n            element.parentNode.insertBefore(anchorNode, element);\n            this._getRootNode().appendChild(element);\n            super.setDisposeFn(() => {\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /** Portal associated with the Portal outlet. */\n    get portal() {\n        return this._attachedPortal;\n    }\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal;\n    }\n    /** Component or view reference that is attached to the portal. */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        const viewContainerRef = portal.viewContainerRef != null ?\n            portal.viewContainerRef :\n            this._viewContainerRef;\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n        // If we're using a view container that's different from the injected one (e.g. when the portal\n        // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n        // inside of the alternate view container.\n        if (viewContainerRef !== this._viewContainerRef) {\n            this._getRootNode().appendChild(ref.hostView.rootNodes[0]);\n        }\n        super.setDisposeFn(() => ref.destroy());\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortalHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        super.setDisposeFn(() => this._viewContainerRef.clear());\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n    /** Gets the root node of the portal outlet. */\n    _getRootNode() {\n        const nativeElement = this._viewContainerRef.element.nativeElement;\n        // The directive could be set on a template which will result in a comment\n        // node being the root. Use the comment's parent node if that is the case.\n        return (nativeElement.nodeType === nativeElement.ELEMENT_NODE ?\n            nativeElement : nativeElement.parentNode);\n    }\n}\nCdkPortalOutlet.Éµfac = function CdkPortalOutlet_Factory(t) { return new (t || CdkPortalOutlet)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ComponentFactoryResolver), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ViewContainerRef), Éµngcc0.ÉµÉµdirectiveInject(DOCUMENT)); };\nCdkPortalOutlet.Éµdir = Éµngcc0.ÉµÉµdefineDirective({ type: CdkPortalOutlet, selectors: [[\"\", \"cdkPortalOutlet\", \"\"]], inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\"], features: [Éµngcc0.ÉµÉµInheritDefinitionFeature] });\nCdkPortalOutlet.ctorParameters = () => [\n    { type: ComponentFactoryResolver },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nCdkPortalOutlet.propDecorators = {\n    attached: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(CdkPortalOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortalOutlet]',\n                exportAs: 'cdkPortalOutlet',\n                inputs: ['portal: cdkPortalOutlet']\n            }]\n    }], function () { return [{ type: Éµngcc0.ComponentFactoryResolver }, { type: Éµngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { attached: [{\n            type: Output\n        }] }); })();\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass PortalHostDirective extends CdkPortalOutlet {\n}\nPortalHostDirective.Éµfac = function PortalHostDirective_Factory(t) { return ÉµPortalHostDirective_BaseFactory(t || PortalHostDirective); };\nPortalHostDirective.Éµdir = Éµngcc0.ÉµÉµdefineDirective({ type: PortalHostDirective, selectors: [[\"\", \"cdkPortalHost\", \"\"], [\"\", \"portalHost\", \"\"]], inputs: { portal: [\"cdkPortalHost\", \"portal\"] }, exportAs: [\"cdkPortalHost\"], features: [Éµngcc0.ÉµÉµProvidersFeature([{\n                provide: CdkPortalOutlet,\n                useExisting: PortalHostDirective\n            }]), Éµngcc0.ÉµÉµInheritDefinitionFeature] });\nconst ÉµPortalHostDirective_BaseFactory = /*@__PURE__*/ Éµngcc0.ÉµÉµgetInheritedFactory(PortalHostDirective);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(PortalHostDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortalHost], [portalHost]',\n                exportAs: 'cdkPortalHost',\n                inputs: ['portal: cdkPortalHost'],\n                providers: [{\n                        provide: CdkPortalOutlet,\n                        useExisting: PortalHostDirective\n                    }]\n            }]\n    }], null, null); })();\nclass PortalModule {\n}\nPortalModule.Éµfac = function PortalModule_Factory(t) { return new (t || PortalModule)(); };\nPortalModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({ type: PortalModule });\nPortalModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({});\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(PortalModule, { declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective], exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(PortalModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n * @deprecated Use `Injector.create` instead.\n * @breaking-change 11.0.0\n */\nclass PortalInjector {\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    get(token, notFoundValue) {\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, BasePortalOutlet, CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortal, DomPortalHost, DomPortalOutlet, Portal, PortalHostDirective, PortalInjector, PortalModule, TemplatePortal, TemplatePortalDirective };\n\n//# sourceMappingURL=portal.js.map"]},"metadata":{},"sourceType":"module"}