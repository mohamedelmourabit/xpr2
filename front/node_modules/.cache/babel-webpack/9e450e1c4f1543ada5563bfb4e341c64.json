{"ast":null,"code":"import _slicedToArray from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _get from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { coerceNumberProperty, coerceElement } from '@angular/cdk/coercion';\nimport { InjectionToken, Directive, forwardRef, Input, ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, Optional, Inject, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, Output, ViewChild, ViewContainerRef, TemplateRef, IterableDiffers, SkipSelf, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport { Platform, getRtlScrollAxisType, supportsScrollBehavior, PlatformModule } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { isDataSource, ArrayDataSource, _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The injection token used to specify the virtual scrolling strategy. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/cdk/collections';\nvar _c0 = [\"contentWrapper\"];\nvar _c1 = [\"*\"];\nvar VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\n\nvar FixedSizeVirtualScrollStrategy = /*#__PURE__*/function () {\n  /**\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  function FixedSizeVirtualScrollStrategy(itemSize, minBufferPx, maxBufferPx) {\n    _classCallCheck(this, FixedSizeVirtualScrollStrategy);\n\n    this._scrolledIndexChange = new Subject();\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n    this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n    /** The attached viewport. */\n\n    this._viewport = null;\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n  }\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n\n\n  _createClass(FixedSizeVirtualScrollStrategy, [{\n    key: \"attach\",\n    value: function attach(viewport) {\n      this._viewport = viewport;\n\n      this._updateTotalContentSize();\n\n      this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this._scrolledIndexChange.complete();\n\n      this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n\n  }, {\n    key: \"updateItemAndBufferSize\",\n    value: function updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n      if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n      }\n\n      this._itemSize = itemSize;\n      this._minBufferPx = minBufferPx;\n      this._maxBufferPx = maxBufferPx;\n\n      this._updateTotalContentSize();\n\n      this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n  }, {\n    key: \"onContentScrolled\",\n    value: function onContentScrolled() {\n      this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n  }, {\n    key: \"onDataLengthChanged\",\n    value: function onDataLengthChanged() {\n      this._updateTotalContentSize();\n\n      this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n  }, {\n    key: \"onContentRendered\",\n    value: function onContentRendered() {}\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n  }, {\n    key: \"onRenderedOffsetChanged\",\n    value: function onRenderedOffsetChanged() {}\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n\n  }, {\n    key: \"scrollToIndex\",\n    value: function scrollToIndex(index, behavior) {\n      if (this._viewport) {\n        this._viewport.scrollToOffset(index * this._itemSize, behavior);\n      }\n    }\n    /** Update the viewport's total content size. */\n\n  }, {\n    key: \"_updateTotalContentSize\",\n    value: function _updateTotalContentSize() {\n      if (!this._viewport) {\n        return;\n      }\n\n      this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n\n  }, {\n    key: \"_updateRenderedRange\",\n    value: function _updateRenderedRange() {\n      if (!this._viewport) {\n        return;\n      }\n\n      var renderedRange = this._viewport.getRenderedRange();\n\n      var newRange = {\n        start: renderedRange.start,\n        end: renderedRange.end\n      };\n\n      var viewportSize = this._viewport.getViewportSize();\n\n      var dataLength = this._viewport.getDataLength();\n\n      var scrollOffset = this._viewport.measureScrollOffset(); // Prevent NaN as result when dividing by zero.\n\n\n      var firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0; // If user scrolls to the bottom of the list and data changes to a smaller list\n\n      if (newRange.end > dataLength) {\n        // We have to recalculate the first visible index based on new data length and viewport size.\n        var maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n        var newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems)); // If first visible index changed we must update scroll offset to handle start/end buffers\n        // Current range must also be adjusted to cover the new position (bottom of new list).\n\n        if (firstVisibleIndex != newVisibleIndex) {\n          firstVisibleIndex = newVisibleIndex;\n          scrollOffset = newVisibleIndex * this._itemSize;\n          newRange.start = Math.floor(firstVisibleIndex);\n        }\n\n        newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n      }\n\n      var startBuffer = scrollOffset - newRange.start * this._itemSize;\n\n      if (startBuffer < this._minBufferPx && newRange.start != 0) {\n        var expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n        newRange.start = Math.max(0, newRange.start - expandStart);\n        newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n      } else {\n        var endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n\n        if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n          var expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n\n          if (expandEnd > 0) {\n            newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n            newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n          }\n        }\n      }\n\n      this._viewport.setRenderedRange(newRange);\n\n      this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n\n      this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n  }]);\n\n  return FixedSizeVirtualScrollStrategy;\n}();\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\n\n\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n  return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\n\n\nvar CdkFixedSizeVirtualScroll = /*#__PURE__*/function () {\n  function CdkFixedSizeVirtualScroll() {\n    _classCallCheck(this, CdkFixedSizeVirtualScroll);\n\n    this._itemSize = 20;\n    this._minBufferPx = 100;\n    this._maxBufferPx = 200;\n    /** The scroll strategy used by this directive. */\n\n    this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n  }\n  /** The size of the items in the list (in pixels). */\n\n\n  _createClass(CdkFixedSizeVirtualScroll, [{\n    key: \"itemSize\",\n    get: function get() {\n      return this._itemSize;\n    },\n    set: function set(value) {\n      this._itemSize = coerceNumberProperty(value);\n    }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n\n  }, {\n    key: \"minBufferPx\",\n    get: function get() {\n      return this._minBufferPx;\n    },\n    set: function set(value) {\n      this._minBufferPx = coerceNumberProperty(value);\n    }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n\n  }, {\n    key: \"maxBufferPx\",\n    get: function get() {\n      return this._maxBufferPx;\n    },\n    set: function set(value) {\n      this._maxBufferPx = coerceNumberProperty(value);\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n  }]);\n\n  return CdkFixedSizeVirtualScroll;\n}();\n\nCdkFixedSizeVirtualScroll.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) {\n  return new (t || CdkFixedSizeVirtualScroll)();\n};\n\nCdkFixedSizeVirtualScroll.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkFixedSizeVirtualScroll,\n  selectors: [[\"cdk-virtual-scroll-viewport\", \"itemSize\", \"\"]],\n  inputs: {\n    itemSize: \"itemSize\",\n    minBufferPx: \"minBufferPx\",\n    maxBufferPx: \"maxBufferPx\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: VIRTUAL_SCROLL_STRATEGY,\n    useFactory: _fixedSizeVirtualScrollStrategyFactory,\n    deps: [forwardRef(function () {\n      return CdkFixedSizeVirtualScroll;\n    })]\n  }]), ɵngcc0.ɵɵNgOnChangesFeature]\n});\nCdkFixedSizeVirtualScroll.propDecorators = {\n  itemSize: [{\n    type: Input\n  }],\n  minBufferPx: [{\n    type: Input\n  }],\n  maxBufferPx: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFixedSizeVirtualScroll, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-virtual-scroll-viewport[itemSize]',\n      providers: [{\n        provide: VIRTUAL_SCROLL_STRATEGY,\n        useFactory: _fixedSizeVirtualScrollStrategyFactory,\n        deps: [forwardRef(function () {\n          return CdkFixedSizeVirtualScroll;\n        })]\n      }]\n    }]\n  }], function () {\n    return [];\n  }, {\n    itemSize: [{\n      type: Input\n    }],\n    minBufferPx: [{\n      type: Input\n    }],\n    maxBufferPx: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Time in ms to throttle the scrolling events by default. */\n\n\nvar DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n\nvar ScrollDispatcher = /*#__PURE__*/function () {\n  function ScrollDispatcher(_ngZone, _platform, document) {\n    _classCallCheck(this, ScrollDispatcher);\n\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n\n    this._scrolled = new Subject();\n    /** Keeps track of the global `scroll` and `resize` subscriptions. */\n\n    this._globalSubscription = null;\n    /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n\n    this._scrolledCount = 0;\n    /**\n     * Map of all the scrollable references that are registered with the service and their\n     * scroll event subscriptions.\n     */\n\n    this.scrollContainers = new Map();\n    this._document = document;\n  }\n  /**\n   * Registers a scrollable instance with the service and listens for its scrolled events. When the\n   * scrollable is scrolled, the service emits the event to its scrolled observable.\n   * @param scrollable Scrollable instance to be registered.\n   */\n\n\n  _createClass(ScrollDispatcher, [{\n    key: \"register\",\n    value: function register(scrollable) {\n      var _this = this;\n\n      if (!this.scrollContainers.has(scrollable)) {\n        this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(function () {\n          return _this._scrolled.next(scrollable);\n        }));\n      }\n    }\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n\n  }, {\n    key: \"deregister\",\n    value: function deregister(scrollable) {\n      var scrollableReference = this.scrollContainers.get(scrollable);\n\n      if (scrollableReference) {\n        scrollableReference.unsubscribe();\n        this.scrollContainers.delete(scrollable);\n      }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n\n  }, {\n    key: \"scrolled\",\n    value: function scrolled() {\n      var _this2 = this;\n\n      var auditTimeInMs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_SCROLL_TIME;\n\n      if (!this._platform.isBrowser) {\n        return of();\n      }\n\n      return new Observable(function (observer) {\n        if (!_this2._globalSubscription) {\n          _this2._addGlobalListener();\n        } // In the case of a 0ms delay, use an observable without auditTime\n        // since it does add a perceptible delay in processing overhead.\n\n\n        var subscription = auditTimeInMs > 0 ? _this2._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) : _this2._scrolled.subscribe(observer);\n        _this2._scrolledCount++;\n        return function () {\n          subscription.unsubscribe();\n          _this2._scrolledCount--;\n\n          if (!_this2._scrolledCount) {\n            _this2._removeGlobalListener();\n          }\n        };\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this3 = this;\n\n      this._removeGlobalListener();\n\n      this.scrollContainers.forEach(function (_, container) {\n        return _this3.deregister(container);\n      });\n\n      this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementOrElementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n\n  }, {\n    key: \"ancestorScrolled\",\n    value: function ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n      var ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n      return this.scrolled(auditTimeInMs).pipe(filter(function (target) {\n        return !target || ancestors.indexOf(target) > -1;\n      }));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n\n  }, {\n    key: \"getAncestorScrollContainers\",\n    value: function getAncestorScrollContainers(elementOrElementRef) {\n      var _this4 = this;\n\n      var scrollingContainers = [];\n      this.scrollContainers.forEach(function (_subscription, scrollable) {\n        if (_this4._scrollableContainsElement(scrollable, elementOrElementRef)) {\n          scrollingContainers.push(scrollable);\n        }\n      });\n      return scrollingContainers;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n\n  }, {\n    key: \"_getWindow\",\n    value: function _getWindow() {\n      return this._document.defaultView || window;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n\n  }, {\n    key: \"_scrollableContainsElement\",\n    value: function _scrollableContainsElement(scrollable, elementOrElementRef) {\n      var element = coerceElement(elementOrElementRef);\n      var scrollableElement = scrollable.getElementRef().nativeElement; // Traverse through the element parents until we reach null, checking if any of the elements\n      // are the scrollable's element.\n\n      do {\n        if (element == scrollableElement) {\n          return true;\n        }\n      } while (element = element.parentElement);\n\n      return false;\n    }\n    /** Sets up the global scroll listeners. */\n\n  }, {\n    key: \"_addGlobalListener\",\n    value: function _addGlobalListener() {\n      var _this5 = this;\n\n      this._globalSubscription = this._ngZone.runOutsideAngular(function () {\n        var window = _this5._getWindow();\n\n        return fromEvent(window.document, 'scroll').subscribe(function () {\n          return _this5._scrolled.next();\n        });\n      });\n    }\n    /** Cleans up the global scroll listener. */\n\n  }, {\n    key: \"_removeGlobalListener\",\n    value: function _removeGlobalListener() {\n      if (this._globalSubscription) {\n        this._globalSubscription.unsubscribe();\n\n        this._globalSubscription = null;\n      }\n    }\n  }]);\n\n  return ScrollDispatcher;\n}();\n\nScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) {\n  return new (t || ScrollDispatcher)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT, 8));\n};\n\nScrollDispatcher.ɵprov = ɵɵdefineInjectable({\n  factory: function ScrollDispatcher_Factory() {\n    return new ScrollDispatcher(ɵɵinject(NgZone), ɵɵinject(Platform), ɵɵinject(DOCUMENT, 8));\n  },\n  token: ScrollDispatcher,\n  providedIn: \"root\"\n});\n\nScrollDispatcher.ctorParameters = function () {\n  return [{\n    type: NgZone\n  }, {\n    type: Platform\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n\n\nvar CdkScrollable = /*#__PURE__*/function () {\n  function CdkScrollable(elementRef, scrollDispatcher, ngZone, dir) {\n    var _this6 = this;\n\n    _classCallCheck(this, CdkScrollable);\n\n    this.elementRef = elementRef;\n    this.scrollDispatcher = scrollDispatcher;\n    this.ngZone = ngZone;\n    this.dir = dir;\n    this._destroyed = new Subject();\n    this._elementScrolled = new Observable(function (observer) {\n      return _this6.ngZone.runOutsideAngular(function () {\n        return fromEvent(_this6.elementRef.nativeElement, 'scroll').pipe(takeUntil(_this6._destroyed)).subscribe(observer);\n      });\n    });\n  }\n\n  _createClass(CdkScrollable, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.scrollDispatcher.register(this);\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.scrollDispatcher.deregister(this);\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n\n  }, {\n    key: \"elementScrolled\",\n    value: function elementScrolled() {\n      return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n\n  }, {\n    key: \"getElementRef\",\n    value: function getElementRef() {\n      return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n\n  }, {\n    key: \"scrollTo\",\n    value: function scrollTo(options) {\n      var el = this.elementRef.nativeElement;\n      var isRtl = this.dir && this.dir.value == 'rtl'; // Rewrite start & end offsets as right or left offsets.\n\n      if (options.left == null) {\n        options.left = isRtl ? options.end : options.start;\n      }\n\n      if (options.right == null) {\n        options.right = isRtl ? options.start : options.end;\n      } // Rewrite the bottom offset as a top offset.\n\n\n      if (options.bottom != null) {\n        options.top = el.scrollHeight - el.clientHeight - options.bottom;\n      } // Rewrite the right offset as a left offset.\n\n\n      if (isRtl && getRtlScrollAxisType() != 0\n      /* NORMAL */\n      ) {\n          if (options.left != null) {\n            options.right = el.scrollWidth - el.clientWidth - options.left;\n          }\n\n          if (getRtlScrollAxisType() == 2\n          /* INVERTED */\n          ) {\n              options.left = options.right;\n            } else if (getRtlScrollAxisType() == 1\n          /* NEGATED */\n          ) {\n              options.left = options.right ? -options.right : options.right;\n            }\n        } else {\n        if (options.right != null) {\n          options.left = el.scrollWidth - el.clientWidth - options.right;\n        }\n      }\n\n      this._applyScrollToOptions(options);\n    }\n  }, {\n    key: \"_applyScrollToOptions\",\n    value: function _applyScrollToOptions(options) {\n      var el = this.elementRef.nativeElement;\n\n      if (supportsScrollBehavior()) {\n        el.scrollTo(options);\n      } else {\n        if (options.top != null) {\n          el.scrollTop = options.top;\n        }\n\n        if (options.left != null) {\n          el.scrollLeft = options.left;\n        }\n      }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n\n  }, {\n    key: \"measureScrollOffset\",\n    value: function measureScrollOffset(from) {\n      var LEFT = 'left';\n      var RIGHT = 'right';\n      var el = this.elementRef.nativeElement;\n\n      if (from == 'top') {\n        return el.scrollTop;\n      }\n\n      if (from == 'bottom') {\n        return el.scrollHeight - el.clientHeight - el.scrollTop;\n      } // Rewrite start & end as left or right offsets.\n\n\n      var isRtl = this.dir && this.dir.value == 'rtl';\n\n      if (from == 'start') {\n        from = isRtl ? RIGHT : LEFT;\n      } else if (from == 'end') {\n        from = isRtl ? LEFT : RIGHT;\n      }\n\n      if (isRtl && getRtlScrollAxisType() == 2\n      /* INVERTED */\n      ) {\n          // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n          // 0 when scrolled all the way right.\n          if (from == LEFT) {\n            return el.scrollWidth - el.clientWidth - el.scrollLeft;\n          } else {\n            return el.scrollLeft;\n          }\n        } else if (isRtl && getRtlScrollAxisType() == 1\n      /* NEGATED */\n      ) {\n          // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n          // 0 when scrolled all the way right.\n          if (from == LEFT) {\n            return el.scrollLeft + el.scrollWidth - el.clientWidth;\n          } else {\n            return -el.scrollLeft;\n          }\n        } else {\n        // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n        // (scrollWidth - clientWidth) when scrolled all the way right.\n        if (from == LEFT) {\n          return el.scrollLeft;\n        } else {\n          return el.scrollWidth - el.clientWidth - el.scrollLeft;\n        }\n      }\n    }\n  }]);\n\n  return CdkScrollable;\n}();\n\nCdkScrollable.ɵfac = function CdkScrollable_Factory(t) {\n  return new (t || CdkScrollable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8));\n};\n\nCdkScrollable.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkScrollable,\n  selectors: [[\"\", \"cdk-scrollable\", \"\"], [\"\", \"cdkScrollable\", \"\"]]\n});\n\nCdkScrollable.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ScrollDispatcher\n  }, {\n    type: NgZone\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkScrollable, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-scrollable], [cdkScrollable]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ScrollDispatcher\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Time in ms to throttle the resize events by default. */\n\n\nvar DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\n\nvar ViewportRuler = /*#__PURE__*/function () {\n  function ViewportRuler(_platform, ngZone, document) {\n    var _this7 = this;\n\n    _classCallCheck(this, ViewportRuler);\n\n    this._platform = _platform;\n    /** Stream of viewport change events. */\n\n    this._change = new Subject();\n    /** Event listener that will be used to handle the viewport change events. */\n\n    this._changeListener = function (event) {\n      _this7._change.next(event);\n    };\n\n    this._document = document;\n    ngZone.runOutsideAngular(function () {\n      if (_platform.isBrowser) {\n        var _window = _this7._getWindow(); // Note that bind the events ourselves, rather than going through something like RxJS's\n        // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n\n\n        _window.addEventListener('resize', _this7._changeListener);\n\n        _window.addEventListener('orientationchange', _this7._changeListener);\n      } // We don't need to keep track of the subscription,\n      // because we complete the `change` stream on destroy.\n\n\n      _this7.change().subscribe(function () {\n        return _this7._updateViewportSize();\n      });\n    });\n  }\n\n  _createClass(ViewportRuler, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this._platform.isBrowser) {\n        var _window2 = this._getWindow();\n\n        _window2.removeEventListener('resize', this._changeListener);\n\n        _window2.removeEventListener('orientationchange', this._changeListener);\n      }\n\n      this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n\n  }, {\n    key: \"getViewportSize\",\n    value: function getViewportSize() {\n      if (!this._viewportSize) {\n        this._updateViewportSize();\n      }\n\n      var output = {\n        width: this._viewportSize.width,\n        height: this._viewportSize.height\n      }; // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n\n      if (!this._platform.isBrowser) {\n        this._viewportSize = null;\n      }\n\n      return output;\n    }\n    /** Gets a ClientRect for the viewport's bounds. */\n\n  }, {\n    key: \"getViewportRect\",\n    value: function getViewportRect() {\n      // Use the document element's bounding rect rather than the window scroll properties\n      // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n      // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n      // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n      // can disagree when the page is pinch-zoomed (on devices that support touch).\n      // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n      // We use the documentElement instead of the body because, by default (without a css reset)\n      // browsers typically give the document body an 8px margin, which is not included in\n      // getBoundingClientRect().\n      var scrollPosition = this.getViewportScrollPosition();\n\n      var _this$getViewportSize = this.getViewportSize(),\n          width = _this$getViewportSize.width,\n          height = _this$getViewportSize.height;\n\n      return {\n        top: scrollPosition.top,\n        left: scrollPosition.left,\n        bottom: scrollPosition.top + height,\n        right: scrollPosition.left + width,\n        height: height,\n        width: width\n      };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n\n  }, {\n    key: \"getViewportScrollPosition\",\n    value: function getViewportScrollPosition() {\n      // While we can get a reference to the fake document\n      // during SSR, it doesn't have getBoundingClientRect.\n      if (!this._platform.isBrowser) {\n        return {\n          top: 0,\n          left: 0\n        };\n      } // The top-left-corner of the viewport is determined by the scroll position of the document\n      // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n      // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n      // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n      // `document.documentElement` works consistently, where the `top` and `left` values will\n      // equal negative the scroll position.\n\n\n      var document = this._document;\n\n      var window = this._getWindow();\n\n      var documentElement = document.documentElement;\n      var documentRect = documentElement.getBoundingClientRect();\n      var top = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;\n      var left = -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;\n      return {\n        top: top,\n        left: left\n      };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n\n  }, {\n    key: \"change\",\n    value: function change() {\n      var throttleTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_RESIZE_TIME;\n      return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n\n  }, {\n    key: \"_getWindow\",\n    value: function _getWindow() {\n      return this._document.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n\n  }, {\n    key: \"_updateViewportSize\",\n    value: function _updateViewportSize() {\n      var window = this._getWindow();\n\n      this._viewportSize = this._platform.isBrowser ? {\n        width: window.innerWidth,\n        height: window.innerHeight\n      } : {\n        width: 0,\n        height: 0\n      };\n    }\n  }]);\n\n  return ViewportRuler;\n}();\n\nViewportRuler.ɵfac = function ViewportRuler_Factory(t) {\n  return new (t || ViewportRuler)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT, 8));\n};\n\nViewportRuler.ɵprov = ɵɵdefineInjectable({\n  factory: function ViewportRuler_Factory() {\n    return new ViewportRuler(ɵɵinject(Platform), ɵɵinject(NgZone), ɵɵinject(DOCUMENT, 8));\n  },\n  token: ViewportRuler,\n  providedIn: \"root\"\n});\n\nViewportRuler.ctorParameters = function () {\n  return [{\n    type: Platform\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ViewportRuler, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Checks if the given ranges are equal. */\n\n\nfunction rangesEqual(r1, r2) {\n  return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\n\n\nvar SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\n\nvar CdkVirtualScrollViewport = /*#__PURE__*/function (_CdkScrollable) {\n  _inherits(CdkVirtualScrollViewport, _CdkScrollable);\n\n  var _super = _createSuper(CdkVirtualScrollViewport);\n\n  function CdkVirtualScrollViewport(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler) {\n    var _this8;\n\n    _classCallCheck(this, CdkVirtualScrollViewport);\n\n    _this8 = _super.call(this, elementRef, scrollDispatcher, ngZone, dir);\n    _this8.elementRef = elementRef;\n    _this8._changeDetectorRef = _changeDetectorRef;\n    _this8._scrollStrategy = _scrollStrategy;\n    /** Emits when the viewport is detached from a CdkVirtualForOf. */\n\n    _this8._detachedSubject = new Subject();\n    /** Emits when the rendered range changes. */\n\n    _this8._renderedRangeSubject = new Subject();\n    _this8._orientation = 'vertical'; // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n    // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n    // depending on how the strategy calculates the scrolled index, it may come at a cost to\n    // performance.\n\n    /** Emits when the index of the first element visible in the viewport changes. */\n\n    _this8.scrolledIndexChange = new Observable(function (observer) {\n      return _this8._scrollStrategy.scrolledIndexChange.subscribe(function (index) {\n        return Promise.resolve().then(function () {\n          return _this8.ngZone.run(function () {\n            return observer.next(index);\n          });\n        });\n      });\n    });\n    /** A stream that emits whenever the rendered range changes. */\n\n    _this8.renderedRangeStream = _this8._renderedRangeSubject;\n    /**\n     * The total size of all content (in pixels), including content that is not currently rendered.\n     */\n\n    _this8._totalContentSize = 0;\n    /** A string representing the `style.width` property value to be used for the spacer element. */\n\n    _this8._totalContentWidth = '';\n    /** A string representing the `style.height` property value to be used for the spacer element. */\n\n    _this8._totalContentHeight = '';\n    /** The currently rendered range of indices. */\n\n    _this8._renderedRange = {\n      start: 0,\n      end: 0\n    };\n    /** The length of the data bound to this viewport (in number of items). */\n\n    _this8._dataLength = 0;\n    /** The size of the viewport (in pixels). */\n\n    _this8._viewportSize = 0;\n    /** The last rendered content offset that was set. */\n\n    _this8._renderedContentOffset = 0;\n    /**\n     * Whether the last rendered content offset was to the end of the content (and therefore needs to\n     * be rewritten as an offset to the start of the content).\n     */\n\n    _this8._renderedContentOffsetNeedsRewrite = false;\n    /** Whether there is a pending change detection cycle. */\n\n    _this8._isChangeDetectionPending = false;\n    /** A list of functions to run after the next change detection cycle. */\n\n    _this8._runAfterChangeDetection = [];\n    /** Subscription to changes in the viewport size. */\n\n    _this8._viewportChanges = Subscription.EMPTY;\n\n    if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n    }\n\n    _this8._viewportChanges = viewportRuler.change().subscribe(function () {\n      _this8.checkViewportSize();\n    });\n    return _this8;\n  }\n  /** The direction the viewport scrolls. */\n\n\n  _createClass(CdkVirtualScrollViewport, [{\n    key: \"orientation\",\n    get: function get() {\n      return this._orientation;\n    },\n    set: function set(orientation) {\n      if (this._orientation !== orientation) {\n        this._orientation = orientation;\n\n        this._calculateSpacerSize();\n      }\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this9 = this;\n\n      _get(_getPrototypeOf(CdkVirtualScrollViewport.prototype), \"ngOnInit\", this).call(this); // It's still too early to measure the viewport at this point. Deferring with a promise allows\n      // the Viewport to be rendered with the correct size before we measure. We run this outside the\n      // zone to avoid causing more change detection cycles. We handle the change detection loop\n      // ourselves instead.\n\n\n      this.ngZone.runOutsideAngular(function () {\n        return Promise.resolve().then(function () {\n          _this9._measureViewportSize();\n\n          _this9._scrollStrategy.attach(_this9);\n\n          _this9.elementScrolled().pipe( // Start off with a fake scroll event so we properly detect our initial position.\n          startWith(null), // Collect multiple events into one until the next animation frame. This way if\n          // there are multiple scroll events in the same frame we only need to recheck\n          // our layout once.\n          auditTime(0, SCROLL_SCHEDULER)).subscribe(function () {\n            return _this9._scrollStrategy.onContentScrolled();\n          });\n\n          _this9._markChangeDetectionNeeded();\n        });\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.detach();\n\n      this._scrollStrategy.detach(); // Complete all subjects\n\n\n      this._renderedRangeSubject.complete();\n\n      this._detachedSubject.complete();\n\n      this._viewportChanges.unsubscribe();\n\n      _get(_getPrototypeOf(CdkVirtualScrollViewport.prototype), \"ngOnDestroy\", this).call(this);\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n\n  }, {\n    key: \"attach\",\n    value: function attach(forOf) {\n      var _this10 = this;\n\n      if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('CdkVirtualScrollViewport is already attached.');\n      } // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n      // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n      // change detection loop ourselves.\n\n\n      this.ngZone.runOutsideAngular(function () {\n        _this10._forOf = forOf;\n\n        _this10._forOf.dataStream.pipe(takeUntil(_this10._detachedSubject)).subscribe(function (data) {\n          var newLength = data.length;\n\n          if (newLength !== _this10._dataLength) {\n            _this10._dataLength = newLength;\n\n            _this10._scrollStrategy.onDataLengthChanged();\n          }\n\n          _this10._doChangeDetection();\n        });\n      });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this._forOf = null;\n\n      this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n\n  }, {\n    key: \"getDataLength\",\n    value: function getDataLength() {\n      return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n\n  }, {\n    key: \"getViewportSize\",\n    value: function getViewportSize() {\n      return this._viewportSize;\n    } // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n\n    /** Get the current rendered range of items. */\n\n  }, {\n    key: \"getRenderedRange\",\n    value: function getRenderedRange() {\n      return this._renderedRange;\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n\n  }, {\n    key: \"setTotalContentSize\",\n    value: function setTotalContentSize(size) {\n      if (this._totalContentSize !== size) {\n        this._totalContentSize = size;\n\n        this._calculateSpacerSize();\n\n        this._markChangeDetectionNeeded();\n      }\n    }\n    /** Sets the currently rendered range of indices. */\n\n  }, {\n    key: \"setRenderedRange\",\n    value: function setRenderedRange(range) {\n      var _this11 = this;\n\n      if (!rangesEqual(this._renderedRange, range)) {\n        this._renderedRangeSubject.next(this._renderedRange = range);\n\n        this._markChangeDetectionNeeded(function () {\n          return _this11._scrollStrategy.onContentRendered();\n        });\n      }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n\n  }, {\n    key: \"getOffsetToRenderedContentStart\",\n    value: function getOffsetToRenderedContentStart() {\n      return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n\n  }, {\n    key: \"setRenderedContentOffset\",\n    value: function setRenderedContentOffset(offset) {\n      var _this12 = this;\n\n      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'to-start';\n      // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n      // in the negative direction.\n      var isRtl = this.dir && this.dir.value == 'rtl';\n      var isHorizontal = this.orientation == 'horizontal';\n      var axis = isHorizontal ? 'X' : 'Y';\n      var axisDirection = isHorizontal && isRtl ? -1 : 1;\n      var transform = \"translate\".concat(axis, \"(\").concat(Number(axisDirection * offset), \"px)\");\n      this._renderedContentOffset = offset;\n\n      if (to === 'to-end') {\n        transform += \" translate\".concat(axis, \"(-100%)\"); // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n        // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n        // expand upward).\n\n        this._renderedContentOffsetNeedsRewrite = true;\n      }\n\n      if (this._renderedContentTransform != transform) {\n        // We know this value is safe because we parse `offset` with `Number()` before passing it\n        // into the string.\n        this._renderedContentTransform = transform;\n\n        this._markChangeDetectionNeeded(function () {\n          if (_this12._renderedContentOffsetNeedsRewrite) {\n            _this12._renderedContentOffset -= _this12.measureRenderedContentSize();\n            _this12._renderedContentOffsetNeedsRewrite = false;\n\n            _this12.setRenderedContentOffset(_this12._renderedContentOffset);\n          } else {\n            _this12._scrollStrategy.onRenderedOffsetChanged();\n          }\n        });\n      }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n\n  }, {\n    key: \"scrollToOffset\",\n    value: function scrollToOffset(offset) {\n      var behavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'auto';\n      var options = {\n        behavior: behavior\n      };\n\n      if (this.orientation === 'horizontal') {\n        options.start = offset;\n      } else {\n        options.top = offset;\n      }\n\n      this.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n\n  }, {\n    key: \"scrollToIndex\",\n    value: function scrollToIndex(index) {\n      var behavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'auto';\n\n      this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n\n  }, {\n    key: \"measureScrollOffset\",\n    value: function measureScrollOffset(from) {\n      return from ? _get(_getPrototypeOf(CdkVirtualScrollViewport.prototype), \"measureScrollOffset\", this).call(this, from) : _get(_getPrototypeOf(CdkVirtualScrollViewport.prototype), \"measureScrollOffset\", this).call(this, this.orientation === 'horizontal' ? 'start' : 'top');\n    }\n    /** Measure the combined size of all of the rendered items. */\n\n  }, {\n    key: \"measureRenderedContentSize\",\n    value: function measureRenderedContentSize() {\n      var contentEl = this._contentWrapper.nativeElement;\n      return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n\n  }, {\n    key: \"measureRangeSize\",\n    value: function measureRangeSize(range) {\n      if (!this._forOf) {\n        return 0;\n      }\n\n      return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n\n  }, {\n    key: \"checkViewportSize\",\n    value: function checkViewportSize() {\n      // TODO: Cleanup later when add logic for handling content resize\n      this._measureViewportSize();\n\n      this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n\n  }, {\n    key: \"_measureViewportSize\",\n    value: function _measureViewportSize() {\n      var viewportEl = this.elementRef.nativeElement;\n      this._viewportSize = this.orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    /** Queue up change detection to run. */\n\n  }, {\n    key: \"_markChangeDetectionNeeded\",\n    value: function _markChangeDetectionNeeded(runAfter) {\n      var _this13 = this;\n\n      if (runAfter) {\n        this._runAfterChangeDetection.push(runAfter);\n      } // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n      // properties sequentially we only have to run `_doChangeDetection` once at the end.\n\n\n      if (!this._isChangeDetectionPending) {\n        this._isChangeDetectionPending = true;\n        this.ngZone.runOutsideAngular(function () {\n          return Promise.resolve().then(function () {\n            _this13._doChangeDetection();\n          });\n        });\n      }\n    }\n    /** Run change detection. */\n\n  }, {\n    key: \"_doChangeDetection\",\n    value: function _doChangeDetection() {\n      var _this14 = this;\n\n      this._isChangeDetectionPending = false; // Apply the content transform. The transform can't be set via an Angular binding because\n      // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n      // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n      // the `Number` function first to coerce it to a numeric value.\n\n      this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform; // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n      // from the root, since the repeated items are content projected in. Calling `detectChanges`\n      // instead does not properly check the projected content.\n\n      this.ngZone.run(function () {\n        return _this14._changeDetectorRef.markForCheck();\n      });\n      var runAfterChangeDetection = this._runAfterChangeDetection;\n      this._runAfterChangeDetection = [];\n\n      var _iterator = _createForOfIteratorHelper(runAfterChangeDetection),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var fn = _step.value;\n          fn();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n\n  }, {\n    key: \"_calculateSpacerSize\",\n    value: function _calculateSpacerSize() {\n      this._totalContentHeight = this.orientation === 'horizontal' ? '' : \"\".concat(this._totalContentSize, \"px\");\n      this._totalContentWidth = this.orientation === 'horizontal' ? \"\".concat(this._totalContentSize, \"px\") : '';\n    }\n  }]);\n\n  return CdkVirtualScrollViewport;\n}(CdkScrollable);\n\nCdkVirtualScrollViewport.ɵfac = function CdkVirtualScrollViewport_Factory(t) {\n  return new (t || CdkVirtualScrollViewport)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(VIRTUAL_SCROLL_STRATEGY, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ViewportRuler));\n};\n\nCdkVirtualScrollViewport.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: CdkVirtualScrollViewport,\n  selectors: [[\"cdk-virtual-scroll-viewport\"]],\n  viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 3);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentWrapper = _t.first);\n    }\n  },\n  hostAttrs: [1, \"cdk-virtual-scroll-viewport\"],\n  hostVars: 4,\n  hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"cdk-virtual-scroll-orientation-horizontal\", ctx.orientation === \"horizontal\")(\"cdk-virtual-scroll-orientation-vertical\", ctx.orientation !== \"horizontal\");\n    }\n  },\n  inputs: {\n    orientation: \"orientation\"\n  },\n  outputs: {\n    scrolledIndexChange: \"scrolledIndexChange\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkScrollable,\n    useExisting: CdkVirtualScrollViewport\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 4,\n  vars: 4,\n  consts: [[1, \"cdk-virtual-scroll-content-wrapper\"], [\"contentWrapper\", \"\"], [1, \"cdk-virtual-scroll-spacer\"]],\n  template: function CdkVirtualScrollViewport_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n      ɵngcc0.ɵɵprojection(2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(3, \"div\", 2);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx._totalContentWidth)(\"height\", ctx._totalContentHeight);\n    }\n  },\n  styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nCdkVirtualScrollViewport.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [VIRTUAL_SCROLL_STRATEGY]\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ScrollDispatcher\n  }, {\n    type: ViewportRuler\n  }];\n};\n\nCdkVirtualScrollViewport.propDecorators = {\n  orientation: [{\n    type: Input\n  }],\n  scrolledIndexChange: [{\n    type: Output\n  }],\n  _contentWrapper: [{\n    type: ViewChild,\n    args: ['contentWrapper', {\n      static: true\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkVirtualScrollViewport, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-virtual-scroll-viewport',\n      template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\",\n      host: {\n        'class': 'cdk-virtual-scroll-viewport',\n        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [{\n        provide: CdkScrollable,\n        useExisting: CdkVirtualScrollViewport\n      }],\n      styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [VIRTUAL_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ScrollDispatcher\n    }, {\n      type: ViewportRuler\n    }];\n  }, {\n    scrolledIndexChange: [{\n      type: Output\n    }],\n    orientation: [{\n      type: Input\n    }],\n    _contentWrapper: [{\n      type: ViewChild,\n      args: ['contentWrapper', {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Helper to extract the offset of a DOM Node in a certain direction. */\n\n\nfunction getOffset(orientation, direction, node) {\n  var el = node;\n\n  if (!el.getBoundingClientRect) {\n    return 0;\n  }\n\n  var rect = el.getBoundingClientRect();\n\n  if (orientation === 'horizontal') {\n    return direction === 'start' ? rect.left : rect.right;\n  }\n\n  return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\n\n\nvar CdkVirtualForOf = /*#__PURE__*/function () {\n  function CdkVirtualForOf(\n  /** The view container to add items to. */\n  _viewContainerRef,\n  /** The template to use when stamping out new items. */\n  _template,\n  /** The set of available differs. */\n  _differs,\n  /** The strategy used to render items in the virtual scroll viewport. */\n  _viewRepeater,\n  /** The virtual scrolling viewport that these items are being rendered in. */\n  _viewport, ngZone) {\n    var _this15 = this;\n\n    _classCallCheck(this, CdkVirtualForOf);\n\n    this._viewContainerRef = _viewContainerRef;\n    this._template = _template;\n    this._differs = _differs;\n    this._viewRepeater = _viewRepeater;\n    this._viewport = _viewport;\n    /** Emits when the rendered view of the data changes. */\n\n    this.viewChange = new Subject();\n    /** Subject that emits when a new DataSource instance is given. */\n\n    this._dataSourceChanges = new Subject();\n    /** Emits whenever the data in the current DataSource changes. */\n\n    this.dataStream = this._dataSourceChanges.pipe( // Start off with null `DataSource`.\n    startWith(null), // Bundle up the previous and current data sources so we can work with both.\n    pairwise(), // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n    // new one, passing back a stream of data changes which we run through `switchMap` to give\n    // us a data stream that emits the latest data from whatever the current `DataSource` is.\n    switchMap(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          prev = _ref2[0],\n          cur = _ref2[1];\n\n      return _this15._changeDataSource(prev, cur);\n    }), // Replay the last emitted data when someone subscribes.\n    shareReplay(1));\n    /** The differ used to calculate changes to the data. */\n\n    this._differ = null;\n    /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n\n    this._needsUpdate = false;\n    this._destroyed = new Subject();\n    this.dataStream.subscribe(function (data) {\n      _this15._data = data;\n\n      _this15._onRenderedDataChange();\n    });\n\n    this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(function (range) {\n      _this15._renderedRange = range;\n      ngZone.run(function () {\n        return _this15.viewChange.next(_this15._renderedRange);\n      });\n\n      _this15._onRenderedDataChange();\n    });\n\n    this._viewport.attach(this);\n  }\n  /** The DataSource to display. */\n\n\n  _createClass(CdkVirtualForOf, [{\n    key: \"cdkVirtualForOf\",\n    get: function get() {\n      return this._cdkVirtualForOf;\n    },\n    set: function set(value) {\n      this._cdkVirtualForOf = value;\n\n      if (isDataSource(value)) {\n        this._dataSourceChanges.next(value);\n      } else {\n        // If value is an an NgIterable, convert it to an array.\n        this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n      }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n\n  }, {\n    key: \"cdkVirtualForTrackBy\",\n    get: function get() {\n      return this._cdkVirtualForTrackBy;\n    },\n    set: function set(fn) {\n      var _this16 = this;\n\n      this._needsUpdate = true;\n      this._cdkVirtualForTrackBy = fn ? function (index, item) {\n        return fn(index + (_this16._renderedRange ? _this16._renderedRange.start : 0), item);\n      } : undefined;\n    }\n    /** The template used to stamp out new elements. */\n\n  }, {\n    key: \"cdkVirtualForTemplate\",\n    set: function set(value) {\n      if (value) {\n        this._needsUpdate = true;\n        this._template = value;\n      }\n    }\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n\n  }, {\n    key: \"cdkVirtualForTemplateCacheSize\",\n    get: function get() {\n      return this._viewRepeater.viewCacheSize;\n    },\n    set: function set(size) {\n      this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n\n  }, {\n    key: \"measureRangeSize\",\n    value: function measureRangeSize(range, orientation) {\n      if (range.start >= range.end) {\n        return 0;\n      }\n\n      if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error(\"Error: attempted to measure an item that isn't rendered.\");\n      } // The index into the list of rendered views for the first item in the range.\n\n\n      var renderedStartIndex = range.start - this._renderedRange.start; // The length of the range we're measuring.\n\n      var rangeLen = range.end - range.start; // Loop over all the views, find the first and land node and compute the size by subtracting\n      // the top of the first node from the bottom of the last one.\n\n      var firstNode;\n      var lastNode; // Find the first node by starting from the beginning and going forwards.\n\n      for (var i = 0; i < rangeLen; i++) {\n        var view = this._viewContainerRef.get(i + renderedStartIndex);\n\n        if (view && view.rootNodes.length) {\n          firstNode = lastNode = view.rootNodes[0];\n          break;\n        }\n      } // Find the last node by starting from the end and going backwards.\n\n\n      for (var _i = rangeLen - 1; _i > -1; _i--) {\n        var _view = this._viewContainerRef.get(_i + renderedStartIndex);\n\n        if (_view && _view.rootNodes.length) {\n          lastNode = _view.rootNodes[_view.rootNodes.length - 1];\n          break;\n        }\n      }\n\n      return firstNode && lastNode ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode) : 0;\n    }\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (this._differ && this._needsUpdate) {\n        // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n        // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n        // changing (need to do this diff).\n        var changes = this._differ.diff(this._renderedItems);\n\n        if (!changes) {\n          this._updateContext();\n        } else {\n          this._applyChanges(changes);\n        }\n\n        this._needsUpdate = false;\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._viewport.detach();\n\n      this._dataSourceChanges.next(undefined);\n\n      this._dataSourceChanges.complete();\n\n      this.viewChange.complete();\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      this._viewRepeater.detach();\n    }\n    /** React to scroll state changes in the viewport. */\n\n  }, {\n    key: \"_onRenderedDataChange\",\n    value: function _onRenderedDataChange() {\n      var _this17 = this;\n\n      if (!this._renderedRange) {\n        return;\n      }\n\n      this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n\n      if (!this._differ) {\n        // Use a wrapper function for the `trackBy` so any new values are\n        // picked up automatically without having to recreate the differ.\n        this._differ = this._differs.find(this._renderedItems).create(function (index, item) {\n          return _this17.cdkVirtualForTrackBy ? _this17.cdkVirtualForTrackBy(index, item) : item;\n        });\n      }\n\n      this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n\n  }, {\n    key: \"_changeDataSource\",\n    value: function _changeDataSource(oldDs, newDs) {\n      if (oldDs) {\n        oldDs.disconnect(this);\n      }\n\n      this._needsUpdate = true;\n      return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n\n  }, {\n    key: \"_updateContext\",\n    value: function _updateContext() {\n      var count = this._data.length;\n      var i = this._viewContainerRef.length;\n\n      while (i--) {\n        var view = this._viewContainerRef.get(i);\n\n        view.context.index = this._renderedRange.start + i;\n        view.context.count = count;\n\n        this._updateComputedContextProperties(view.context);\n\n        view.detectChanges();\n      }\n    }\n    /** Apply changes to the DOM. */\n\n  }, {\n    key: \"_applyChanges\",\n    value: function _applyChanges(changes) {\n      var _this18 = this;\n\n      this._viewRepeater.applyChanges(changes, this._viewContainerRef, function (record, _adjustedPreviousIndex, currentIndex) {\n        return _this18._getEmbeddedViewArgs(record, currentIndex);\n      }, function (record) {\n        return record.item;\n      }); // Update $implicit for any items that had an identity change.\n\n\n      changes.forEachIdentityChange(function (record) {\n        var view = _this18._viewContainerRef.get(record.currentIndex);\n\n        view.context.$implicit = record.item;\n      }); // Update the context variables on all items.\n\n      var count = this._data.length;\n      var i = this._viewContainerRef.length;\n\n      while (i--) {\n        var view = this._viewContainerRef.get(i);\n\n        view.context.index = this._renderedRange.start + i;\n        view.context.count = count;\n\n        this._updateComputedContextProperties(view.context);\n      }\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n\n  }, {\n    key: \"_updateComputedContextProperties\",\n    value: function _updateComputedContextProperties(context) {\n      context.first = context.index === 0;\n      context.last = context.index === context.count - 1;\n      context.even = context.index % 2 === 0;\n      context.odd = !context.even;\n    }\n  }, {\n    key: \"_getEmbeddedViewArgs\",\n    value: function _getEmbeddedViewArgs(record, index) {\n      // Note that it's important that we insert the item directly at the proper index,\n      // rather than inserting it and the moving it in place, because if there's a directive\n      // on the same node that injects the `ViewContainerRef`, Angular will insert another\n      // comment node which can throw off the move when it's being repeated for all items.\n      return {\n        templateRef: this._template,\n        context: {\n          $implicit: record.item,\n          // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n          // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n          cdkVirtualForOf: this._cdkVirtualForOf,\n          index: -1,\n          count: -1,\n          first: false,\n          last: false,\n          odd: false,\n          even: false\n        },\n        index: index\n      };\n    }\n  }]);\n\n  return CdkVirtualForOf;\n}();\n\nCdkVirtualForOf.ɵfac = function CdkVirtualForOf_Factory(t) {\n  return new (t || CdkVirtualForOf)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(_VIEW_REPEATER_STRATEGY), ɵngcc0.ɵɵdirectiveInject(CdkVirtualScrollViewport, 4), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nCdkVirtualForOf.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkVirtualForOf,\n  selectors: [[\"\", \"cdkVirtualFor\", \"\", \"cdkVirtualForOf\", \"\"]],\n  inputs: {\n    cdkVirtualForOf: \"cdkVirtualForOf\",\n    cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\",\n    cdkVirtualForTemplate: \"cdkVirtualForTemplate\",\n    cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: _VIEW_REPEATER_STRATEGY,\n    useClass: _RecycleViewRepeaterStrategy\n  }])]\n});\n\nCdkVirtualForOf.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }, {\n    type: TemplateRef\n  }, {\n    type: IterableDiffers\n  }, {\n    type: _RecycleViewRepeaterStrategy,\n    decorators: [{\n      type: Inject,\n      args: [_VIEW_REPEATER_STRATEGY]\n    }]\n  }, {\n    type: CdkVirtualScrollViewport,\n    decorators: [{\n      type: SkipSelf\n    }]\n  }, {\n    type: NgZone\n  }];\n};\n\nCdkVirtualForOf.propDecorators = {\n  cdkVirtualForOf: [{\n    type: Input\n  }],\n  cdkVirtualForTrackBy: [{\n    type: Input\n  }],\n  cdkVirtualForTemplate: [{\n    type: Input\n  }],\n  cdkVirtualForTemplateCacheSize: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkVirtualForOf, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkVirtualFor][cdkVirtualForOf]',\n      providers: [{\n        provide: _VIEW_REPEATER_STRATEGY,\n        useClass: _RecycleViewRepeaterStrategy\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: ɵngcc3._RecycleViewRepeaterStrategy,\n      decorators: [{\n        type: Inject,\n        args: [_VIEW_REPEATER_STRATEGY]\n      }]\n    }, {\n      type: CdkVirtualScrollViewport,\n      decorators: [{\n        type: SkipSelf\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    cdkVirtualForOf: [{\n      type: Input\n    }],\n    cdkVirtualForTrackBy: [{\n      type: Input\n    }],\n    cdkVirtualForTemplate: [{\n      type: Input\n    }],\n    cdkVirtualForTemplateCacheSize: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar CdkScrollableModule = function CdkScrollableModule() {\n  _classCallCheck(this, CdkScrollableModule);\n};\n\nCdkScrollableModule.ɵfac = function CdkScrollableModule_Factory(t) {\n  return new (t || CdkScrollableModule)();\n};\n\nCdkScrollableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: CdkScrollableModule\n});\nCdkScrollableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkScrollableModule, {\n    declarations: [CdkScrollable],\n    exports: [CdkScrollable]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkScrollableModule, [{\n    type: NgModule,\n    args: [{\n      exports: [CdkScrollable],\n      declarations: [CdkScrollable]\n    }]\n  }], null, null);\n})();\n/**\n * @docs-primary-export\n */\n\n\nvar ScrollingModule = function ScrollingModule() {\n  _classCallCheck(this, ScrollingModule);\n};\n\nScrollingModule.ɵfac = function ScrollingModule_Factory(t) {\n  return new (t || ScrollingModule)();\n};\n\nScrollingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ScrollingModule\n});\nScrollingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  imports: [[BidiModule, PlatformModule, CdkScrollableModule], BidiModule, CdkScrollableModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollingModule, {\n    declarations: function declarations() {\n      return [CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport];\n    },\n    imports: function imports() {\n      return [BidiModule, PlatformModule, CdkScrollableModule];\n    },\n    exports: function exports() {\n      return [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollingModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, PlatformModule, CdkScrollableModule],\n      exports: [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport],\n      declarations: [CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory }; //# sourceMappingURL=scrolling.js.map","map":{"version":3,"sources":["/Users/mohammedelmourabit/xrp/xpr/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/scrolling.js"],"names":["coerceNumberProperty","coerceElement","InjectionToken","Directive","forwardRef","Input","ɵɵdefineInjectable","ɵɵinject","NgZone","Injectable","Optional","Inject","ElementRef","Component","ViewEncapsulation","ChangeDetectionStrategy","ChangeDetectorRef","Output","ViewChild","ViewContainerRef","TemplateRef","IterableDiffers","SkipSelf","NgModule","Subject","of","Observable","fromEvent","animationFrameScheduler","asapScheduler","Subscription","isObservable","distinctUntilChanged","auditTime","filter","takeUntil","startWith","pairwise","switchMap","shareReplay","Platform","getRtlScrollAxisType","supportsScrollBehavior","PlatformModule","DOCUMENT","Directionality","BidiModule","isDataSource","ArrayDataSource","_VIEW_REPEATER_STRATEGY","_RecycleViewRepeaterStrategy","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","_c0","_c1","VIRTUAL_SCROLL_STRATEGY","FixedSizeVirtualScrollStrategy","itemSize","minBufferPx","maxBufferPx","_scrolledIndexChange","scrolledIndexChange","pipe","_viewport","_itemSize","_minBufferPx","_maxBufferPx","viewport","_updateTotalContentSize","_updateRenderedRange","complete","ngDevMode","Error","index","behavior","scrollToOffset","setTotalContentSize","getDataLength","renderedRange","getRenderedRange","newRange","start","end","viewportSize","getViewportSize","dataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","maxVisibleItems","Math","ceil","newVisibleIndex","max","min","floor","startBuffer","expandStart","endBuffer","expandEnd","setRenderedRange","setRenderedContentOffset","next","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","CdkFixedSizeVirtualScroll","value","updateItemAndBufferSize","ɵfac","CdkFixedSizeVirtualScroll_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","inputs","features","ɵɵProvidersFeature","provide","useFactory","deps","ɵɵNgOnChangesFeature","propDecorators","ɵsetClassMetadata","args","selector","providers","DEFAULT_SCROLL_TIME","ScrollDispatcher","_ngZone","_platform","document","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","Map","_document","scrollable","has","set","elementScrolled","subscribe","scrollableReference","get","unsubscribe","delete","auditTimeInMs","isBrowser","observer","_addGlobalListener","subscription","_removeGlobalListener","forEach","_","container","deregister","elementOrElementRef","ancestors","getAncestorScrollContainers","scrolled","target","indexOf","scrollingContainers","_subscription","_scrollableContainsElement","push","defaultView","window","element","scrollableElement","getElementRef","nativeElement","parentElement","runOutsideAngular","_getWindow","ScrollDispatcher_Factory","ɵprov","factory","token","providedIn","ctorParameters","undefined","decorators","CdkScrollable","elementRef","scrollDispatcher","ngZone","dir","_destroyed","_elementScrolled","register","options","el","isRtl","left","right","bottom","top","scrollHeight","clientHeight","scrollWidth","clientWidth","_applyScrollToOptions","scrollTo","scrollTop","scrollLeft","from","LEFT","RIGHT","CdkScrollable_Factory","ɵɵdirectiveInject","DEFAULT_RESIZE_TIME","ViewportRuler","_change","_changeListener","event","addEventListener","change","_updateViewportSize","removeEventListener","_viewportSize","output","width","height","scrollPosition","getViewportScrollPosition","documentElement","documentRect","getBoundingClientRect","body","scrollY","scrollX","throttleTime","innerWidth","innerHeight","ViewportRuler_Factory","rangesEqual","r1","r2","SCROLL_SCHEDULER","requestAnimationFrame","CdkVirtualScrollViewport","_changeDetectorRef","viewportRuler","_detachedSubject","_renderedRangeSubject","_orientation","Promise","resolve","then","run","renderedRangeStream","_totalContentSize","_totalContentWidth","_totalContentHeight","_renderedRange","_dataLength","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","_viewportChanges","EMPTY","checkViewportSize","orientation","_calculateSpacerSize","_measureViewportSize","attach","onContentScrolled","_markChangeDetectionNeeded","detach","forOf","_forOf","dataStream","data","newLength","length","onDataLengthChanged","_doChangeDetection","size","range","onContentRendered","offset","to","isHorizontal","axis","axisDirection","transform","Number","_renderedContentTransform","measureRenderedContentSize","onRenderedOffsetChanged","scrollToIndex","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","viewportEl","runAfter","style","markForCheck","runAfterChangeDetection","fn","CdkVirtualScrollViewport_Factory","ɵcmp","ɵɵdefineComponent","viewQuery","CdkVirtualScrollViewport_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostAttrs","hostVars","hostBindings","CdkVirtualScrollViewport_HostBindings","ɵɵclassProp","outputs","useExisting","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","consts","template","CdkVirtualScrollViewport_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵstyleProp","styles","encapsulation","changeDetection","static","host","None","OnPush","getOffset","direction","node","rect","CdkVirtualForOf","_viewContainerRef","_template","_differs","_viewRepeater","viewChange","_dataSourceChanges","prev","cur","_changeDataSource","_differ","_needsUpdate","_data","_onRenderedDataChange","_cdkVirtualForOf","Array","_cdkVirtualForTrackBy","item","viewCacheSize","renderedStartIndex","rangeLen","firstNode","lastNode","i","view","rootNodes","changes","diff","_renderedItems","_updateContext","_applyChanges","slice","find","create","cdkVirtualForTrackBy","oldDs","newDs","disconnect","connect","count","context","_updateComputedContextProperties","detectChanges","applyChanges","record","_adjustedPreviousIndex","currentIndex","_getEmbeddedViewArgs","forEachIdentityChange","$implicit","last","even","odd","templateRef","cdkVirtualForOf","CdkVirtualForOf_Factory","cdkVirtualForTemplate","cdkVirtualForTemplateCacheSize","useClass","CdkScrollableModule","CdkScrollableModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","ngJitMode","ɵɵsetNgModuleScope","declarations","exports","ScrollingModule","ScrollingModule_Factory","imports"],"mappings":"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","sourcesContent":["import { coerceNumberProperty, coerceElement } from '@angular/cdk/coercion';\nimport { InjectionToken, Directive, forwardRef, Input, ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, Optional, Inject, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, Output, ViewChild, ViewContainerRef, TemplateRef, IterableDiffers, SkipSelf, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport { Platform, getRtlScrollAxisType, supportsScrollBehavior, PlatformModule } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { isDataSource, ArrayDataSource, _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the virtual scrolling strategy. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/cdk/collections';\n\nconst _c0 = [\"contentWrapper\"];\nconst _c1 = [\"*\"];\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /** The attached viewport. */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered() { }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged() { }\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /** Update the viewport's total content size. */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        const renderedRange = this._viewport.getRenderedRange();\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        const viewportSize = this._viewport.getViewportSize();\n        const dataLength = this._viewport.getDataLength();\n        let scrollOffset = this._viewport.measureScrollOffset();\n        // Prevent NaN as result when dividing by zero.\n        let firstVisibleIndex = (this._itemSize > 0) ? scrollOffset / this._itemSize : 0;\n        // If user scrolls to the bottom of the list and data changes to a smaller list\n        if (newRange.end > dataLength) {\n            // We have to recalculate the first visible index based on new data length and viewport size.\n            const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n            const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));\n            // If first visible index changed we must update scroll offset to handle start/end buffers\n            // Current range must also be adjusted to cover the new position (bottom of new list).\n            if (firstVisibleIndex != newVisibleIndex) {\n                firstVisibleIndex = newVisibleIndex;\n                scrollOffset = newVisibleIndex * this._itemSize;\n                newRange.start = Math.floor(firstVisibleIndex);\n            }\n            newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n        }\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /** The scroll strategy used by this directive. */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /** The size of the items in the list (in pixels). */\n    get itemSize() { return this._itemSize; }\n    set itemSize(value) { this._itemSize = coerceNumberProperty(value); }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    get minBufferPx() { return this._minBufferPx; }\n    set minBufferPx(value) { this._minBufferPx = coerceNumberProperty(value); }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    get maxBufferPx() { return this._maxBufferPx; }\n    set maxBufferPx(value) { this._maxBufferPx = coerceNumberProperty(value); }\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n}\nCdkFixedSizeVirtualScroll.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) { return new (t || CdkFixedSizeVirtualScroll)(); };\nCdkFixedSizeVirtualScroll.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkFixedSizeVirtualScroll, selectors: [[\"cdk-virtual-scroll-viewport\", \"itemSize\", \"\"]], inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: VIRTUAL_SCROLL_STRATEGY,\n                useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n            }]), ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkFixedSizeVirtualScroll.propDecorators = {\n    itemSize: [{ type: Input }],\n    minBufferPx: [{ type: Input }],\n    maxBufferPx: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFixedSizeVirtualScroll, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                providers: [{\n                        provide: VIRTUAL_SCROLL_STRATEGY,\n                        useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                        deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n                    }]\n            }]\n    }], function () { return []; }, { itemSize: [{\n            type: Input\n        }], minBufferPx: [{\n            type: Input\n        }], maxBufferPx: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time in ms to throttle the scrolling events by default. */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    constructor(_ngZone, _platform, document) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n        this._scrolled = new Subject();\n        /** Keeps track of the global `scroll` and `resize` subscriptions. */\n        this._globalSubscription = null;\n        /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n        this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n                .subscribe(() => this._scrolled.next(scrollable)));\n        }\n    }\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable) {\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const subscription = auditTimeInMs > 0 ?\n                this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n                this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            };\n        });\n    }\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementOrElementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n        const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(target => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementOrElementRef) {\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n    _scrollableContainsElement(scrollable, elementOrElementRef) {\n        let element = coerceElement(elementOrElementRef);\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while (element = element.parentElement);\n        return false;\n    }\n    /** Sets up the global scroll listeners. */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n            const window = this._getWindow();\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n    /** Cleans up the global scroll listener. */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\nScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) { return new (t || ScrollDispatcher)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT, 8)); };\nScrollDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function ScrollDispatcher_Factory() { return new ScrollDispatcher(ɵɵinject(NgZone), ɵɵinject(Platform), ɵɵinject(DOCUMENT, 8)); }, token: ScrollDispatcher, providedIn: \"root\" });\nScrollDispatcher.ctorParameters = () => [\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed))\n            .subscribe(observer)));\n    }\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options) {\n        const el = this.elementRef.nativeElement;\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        if (options.left == null) {\n            options.left = isRtl ? options.end : options.start;\n        }\n        if (options.right == null) {\n            options.right = isRtl ? options.start : options.end;\n        }\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            options.top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != 0 /* NORMAL */) {\n            if (options.left != null) {\n                options.right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == 2 /* INVERTED */) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == 1 /* NEGATED */) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                options.left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    _applyScrollToOptions(options) {\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from) {\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == 2 /* INVERTED */) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == 1 /* NEGATED */) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n}\nCdkScrollable.ɵfac = function CdkScrollable_Factory(t) { return new (t || CdkScrollable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8)); };\nCdkScrollable.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkScrollable, selectors: [[\"\", \"cdk-scrollable\", \"\"], [\"\", \"cdkScrollable\", \"\"]] });\nCdkScrollable.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkScrollable, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-scrollable], [cdkScrollable]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ScrollDispatcher }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time in ms to throttle the resize events by default. */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\nclass ViewportRuler {\n    constructor(_platform, ngZone, document) {\n        this._platform = _platform;\n        /** Stream of viewport change events. */\n        this._change = new Subject();\n        /** Event listener that will be used to handle the viewport change events. */\n        this._changeListener = (event) => {\n            this._change.next(event);\n        };\n        this._document = document;\n        ngZone.runOutsideAngular(() => {\n            if (_platform.isBrowser) {\n                const window = this._getWindow();\n                // Note that bind the events ourselves, rather than going through something like RxJS's\n                // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n                window.addEventListener('resize', this._changeListener);\n                window.addEventListener('orientationchange', this._changeListener);\n            }\n            // We don't need to keep track of the subscription,\n            // because we complete the `change` stream on destroy.\n            this.change().subscribe(() => this._updateViewportSize());\n        });\n    }\n    ngOnDestroy() {\n        if (this._platform.isBrowser) {\n            const window = this._getWindow();\n            window.removeEventListener('resize', this._changeListener);\n            window.removeEventListener('orientationchange', this._changeListener);\n        }\n        this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = null;\n        }\n        return output;\n    }\n    /** Gets a ClientRect for the viewport's bounds. */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const document = this._document;\n        const window = this._getWindow();\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n        const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n            documentElement.scrollTop || 0;\n        const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n            documentElement.scrollLeft || 0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n    _updateViewportSize() {\n        const window = this._getWindow();\n        this._viewportSize = this._platform.isBrowser ?\n            { width: window.innerWidth, height: window.innerHeight } :\n            { width: 0, height: 0 };\n    }\n}\nViewportRuler.ɵfac = function ViewportRuler_Factory(t) { return new (t || ViewportRuler)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT, 8)); };\nViewportRuler.ɵprov = ɵɵdefineInjectable({ factory: function ViewportRuler_Factory() { return new ViewportRuler(ɵɵinject(Platform), ɵɵinject(NgZone), ɵɵinject(DOCUMENT, 8)); }, token: ViewportRuler, providedIn: \"root\" });\nViewportRuler.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ViewportRuler, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\nclass CdkVirtualScrollViewport extends CdkScrollable {\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        /** Emits when the viewport is detached from a CdkVirtualForOf. */\n        this._detachedSubject = new Subject();\n        /** Emits when the rendered range changes. */\n        this._renderedRangeSubject = new Subject();\n        this._orientation = 'vertical';\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /** Emits when the index of the first element visible in the viewport changes. */\n        this.scrolledIndexChange = new Observable((observer) => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n        /** A stream that emits whenever the rendered range changes. */\n        this.renderedRangeStream = this._renderedRangeSubject;\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /** A string representing the `style.width` property value to be used for the spacer element. */\n        this._totalContentWidth = '';\n        /** A string representing the `style.height` property value to be used for the spacer element. */\n        this._totalContentHeight = '';\n        /** The currently rendered range of indices. */\n        this._renderedRange = { start: 0, end: 0 };\n        /** The length of the data bound to this viewport (in number of items). */\n        this._dataLength = 0;\n        /** The size of the viewport (in pixels). */\n        this._viewportSize = 0;\n        /** The last rendered content offset that was set. */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /** Whether there is a pending change detection cycle. */\n        this._isChangeDetectionPending = false;\n        /** A list of functions to run after the next change detection cycle. */\n        this._runAfterChangeDetection = [];\n        /** Subscription to changes in the viewport size. */\n        this._viewportChanges = Subscription.EMPTY;\n        if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n        this._viewportChanges = viewportRuler.change().subscribe(() => {\n            this.checkViewportSize();\n        });\n    }\n    /** The direction the viewport scrolls. */\n    get orientation() {\n        return this._orientation;\n    }\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(null), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n            this._markChangeDetectionNeeded();\n        }));\n    }\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        this._viewportChanges.unsubscribe();\n        super.ngOnDestroy();\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n    attach(forOf) {\n        if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /** Get the current rendered range of items. */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /** Sets the currently rendered range of indices. */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            this._renderedRangeSubject.next(this._renderedRange = range);\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        const isHorizontal = this.orientation == 'horizontal';\n        const axis = isHorizontal ? 'X' : 'Y';\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    measureScrollOffset(from) {\n        return from ?\n            super.measureScrollOffset(from) :\n            super.measureScrollOffset(this.orientation === 'horizontal' ? 'start' : 'top');\n    }\n    /** Measure the combined size of all of the rendered items. */\n    measureRenderedContentSize() {\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n    _measureViewportSize() {\n        const viewportEl = this.elementRef.nativeElement;\n        this._viewportSize = this.orientation === 'horizontal' ?\n            viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    /** Queue up change detection to run. */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n    /** Run change detection. */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n}\nCdkVirtualScrollViewport.ɵfac = function CdkVirtualScrollViewport_Factory(t) { return new (t || CdkVirtualScrollViewport)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(VIRTUAL_SCROLL_STRATEGY, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ViewportRuler)); };\nCdkVirtualScrollViewport.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkVirtualScrollViewport, selectors: [[\"cdk-virtual-scroll-viewport\"]], viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 3);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentWrapper = _t.first);\n    } }, hostAttrs: [1, \"cdk-virtual-scroll-viewport\"], hostVars: 4, hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-virtual-scroll-orientation-horizontal\", ctx.orientation === \"horizontal\")(\"cdk-virtual-scroll-orientation-vertical\", ctx.orientation !== \"horizontal\");\n    } }, inputs: { orientation: \"orientation\" }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkScrollable,\n                useExisting: CdkVirtualScrollViewport\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 4, vars: 4, consts: [[1, \"cdk-virtual-scroll-content-wrapper\"], [\"contentWrapper\", \"\"], [1, \"cdk-virtual-scroll-spacer\"]], template: function CdkVirtualScrollViewport_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(3, \"div\", 2);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx._totalContentWidth)(\"height\", ctx._totalContentHeight);\n    } }, styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"], encapsulation: 2, changeDetection: 0 });\nCdkVirtualScrollViewport.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [VIRTUAL_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ScrollDispatcher },\n    { type: ViewportRuler }\n];\nCdkVirtualScrollViewport.propDecorators = {\n    orientation: [{ type: Input }],\n    scrolledIndexChange: [{ type: Output }],\n    _contentWrapper: [{ type: ViewChild, args: ['contentWrapper', { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkVirtualScrollViewport, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-virtual-scroll-viewport',\n                template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\",\n                host: {\n                    'class': 'cdk-virtual-scroll-viewport',\n                    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                providers: [{\n                        provide: CdkScrollable,\n                        useExisting: CdkVirtualScrollViewport\n                    }],\n                styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [VIRTUAL_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ScrollDispatcher }, { type: ViewportRuler }]; }, { scrolledIndexChange: [{\n            type: Output\n        }], orientation: [{\n            type: Input\n        }], _contentWrapper: [{\n            type: ViewChild,\n            args: ['contentWrapper', { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation, direction, node) {\n    const el = node;\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    const rect = el.getBoundingClientRect();\n    if (orientation === 'horizontal') {\n        return direction === 'start' ? rect.left : rect.right;\n    }\n    return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\nclass CdkVirtualForOf {\n    constructor(\n    /** The view container to add items to. */\n    _viewContainerRef, \n    /** The template to use when stamping out new items. */\n    _template, \n    /** The set of available differs. */\n    _differs, \n    /** The strategy used to render items in the virtual scroll viewport. */\n    _viewRepeater, \n    /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewRepeater = _viewRepeater;\n        this._viewport = _viewport;\n        /** Emits when the rendered view of the data changes. */\n        this.viewChange = new Subject();\n        /** Subject that emits when a new DataSource instance is given. */\n        this._dataSourceChanges = new Subject();\n        /** Emits whenever the data in the current DataSource changes. */\n        this.dataStream = this._dataSourceChanges\n            .pipe(\n        // Start off with null `DataSource`.\n        startWith(null), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /** The differ used to calculate changes to the data. */\n        this._differ = null;\n        /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe(data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n            this._renderedRange = range;\n            ngZone.run(() => this.viewChange.next(this._renderedRange));\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n    /** The DataSource to display. */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        if (isDataSource(value)) {\n            this._dataSourceChanges.next(value);\n        }\n        else {\n            // If value is an an NgIterable, convert it to an array.\n            this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n        }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn ?\n            (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) :\n            undefined;\n    }\n    /** The template used to stamp out new elements. */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n    get cdkVirtualForTemplateCacheSize() {\n        return this._viewRepeater.viewCacheSize;\n    }\n    set cdkVirtualForTemplateCacheSize(size) {\n        this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        const rangeLen = range.end - range.start;\n        // Loop over all the views, find the first and land node and compute the size by subtracting\n        // the top of the first node from the bottom of the last one.\n        let firstNode;\n        let lastNode;\n        // Find the first node by starting from the beginning and going forwards.\n        for (let i = 0; i < rangeLen; i++) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                firstNode = lastNode = view.rootNodes[0];\n                break;\n            }\n        }\n        // Find the last node by starting from the end and going backwards.\n        for (let i = rangeLen - 1; i > -1; i--) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                lastNode = view.rootNodes[view.rootNodes.length - 1];\n                break;\n            }\n        }\n        return firstNode && lastNode ?\n            getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode) : 0;\n    }\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next(undefined);\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._viewRepeater.detach();\n    }\n    /** React to scroll state changes in the viewport. */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            // Use a wrapper function for the `trackBy` so any new values are\n            // picked up automatically without having to recreate the differ.\n            this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n                return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n            });\n        }\n        this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    _updateContext() {\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /** Apply changes to the DOM. */\n    _applyChanges(changes) {\n        this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), (record) => record.item);\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record) => {\n            const view = this._viewContainerRef.get(record.currentIndex);\n            view.context.$implicit = record.item;\n        });\n        // Update the context variables on all items.\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    _getEmbeddedViewArgs(record, index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return {\n            templateRef: this._template,\n            context: {\n                $implicit: record.item,\n                // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n                // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n                cdkVirtualForOf: this._cdkVirtualForOf,\n                index: -1,\n                count: -1,\n                first: false,\n                last: false,\n                odd: false,\n                even: false\n            },\n            index,\n        };\n    }\n}\nCdkVirtualForOf.ɵfac = function CdkVirtualForOf_Factory(t) { return new (t || CdkVirtualForOf)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(_VIEW_REPEATER_STRATEGY), ɵngcc0.ɵɵdirectiveInject(CdkVirtualScrollViewport, 4), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkVirtualForOf.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkVirtualForOf, selectors: [[\"\", \"cdkVirtualFor\", \"\", \"cdkVirtualForOf\", \"\"]], inputs: { cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\", cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\" }, features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy },\n        ])] });\nCdkVirtualForOf.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: _RecycleViewRepeaterStrategy, decorators: [{ type: Inject, args: [_VIEW_REPEATER_STRATEGY,] }] },\n    { type: CdkVirtualScrollViewport, decorators: [{ type: SkipSelf }] },\n    { type: NgZone }\n];\nCdkVirtualForOf.propDecorators = {\n    cdkVirtualForOf: [{ type: Input }],\n    cdkVirtualForTrackBy: [{ type: Input }],\n    cdkVirtualForTemplate: [{ type: Input }],\n    cdkVirtualForTemplateCacheSize: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkVirtualForOf, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkVirtualFor][cdkVirtualForOf]',\n                providers: [\n                    { provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy },\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: ɵngcc3._RecycleViewRepeaterStrategy, decorators: [{\n                type: Inject,\n                args: [_VIEW_REPEATER_STRATEGY]\n            }] }, { type: CdkVirtualScrollViewport, decorators: [{\n                type: SkipSelf\n            }] }, { type: ɵngcc0.NgZone }]; }, { cdkVirtualForOf: [{\n            type: Input\n        }], cdkVirtualForTrackBy: [{\n            type: Input\n        }], cdkVirtualForTemplate: [{\n            type: Input\n        }], cdkVirtualForTemplateCacheSize: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CdkScrollableModule {\n}\nCdkScrollableModule.ɵfac = function CdkScrollableModule_Factory(t) { return new (t || CdkScrollableModule)(); };\nCdkScrollableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CdkScrollableModule });\nCdkScrollableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkScrollableModule, { declarations: [CdkScrollable], exports: [CdkScrollable] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkScrollableModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkScrollable],\n                declarations: [CdkScrollable]\n            }]\n    }], null, null); })();\n/**\n * @docs-primary-export\n */\nclass ScrollingModule {\n}\nScrollingModule.ɵfac = function ScrollingModule_Factory(t) { return new (t || ScrollingModule)(); };\nScrollingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ScrollingModule });\nScrollingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[\n            BidiModule,\n            PlatformModule,\n            CdkScrollableModule\n        ], BidiModule, CdkScrollableModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollingModule, { declarations: function () { return [CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport]; }, imports: function () { return [BidiModule,\n        PlatformModule, CdkScrollableModule]; }, exports: function () { return [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollingModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    BidiModule,\n                    PlatformModule,\n                    CdkScrollableModule\n                ],\n                exports: [\n                    BidiModule,\n                    CdkScrollableModule,\n                    CdkFixedSizeVirtualScroll,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ],\n                declarations: [\n                    CdkFixedSizeVirtualScroll,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n\n//# sourceMappingURL=scrolling.js.map"]},"metadata":{},"sourceType":"module"}