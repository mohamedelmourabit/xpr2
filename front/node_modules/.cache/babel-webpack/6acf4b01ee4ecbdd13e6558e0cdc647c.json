{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ng_redux_1 = require(\"../components/ng-redux\");\n\nvar operators_1 = require(\"rxjs/operators\");\n/**\n * OPTIONS_KEY: this is per-class (static) and holds the config from the\n * @SubStore decorator.\n */\n\n\nvar OPTIONS_KEY = '@angular-redux::substore::class::options';\n/**\n * INSTANCE_SUBSTORE_KEY, INSTANCE_SELECTIONS_KEY: these are per-instance\n * (non-static) and holds references to the substores/selected observables\n * to be used by an instance of a decorated class. I'm not using\n * reflect-metadata here because I want\n *\n * 1. different instances to have different substores in the case where\n * `basePathMethodName` is dynamic.\n * 2. the instance substore to be garbage collected when the instance is no\n * longer reachable.\n * This is therefore an own-property on the actual instance of the decorated\n * class.\n */\n\nvar INSTANCE_SUBSTORE_KEY = '@angular-redux::substore::instance::store';\nvar INSTANCE_SELECTIONS_KEY = '@angular-redux::substore::instance::selections';\n/**\n * Used to detect when the base path changes - this allows components to\n * dynamically adjust their selections if necessary.\n */\n\nvar INSTANCE_BASE_PATH_KEY = '@angular-redux::substore::instance::basepath';\n\nvar getClassOptions = function getClassOptions(decoratedInstance) {\n  return decoratedInstance.constructor[OPTIONS_KEY];\n};\n\nvar ɵ0 = getClassOptions;\nexports.ɵ0 = ɵ0;\n/** @hidden */\n\nexports.setClassOptions = function (decoratedClassConstructor, options) {\n  decoratedClassConstructor[OPTIONS_KEY] = options;\n}; // I want the store to be saved on the actual instance so\n// 1. different instances can have distinct substores if necessary\n// 2. the substore/selections will be marked for garbage collection when the\n//    instance is destroyed.\n\n\nvar setInstanceStore = function setInstanceStore(decoratedInstance, store) {\n  return decoratedInstance[INSTANCE_SUBSTORE_KEY] = store;\n};\n\nvar ɵ1 = setInstanceStore;\nexports.ɵ1 = ɵ1;\n\nvar getInstanceStore = function getInstanceStore(decoratedInstance) {\n  return decoratedInstance[INSTANCE_SUBSTORE_KEY];\n};\n\nvar ɵ2 = getInstanceStore;\nexports.ɵ2 = ɵ2;\n\nvar getInstanceSelectionMap = function getInstanceSelectionMap(decoratedInstance) {\n  var map = decoratedInstance[INSTANCE_SELECTIONS_KEY] || {};\n  decoratedInstance[INSTANCE_SELECTIONS_KEY] = map;\n  return map;\n};\n\nvar ɵ3 = getInstanceSelectionMap;\nexports.ɵ3 = ɵ3;\n\nvar hasBasePathChanged = function hasBasePathChanged(decoratedInstance, basePath) {\n  return decoratedInstance[INSTANCE_BASE_PATH_KEY] !== (basePath || []).toString();\n};\n\nvar ɵ4 = hasBasePathChanged;\nexports.ɵ4 = ɵ4;\n\nvar setInstanceBasePath = function setInstanceBasePath(decoratedInstance, basePath) {\n  decoratedInstance[INSTANCE_BASE_PATH_KEY] = (basePath || []).toString();\n};\n\nvar ɵ5 = setInstanceBasePath;\nexports.ɵ5 = ɵ5;\n\nvar clearInstanceState = function clearInstanceState(decoratedInstance) {\n  decoratedInstance[INSTANCE_SELECTIONS_KEY] = null;\n  decoratedInstance[INSTANCE_SUBSTORE_KEY] = null;\n  decoratedInstance[INSTANCE_BASE_PATH_KEY] = null;\n};\n\nvar ɵ6 = clearInstanceState;\nexports.ɵ6 = ɵ6;\n/**\n * Gets the store associated with a decorated instance (e.g. a\n * component or service)\n * @hidden\n */\n\nexports.getBaseStore = function (decoratedInstance) {\n  // The root store hasn't been set up yet.\n  if (!ng_redux_1.NgRedux.instance) {\n    return undefined;\n  }\n\n  var options = getClassOptions(decoratedInstance); // This is not decorated with `@WithSubStore`. Return the root store.\n\n  if (!options) {\n    return ng_redux_1.NgRedux.instance;\n  } // Dynamic base path support:\n\n\n  var basePath = decoratedInstance[options.basePathMethodName]();\n\n  if (hasBasePathChanged(decoratedInstance, basePath)) {\n    clearInstanceState(decoratedInstance);\n    setInstanceBasePath(decoratedInstance, basePath);\n  }\n\n  if (!basePath) {\n    return ng_redux_1.NgRedux.instance;\n  }\n\n  var store = getInstanceStore(decoratedInstance);\n\n  if (!store) {\n    setInstanceStore(decoratedInstance, ng_redux_1.NgRedux.instance.configureSubStore(basePath, options.localReducer));\n  }\n\n  return getInstanceStore(decoratedInstance);\n};\n/**\n * Creates an Observable from the given selection parameters,\n * rooted at decoratedInstance's store, and caches it on the\n * instance for future use.\n * @hidden\n */\n\n\nexports.getInstanceSelection = function (decoratedInstance, key, selector, transformer, comparator) {\n  var store = exports.getBaseStore(decoratedInstance);\n\n  if (store) {\n    var selections = getInstanceSelectionMap(decoratedInstance);\n    selections[key] = selections[key] || (!transformer ? store.select(selector, comparator) : store.select(selector).pipe(function (obs$) {\n      return transformer(obs$, decoratedInstance);\n    }, operators_1.distinctUntilChanged(comparator)));\n    return selections[key];\n  }\n\n  return undefined;\n}; //# sourceMappingURL=helpers.js.map","map":{"version":3,"sources":["/Users/mohammedelmourabit/xrp/xpr/node_modules/@angular-redux/store/__ivy_ngcc__/lib/src/decorators/helpers.js"],"names":["Object","defineProperty","exports","value","ng_redux_1","require","operators_1","OPTIONS_KEY","INSTANCE_SUBSTORE_KEY","INSTANCE_SELECTIONS_KEY","INSTANCE_BASE_PATH_KEY","getClassOptions","decoratedInstance","constructor","ɵ0","setClassOptions","decoratedClassConstructor","options","setInstanceStore","store","ɵ1","getInstanceStore","ɵ2","getInstanceSelectionMap","map","ɵ3","hasBasePathChanged","basePath","toString","ɵ4","setInstanceBasePath","ɵ5","clearInstanceState","ɵ6","getBaseStore","NgRedux","instance","undefined","basePathMethodName","configureSubStore","localReducer","getInstanceSelection","key","selector","transformer","comparator","selections","select","pipe","obs$","distinctUntilChanged"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ng_redux_1 = require(\"../components/ng-redux\");\nvar operators_1 = require(\"rxjs/operators\");\n/**\n * OPTIONS_KEY: this is per-class (static) and holds the config from the\n * @SubStore decorator.\n */\nvar OPTIONS_KEY = '@angular-redux::substore::class::options';\n/**\n * INSTANCE_SUBSTORE_KEY, INSTANCE_SELECTIONS_KEY: these are per-instance\n * (non-static) and holds references to the substores/selected observables\n * to be used by an instance of a decorated class. I'm not using\n * reflect-metadata here because I want\n *\n * 1. different instances to have different substores in the case where\n * `basePathMethodName` is dynamic.\n * 2. the instance substore to be garbage collected when the instance is no\n * longer reachable.\n * This is therefore an own-property on the actual instance of the decorated\n * class.\n */\nvar INSTANCE_SUBSTORE_KEY = '@angular-redux::substore::instance::store';\nvar INSTANCE_SELECTIONS_KEY = '@angular-redux::substore::instance::selections';\n/**\n * Used to detect when the base path changes - this allows components to\n * dynamically adjust their selections if necessary.\n */\nvar INSTANCE_BASE_PATH_KEY = '@angular-redux::substore::instance::basepath';\nvar getClassOptions = function (decoratedInstance) {\n    return decoratedInstance.constructor[OPTIONS_KEY];\n};\nvar ɵ0 = getClassOptions;\nexports.ɵ0 = ɵ0;\n/** @hidden */\nexports.setClassOptions = function (decoratedClassConstructor, options) {\n    decoratedClassConstructor[OPTIONS_KEY] = options;\n};\n// I want the store to be saved on the actual instance so\n// 1. different instances can have distinct substores if necessary\n// 2. the substore/selections will be marked for garbage collection when the\n//    instance is destroyed.\nvar setInstanceStore = function (decoratedInstance, store) { return (decoratedInstance[INSTANCE_SUBSTORE_KEY] = store); };\nvar ɵ1 = setInstanceStore;\nexports.ɵ1 = ɵ1;\nvar getInstanceStore = function (decoratedInstance) {\n    return decoratedInstance[INSTANCE_SUBSTORE_KEY];\n};\nvar ɵ2 = getInstanceStore;\nexports.ɵ2 = ɵ2;\nvar getInstanceSelectionMap = function (decoratedInstance) {\n    var map = decoratedInstance[INSTANCE_SELECTIONS_KEY] || {};\n    decoratedInstance[INSTANCE_SELECTIONS_KEY] = map;\n    return map;\n};\nvar ɵ3 = getInstanceSelectionMap;\nexports.ɵ3 = ɵ3;\nvar hasBasePathChanged = function (decoratedInstance, basePath) {\n    return decoratedInstance[INSTANCE_BASE_PATH_KEY] !== (basePath || []).toString();\n};\nvar ɵ4 = hasBasePathChanged;\nexports.ɵ4 = ɵ4;\nvar setInstanceBasePath = function (decoratedInstance, basePath) {\n    decoratedInstance[INSTANCE_BASE_PATH_KEY] = (basePath || []).toString();\n};\nvar ɵ5 = setInstanceBasePath;\nexports.ɵ5 = ɵ5;\nvar clearInstanceState = function (decoratedInstance) {\n    decoratedInstance[INSTANCE_SELECTIONS_KEY] = null;\n    decoratedInstance[INSTANCE_SUBSTORE_KEY] = null;\n    decoratedInstance[INSTANCE_BASE_PATH_KEY] = null;\n};\nvar ɵ6 = clearInstanceState;\nexports.ɵ6 = ɵ6;\n/**\n * Gets the store associated with a decorated instance (e.g. a\n * component or service)\n * @hidden\n */\nexports.getBaseStore = function (decoratedInstance) {\n    // The root store hasn't been set up yet.\n    if (!ng_redux_1.NgRedux.instance) {\n        return undefined;\n    }\n    var options = getClassOptions(decoratedInstance);\n    // This is not decorated with `@WithSubStore`. Return the root store.\n    if (!options) {\n        return ng_redux_1.NgRedux.instance;\n    }\n    // Dynamic base path support:\n    var basePath = decoratedInstance[options.basePathMethodName]();\n    if (hasBasePathChanged(decoratedInstance, basePath)) {\n        clearInstanceState(decoratedInstance);\n        setInstanceBasePath(decoratedInstance, basePath);\n    }\n    if (!basePath) {\n        return ng_redux_1.NgRedux.instance;\n    }\n    var store = getInstanceStore(decoratedInstance);\n    if (!store) {\n        setInstanceStore(decoratedInstance, ng_redux_1.NgRedux.instance.configureSubStore(basePath, options.localReducer));\n    }\n    return getInstanceStore(decoratedInstance);\n};\n/**\n * Creates an Observable from the given selection parameters,\n * rooted at decoratedInstance's store, and caches it on the\n * instance for future use.\n * @hidden\n */\nexports.getInstanceSelection = function (decoratedInstance, key, selector, transformer, comparator) {\n    var store = exports.getBaseStore(decoratedInstance);\n    if (store) {\n        var selections = getInstanceSelectionMap(decoratedInstance);\n        selections[key] =\n            selections[key] ||\n                (!transformer\n                    ? store.select(selector, comparator)\n                    : store\n                        .select(selector)\n                        .pipe(function (obs$) { return transformer(obs$, decoratedInstance); }, operators_1.distinctUntilChanged(comparator)));\n        return selections[key];\n    }\n    return undefined;\n};\n//# sourceMappingURL=helpers.js.map"]},"metadata":{},"sourceType":"script"}