{"ast":null,"code":"import _slicedToArray from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mohammedelmourabit/xrp/xpr/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, ElementRef, ViewContainerRef, NgZone, Inject, Optional, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nvar matTooltipAnimations = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [state('initial, void, hidden', style({\n    opacity: 0,\n    transform: 'scale(0)'\n  })), state('visible', style({\n    transform: 'scale(1)'\n  })), transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([style({\n    opacity: 0,\n    transform: 'scale(0)',\n    offset: 0\n  }), style({\n    opacity: 0.5,\n    transform: 'scale(0.99)',\n    offset: 0.5\n  }), style({\n    opacity: 1,\n    transform: 'scale(1)',\n    offset: 1\n  })]))), transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({\n    opacity: 0\n  })))])\n};\n/** Time in ms to throttle repositioning after scroll events. */\n\nvar SCROLL_THROTTLE_MS = 20;\n/** CSS class that will be attached to the overlay panel. */\n\nvar TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/** Options used to bind passive event listeners. */\n\nvar passiveListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\n\nvar LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\n\nfunction getMatTooltipInvalidPositionError(position) {\n  return Error(\"Tooltip position \\\"\".concat(position, \"\\\" is invalid.\"));\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\n\n\nvar MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition({\n      scrollThrottle: SCROLL_THROTTLE_MS\n    });\n  };\n}\n/** @docs-private */\n\n\nvar MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n/** Injection token to be used to override the default options for `matTooltip`. */\n\nvar MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n  providedIn: 'root',\n  factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500\n  };\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n\n\nvar MatTooltip = /*#__PURE__*/function () {\n  function MatTooltip(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions,\n  /** @breaking-change 11.0.0 _document argument to become required. */\n  _document) {\n    var _this = this;\n\n    _classCallCheck(this, MatTooltip);\n\n    this._overlay = _overlay;\n    this._elementRef = _elementRef;\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewContainerRef = _viewContainerRef;\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    this._ariaDescriber = _ariaDescriber;\n    this._focusMonitor = _focusMonitor;\n    this._dir = _dir;\n    this._defaultOptions = _defaultOptions;\n    this._position = 'below';\n    this._disabled = false;\n    this._viewInitialized = false;\n    this._pointerExitEventsInitialized = false;\n    /** The default delay in ms before showing the tooltip after show is called */\n\n    this.showDelay = this._defaultOptions.showDelay;\n    /** The default delay in ms before hiding the tooltip after hide is called */\n\n    this.hideDelay = this._defaultOptions.hideDelay;\n    /**\n     * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n     * uses a long press gesture to show and hide, however it can conflict with the native browser\n     * gestures. To work around the conflict, Angular Material disables native gestures on the\n     * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n     * elements). The different values for this option configure the touch event handling as follows:\n     * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n     *   browser gestures on particular elements. In particular, it allows text selection on inputs\n     *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n     * - `on` - Enables touch gestures for all elements and disables native\n     *   browser gestures with no exceptions.\n     * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n     *   showing on touch devices.\n     */\n\n    this.touchGestures = 'auto';\n    this._message = '';\n    /** Manually-bound passive event listeners. */\n\n    this._passiveListeners = [];\n    /** Emits when the component is destroyed. */\n\n    this._destroyed = new Subject();\n    /**\n     * Handles the keydown events on the host element.\n     * Needs to be an arrow function so that we can use it in addEventListener.\n     */\n\n    this._handleKeydown = function (event) {\n      if (_this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        _this._ngZone.run(function () {\n          return _this.hide(0);\n        });\n      }\n    };\n\n    this._scrollStrategy = scrollStrategy;\n\n    if (_defaultOptions) {\n      if (_defaultOptions.position) {\n        this.position = _defaultOptions.position;\n      }\n\n      if (_defaultOptions.touchGestures) {\n        this.touchGestures = _defaultOptions.touchGestures;\n      }\n    }\n\n    _ngZone.runOutsideAngular(function () {\n      _elementRef.nativeElement.addEventListener('keydown', _this._handleKeydown);\n    });\n  }\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n\n\n  _createClass(MatTooltip, [{\n    key: \"position\",\n    get: function get() {\n      return this._position;\n    },\n    set: function set(value) {\n      if (value !== this._position) {\n        this._position = value;\n\n        if (this._overlayRef) {\n          this._updatePosition();\n\n          if (this._tooltipInstance) {\n            this._tooltipInstance.show(0);\n          }\n\n          this._overlayRef.updatePosition();\n        }\n      }\n    }\n    /** Disables the display of the tooltip. */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled;\n    },\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value); // If tooltip is disabled, hide immediately.\n\n      if (this._disabled) {\n        this.hide(0);\n      } else {\n        this._setupPointerEnterEventsIfNeeded();\n      }\n    }\n    /** The message to be displayed in the tooltip */\n\n  }, {\n    key: \"message\",\n    get: function get() {\n      return this._message;\n    },\n    set: function set(value) {\n      var _this2 = this;\n\n      this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip'); // If the message is not a string (e.g. number), convert it to a string and trim it.\n      // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n      // away the string-conversion: https://github.com/angular/components/issues/20684\n\n\n      this._message = value != null ? String(value).trim() : '';\n\n      if (!this._message && this._isTooltipVisible()) {\n        this.hide(0);\n      } else {\n        this._setupPointerEnterEventsIfNeeded();\n\n        this._updateTooltipMessage();\n\n        this._ngZone.runOutsideAngular(function () {\n          // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n          // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n          // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n          // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n          Promise.resolve().then(function () {\n            _this2._ariaDescriber.describe(_this2._elementRef.nativeElement, _this2.message, 'tooltip');\n          });\n        });\n      }\n    }\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n\n  }, {\n    key: \"tooltipClass\",\n    get: function get() {\n      return this._tooltipClass;\n    },\n    set: function set(value) {\n      this._tooltipClass = value;\n\n      if (this._tooltipInstance) {\n        this._setTooltipClass(this._tooltipClass);\n      }\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this3 = this;\n\n      // This needs to happen after view init so the initial values for all inputs have been set.\n      this._viewInitialized = true;\n\n      this._setupPointerEnterEventsIfNeeded();\n\n      this._focusMonitor.monitor(this._elementRef).pipe(takeUntil(this._destroyed)).subscribe(function (origin) {\n        // Note that the focus monitor runs outside the Angular zone.\n        if (!origin) {\n          _this3._ngZone.run(function () {\n            return _this3.hide(0);\n          });\n        } else if (origin === 'keyboard') {\n          _this3._ngZone.run(function () {\n            return _this3.show();\n          });\n        }\n      });\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var nativeElement = this._elementRef.nativeElement;\n      clearTimeout(this._touchstartTimeout);\n\n      if (this._overlayRef) {\n        this._overlayRef.dispose();\n\n        this._tooltipInstance = null;\n      } // Clean up the event listeners set in the constructor\n\n\n      nativeElement.removeEventListener('keydown', this._handleKeydown);\n\n      this._passiveListeners.forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            event = _ref2[0],\n            listener = _ref2[1];\n\n        nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n      });\n\n      this._passiveListeners.length = 0;\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n\n      this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      var _this4 = this;\n\n      var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.showDelay;\n\n      if (this.disabled || !this.message || this._isTooltipVisible() && !this._tooltipInstance._showTimeoutId && !this._tooltipInstance._hideTimeoutId) {\n        return;\n      }\n\n      var overlayRef = this._createOverlay();\n\n      this._detach();\n\n      this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n      this._tooltipInstance = overlayRef.attach(this._portal).instance;\n\n      this._tooltipInstance.afterHidden().pipe(takeUntil(this._destroyed)).subscribe(function () {\n        return _this4._detach();\n      });\n\n      this._setTooltipClass(this._tooltipClass);\n\n      this._updateTooltipMessage();\n\n      this._tooltipInstance.show(delay);\n    }\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.hideDelay;\n\n      if (this._tooltipInstance) {\n        this._tooltipInstance.hide(delay);\n      }\n    }\n    /** Shows/hides the tooltip */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this._isTooltipVisible() ? this.hide() : this.show();\n    }\n    /** Returns true if the tooltip is currently visible to the user */\n\n  }, {\n    key: \"_isTooltipVisible\",\n    value: function _isTooltipVisible() {\n      return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /** Create the overlay config and position strategy */\n\n  }, {\n    key: \"_createOverlay\",\n    value: function _createOverlay() {\n      var _this5 = this;\n\n      if (this._overlayRef) {\n        return this._overlayRef;\n      }\n\n      var scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef); // Create connected position strategy that listens for scroll events to reposition.\n\n\n      var strategy = this._overlay.position().flexibleConnectedTo(this._elementRef).withTransformOriginOn('.mat-tooltip').withFlexibleDimensions(false).withViewportMargin(8).withScrollableContainers(scrollableAncestors);\n\n      strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(function (change) {\n        if (_this5._tooltipInstance) {\n          if (change.scrollableViewProperties.isOverlayClipped && _this5._tooltipInstance.isVisible()) {\n            // After position changes occur and the overlay is clipped by\n            // a parent scrollable then close the tooltip.\n            _this5._ngZone.run(function () {\n              return _this5.hide(0);\n            });\n          }\n        }\n      });\n      this._overlayRef = this._overlay.create({\n        direction: this._dir,\n        positionStrategy: strategy,\n        panelClass: TOOLTIP_PANEL_CLASS,\n        scrollStrategy: this._scrollStrategy()\n      });\n\n      this._updatePosition();\n\n      this._overlayRef.detachments().pipe(takeUntil(this._destroyed)).subscribe(function () {\n        return _this5._detach();\n      });\n\n      return this._overlayRef;\n    }\n    /** Detaches the currently-attached tooltip. */\n\n  }, {\n    key: \"_detach\",\n    value: function _detach() {\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n      }\n\n      this._tooltipInstance = null;\n    }\n    /** Updates the position of the current tooltip. */\n\n  }, {\n    key: \"_updatePosition\",\n    value: function _updatePosition() {\n      var position = this._overlayRef.getConfig().positionStrategy;\n\n      var origin = this._getOrigin();\n\n      var overlay = this._getOverlayPosition();\n\n      position.withPositions([Object.assign(Object.assign({}, origin.main), overlay.main), Object.assign(Object.assign({}, origin.fallback), overlay.fallback)]);\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n\n  }, {\n    key: \"_getOrigin\",\n    value: function _getOrigin() {\n      var isLtr = !this._dir || this._dir.value == 'ltr';\n      var position = this.position;\n      var originPosition;\n\n      if (position == 'above' || position == 'below') {\n        originPosition = {\n          originX: 'center',\n          originY: position == 'above' ? 'top' : 'bottom'\n        };\n      } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n        originPosition = {\n          originX: 'start',\n          originY: 'center'\n        };\n      } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n        originPosition = {\n          originX: 'end',\n          originY: 'center'\n        };\n      } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        throw getMatTooltipInvalidPositionError(position);\n      }\n\n      var _this$_invertPosition = this._invertPosition(originPosition.originX, originPosition.originY),\n          x = _this$_invertPosition.x,\n          y = _this$_invertPosition.y;\n\n      return {\n        main: originPosition,\n        fallback: {\n          originX: x,\n          originY: y\n        }\n      };\n    }\n    /** Returns the overlay position and a fallback position based on the user's preference */\n\n  }, {\n    key: \"_getOverlayPosition\",\n    value: function _getOverlayPosition() {\n      var isLtr = !this._dir || this._dir.value == 'ltr';\n      var position = this.position;\n      var overlayPosition;\n\n      if (position == 'above') {\n        overlayPosition = {\n          overlayX: 'center',\n          overlayY: 'bottom'\n        };\n      } else if (position == 'below') {\n        overlayPosition = {\n          overlayX: 'center',\n          overlayY: 'top'\n        };\n      } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n        overlayPosition = {\n          overlayX: 'end',\n          overlayY: 'center'\n        };\n      } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n        overlayPosition = {\n          overlayX: 'start',\n          overlayY: 'center'\n        };\n      } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        throw getMatTooltipInvalidPositionError(position);\n      }\n\n      var _this$_invertPosition2 = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY),\n          x = _this$_invertPosition2.x,\n          y = _this$_invertPosition2.y;\n\n      return {\n        main: overlayPosition,\n        fallback: {\n          overlayX: x,\n          overlayY: y\n        }\n      };\n    }\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n\n  }, {\n    key: \"_updateTooltipMessage\",\n    value: function _updateTooltipMessage() {\n      var _this6 = this;\n\n      // Must wait for the message to be painted to the tooltip so that the overlay can properly\n      // calculate the correct positioning based on the size of the text.\n      if (this._tooltipInstance) {\n        this._tooltipInstance.message = this.message;\n\n        this._tooltipInstance._markForCheck();\n\n        this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(function () {\n          if (_this6._tooltipInstance) {\n            _this6._overlayRef.updatePosition();\n          }\n        });\n      }\n    }\n    /** Updates the tooltip class */\n\n  }, {\n    key: \"_setTooltipClass\",\n    value: function _setTooltipClass(tooltipClass) {\n      if (this._tooltipInstance) {\n        this._tooltipInstance.tooltipClass = tooltipClass;\n\n        this._tooltipInstance._markForCheck();\n      }\n    }\n    /** Inverts an overlay position. */\n\n  }, {\n    key: \"_invertPosition\",\n    value: function _invertPosition(x, y) {\n      if (this.position === 'above' || this.position === 'below') {\n        if (y === 'top') {\n          y = 'bottom';\n        } else if (y === 'bottom') {\n          y = 'top';\n        }\n      } else {\n        if (x === 'end') {\n          x = 'start';\n        } else if (x === 'start') {\n          x = 'end';\n        }\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n    /** Binds the pointer events to the tooltip trigger. */\n\n  }, {\n    key: \"_setupPointerEnterEventsIfNeeded\",\n    value: function _setupPointerEnterEventsIfNeeded() {\n      var _this7 = this;\n\n      // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n      if (this._disabled || !this.message || !this._viewInitialized || this._passiveListeners.length) {\n        return;\n      } // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n      // first tap from firing its click event or can cause the tooltip to open for clicks.\n\n\n      if (this._platformSupportsMouseEvents()) {\n        this._passiveListeners.push(['mouseenter', function () {\n          _this7._setupPointerExitEventsIfNeeded();\n\n          _this7.show();\n        }]);\n      } else if (this.touchGestures !== 'off') {\n        this._disableNativeGesturesIfNecessary();\n\n        this._passiveListeners.push(['touchstart', function () {\n          // Note that it's important that we don't `preventDefault` here,\n          // because it can prevent click events from firing on the element.\n          _this7._setupPointerExitEventsIfNeeded();\n\n          clearTimeout(_this7._touchstartTimeout);\n          _this7._touchstartTimeout = setTimeout(function () {\n            return _this7.show();\n          }, LONGPRESS_DELAY);\n        }]);\n      }\n\n      this._addListeners(this._passiveListeners);\n    }\n  }, {\n    key: \"_setupPointerExitEventsIfNeeded\",\n    value: function _setupPointerExitEventsIfNeeded() {\n      var _this8 = this,\n          _this$_passiveListene;\n\n      if (this._pointerExitEventsInitialized) {\n        return;\n      }\n\n      this._pointerExitEventsInitialized = true;\n      var exitListeners = [];\n\n      if (this._platformSupportsMouseEvents()) {\n        exitListeners.push(['mouseleave', function () {\n          return _this8.hide();\n        }], ['wheel', function (event) {\n          return _this8._wheelListener(event);\n        }]);\n      } else if (this.touchGestures !== 'off') {\n        this._disableNativeGesturesIfNecessary();\n\n        var touchendListener = function touchendListener() {\n          clearTimeout(_this8._touchstartTimeout);\n\n          _this8.hide(_this8._defaultOptions.touchendHideDelay);\n        };\n\n        exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n      }\n\n      this._addListeners(exitListeners);\n\n      (_this$_passiveListene = this._passiveListeners).push.apply(_this$_passiveListene, exitListeners);\n    }\n  }, {\n    key: \"_addListeners\",\n    value: function _addListeners(listeners) {\n      var _this9 = this;\n\n      listeners.forEach(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            event = _ref4[0],\n            listener = _ref4[1];\n\n        _this9._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n      });\n    }\n  }, {\n    key: \"_platformSupportsMouseEvents\",\n    value: function _platformSupportsMouseEvents() {\n      return !this._platform.IOS && !this._platform.ANDROID;\n    }\n    /** Listener for the `wheel` event on the element. */\n\n  }, {\n    key: \"_wheelListener\",\n    value: function _wheelListener(event) {\n      if (this._isTooltipVisible()) {\n        // @breaking-change 11.0.0 Remove `|| document` once the document is a required param.\n        var doc = this._document || document;\n        var elementUnderPointer = doc.elementFromPoint(event.clientX, event.clientY);\n        var element = this._elementRef.nativeElement; // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n        // won't fire if the user scrolls away using the wheel without moving their cursor. We\n        // work around it by finding the element under the user's cursor and closing the tooltip\n        // if it's not the trigger.\n\n        if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n          this.hide();\n        }\n      }\n    }\n    /** Disables the native browser gestures, based on how the tooltip has been configured. */\n\n  }, {\n    key: \"_disableNativeGesturesIfNecessary\",\n    value: function _disableNativeGesturesIfNecessary() {\n      var gestures = this.touchGestures;\n\n      if (gestures !== 'off') {\n        var element = this._elementRef.nativeElement;\n        var _style = element.style; // If gestures are set to `auto`, we don't disable text selection on inputs and\n        // textareas, because it prevents the user from typing into them on iOS Safari.\n\n        if (gestures === 'on' || element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA') {\n          _style.userSelect = _style.msUserSelect = _style.webkitUserSelect = _style.MozUserSelect = 'none';\n        } // If we have `auto` gestures and the element uses native HTML dragging,\n        // we don't set `-webkit-user-drag` because it prevents the native behavior.\n\n\n        if (gestures === 'on' || !element.draggable) {\n          _style.webkitUserDrag = 'none';\n        }\n\n        _style.touchAction = 'none';\n        _style.webkitTapHighlightColor = 'transparent';\n      }\n    }\n  }]);\n\n  return MatTooltip;\n}();\n\nMatTooltip.ɵfac = function MatTooltip_Factory(t) {\n  return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n};\n\nMatTooltip.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTooltip,\n  selectors: [[\"\", \"matTooltip\", \"\"]],\n  hostAttrs: [1, \"mat-tooltip-trigger\"],\n  inputs: {\n    showDelay: [\"matTooltipShowDelay\", \"showDelay\"],\n    hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"],\n    touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"],\n    position: [\"matTooltipPosition\", \"position\"],\n    disabled: [\"matTooltipDisabled\", \"disabled\"],\n    message: [\"matTooltip\", \"message\"],\n    tooltipClass: [\"matTooltipClass\", \"tooltipClass\"]\n  },\n  exportAs: [\"matTooltip\"]\n});\n\nMatTooltip.ctorParameters = function () {\n  return [{\n    type: Overlay\n  }, {\n    type: ElementRef\n  }, {\n    type: ScrollDispatcher\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: NgZone\n  }, {\n    type: Platform\n  }, {\n    type: AriaDescriber\n  }, {\n    type: FocusMonitor\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\nMatTooltip.propDecorators = {\n  position: [{\n    type: Input,\n    args: ['matTooltipPosition']\n  }],\n  disabled: [{\n    type: Input,\n    args: ['matTooltipDisabled']\n  }],\n  showDelay: [{\n    type: Input,\n    args: ['matTooltipShowDelay']\n  }],\n  hideDelay: [{\n    type: Input,\n    args: ['matTooltipHideDelay']\n  }],\n  touchGestures: [{\n    type: Input,\n    args: ['matTooltipTouchGestures']\n  }],\n  message: [{\n    type: Input,\n    args: ['matTooltip']\n  }],\n  tooltipClass: [{\n    type: Input,\n    args: ['matTooltipClass']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltip, [{\n    type: Directive,\n    args: [{\n      selector: '[matTooltip]',\n      exportAs: 'matTooltip',\n      host: {\n        'class': 'mat-tooltip-trigger'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Overlay\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc2.ScrollDispatcher\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc3.Platform\n    }, {\n      type: ɵngcc4.AriaDescriber\n    }, {\n      type: ɵngcc4.FocusMonitor\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc5.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    showDelay: [{\n      type: Input,\n      args: ['matTooltipShowDelay']\n    }],\n    hideDelay: [{\n      type: Input,\n      args: ['matTooltipHideDelay']\n    }],\n    touchGestures: [{\n      type: Input,\n      args: ['matTooltipTouchGestures']\n    }],\n    position: [{\n      type: Input,\n      args: ['matTooltipPosition']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['matTooltipDisabled']\n    }],\n    message: [{\n      type: Input,\n      args: ['matTooltip']\n    }],\n    tooltipClass: [{\n      type: Input,\n      args: ['matTooltipClass']\n    }]\n  });\n})();\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n\n\nvar TooltipComponent = /*#__PURE__*/function () {\n  function TooltipComponent(_changeDetectorRef, _breakpointObserver) {\n    _classCallCheck(this, TooltipComponent);\n\n    this._changeDetectorRef = _changeDetectorRef;\n    this._breakpointObserver = _breakpointObserver;\n    /** Property watched by the animation framework to show or hide the tooltip */\n\n    this._visibility = 'initial';\n    /** Whether interactions on the page should close the tooltip */\n\n    this._closeOnInteraction = false;\n    /** Subject for notifying that the tooltip has been hidden from the view */\n\n    this._onHide = new Subject();\n    /** Stream that emits whether the user has a handset-sized display.  */\n\n    this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n  }\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n\n\n  _createClass(TooltipComponent, [{\n    key: \"show\",\n    value: function show(delay) {\n      var _this10 = this;\n\n      // Cancel the delayed hide if it is scheduled\n      if (this._hideTimeoutId) {\n        clearTimeout(this._hideTimeoutId);\n        this._hideTimeoutId = null;\n      } // Body interactions should cancel the tooltip if there is a delay in showing.\n\n\n      this._closeOnInteraction = true;\n      this._showTimeoutId = setTimeout(function () {\n        _this10._visibility = 'visible';\n        _this10._showTimeoutId = null; // Mark for check so if any parent component has set the\n        // ChangeDetectionStrategy to OnPush it will be checked anyways\n\n        _this10._markForCheck();\n      }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide(delay) {\n      var _this11 = this;\n\n      // Cancel the delayed show if it is scheduled\n      if (this._showTimeoutId) {\n        clearTimeout(this._showTimeoutId);\n        this._showTimeoutId = null;\n      }\n\n      this._hideTimeoutId = setTimeout(function () {\n        _this11._visibility = 'hidden';\n        _this11._hideTimeoutId = null; // Mark for check so if any parent component has set the\n        // ChangeDetectionStrategy to OnPush it will be checked anyways\n\n        _this11._markForCheck();\n      }, delay);\n    }\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n\n  }, {\n    key: \"afterHidden\",\n    value: function afterHidden() {\n      return this._onHide;\n    }\n    /** Whether the tooltip is being displayed. */\n\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      return this._visibility === 'visible';\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._onHide.complete();\n    }\n  }, {\n    key: \"_animationStart\",\n    value: function _animationStart() {\n      this._closeOnInteraction = false;\n    }\n  }, {\n    key: \"_animationDone\",\n    value: function _animationDone(event) {\n      var toState = event.toState;\n\n      if (toState === 'hidden' && !this.isVisible()) {\n        this._onHide.next();\n      }\n\n      if (toState === 'visible' || toState === 'hidden') {\n        this._closeOnInteraction = true;\n      }\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n\n  }, {\n    key: \"_handleBodyInteraction\",\n    value: function _handleBodyInteraction() {\n      if (this._closeOnInteraction) {\n        this.hide(0);\n      }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n\n  }, {\n    key: \"_markForCheck\",\n    value: function _markForCheck() {\n      this._changeDetectorRef.markForCheck();\n    }\n  }]);\n\n  return TooltipComponent;\n}();\n\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) {\n  return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver));\n};\n\nTooltipComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TooltipComponent,\n  selectors: [[\"mat-tooltip-component\"]],\n  hostAttrs: [\"aria-hidden\", \"true\"],\n  hostVars: 2,\n  hostBindings: function TooltipComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function TooltipComponent_click_HostBindingHandler() {\n        return ctx._handleBodyInteraction();\n      }, false, ɵngcc0.ɵɵresolveBody)(\"auxclick\", function TooltipComponent_auxclick_HostBindingHandler() {\n        return ctx._handleBodyInteraction();\n      }, false, ɵngcc0.ɵɵresolveBody);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n    }\n  },\n  decls: 3,\n  vars: 7,\n  consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]],\n  template: function TooltipComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() {\n        return ctx._animationStart();\n      })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) {\n        return ctx._animationDone($event);\n      });\n      ɵngcc0.ɵɵpipe(1, \"async\");\n      ɵngcc0.ɵɵtext(2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      var tmp_0_0 = null;\n      ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵtextInterpolate(ctx.message);\n    }\n  },\n  directives: [ɵngcc7.NgClass],\n  pipes: [ɵngcc7.AsyncPipe],\n  styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matTooltipAnimations.tooltipState]\n  },\n  changeDetection: 0\n});\n\nTooltipComponent.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }, {\n    type: BreakpointObserver\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TooltipComponent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tooltip-component',\n      template: \"<div class=\\\"mat-tooltip\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\"\\n     [@state]=\\\"_visibility\\\"\\n     (@state.start)=\\\"_animationStart()\\\"\\n     (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\\n\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [matTooltipAnimations.tooltipState],\n      host: {\n        // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n        // won't be rendered if the animations are disabled or there is no web animations polyfill.\n        '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n        '(body:click)': 'this._handleBodyInteraction()',\n        '(body:auxclick)': 'this._handleBodyInteraction()',\n        'aria-hidden': 'true'\n      },\n      styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc6.BreakpointObserver\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatTooltipModule = function MatTooltipModule() {\n  _classCallCheck(this, MatTooltipModule);\n};\n\nMatTooltipModule.ɵfac = function MatTooltipModule_Factory(t) {\n  return new (t || MatTooltipModule)();\n};\n\nMatTooltipModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatTooltipModule\n});\nMatTooltipModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [[A11yModule, CommonModule, OverlayModule, MatCommonModule], MatCommonModule, CdkScrollableModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, {\n    declarations: function declarations() {\n      return [MatTooltip, TooltipComponent];\n    },\n    imports: function imports() {\n      return [A11yModule, CommonModule, OverlayModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltipModule, [{\n    type: NgModule,\n    args: [{\n      imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule],\n      exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n      declarations: [MatTooltip, TooltipComponent],\n      entryComponents: [TooltipComponent],\n      providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, getMatTooltipInvalidPositionError, matTooltipAnimations }; //# sourceMappingURL=tooltip.js.map","map":{"version":3,"sources":["/Users/mohammedelmourabit/xrp/xpr/node_modules/@angular/material/__ivy_ngcc__/fesm2015/tooltip.js"],"names":["Overlay","OverlayModule","AriaDescriber","FocusMonitor","A11yModule","DOCUMENT","CommonModule","InjectionToken","Directive","ElementRef","ViewContainerRef","NgZone","Inject","Optional","Input","Component","ViewEncapsulation","ChangeDetectionStrategy","ChangeDetectorRef","NgModule","MatCommonModule","ScrollDispatcher","CdkScrollableModule","Directionality","coerceBooleanProperty","ESCAPE","hasModifierKey","Breakpoints","BreakpointObserver","normalizePassiveListenerOptions","Platform","ComponentPortal","Subject","takeUntil","take","trigger","state","style","transition","animate","keyframes","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","ɵngcc7","matTooltipAnimations","tooltipState","opacity","transform","offset","SCROLL_THROTTLE_MS","TOOLTIP_PANEL_CLASS","passiveListenerOptions","passive","LONGPRESS_DELAY","getMatTooltipInvalidPositionError","position","Error","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","useFactory","MAT_TOOLTIP_DEFAULT_OPTIONS","providedIn","factory","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","showDelay","hideDelay","touchendHideDelay","MatTooltip","_overlay","_elementRef","_scrollDispatcher","_viewContainerRef","_ngZone","_platform","_ariaDescriber","_focusMonitor","scrollStrategy","_dir","_defaultOptions","_document","_position","_disabled","_viewInitialized","_pointerExitEventsInitialized","touchGestures","_message","_passiveListeners","_destroyed","_handleKeydown","event","_isTooltipVisible","keyCode","preventDefault","stopPropagation","run","hide","_scrollStrategy","runOutsideAngular","nativeElement","addEventListener","value","_overlayRef","_updatePosition","_tooltipInstance","show","updatePosition","_setupPointerEnterEventsIfNeeded","removeDescription","String","trim","_updateTooltipMessage","Promise","resolve","then","describe","message","_tooltipClass","_setTooltipClass","monitor","pipe","subscribe","origin","clearTimeout","_touchstartTimeout","dispose","removeEventListener","forEach","listener","length","next","complete","stopMonitoring","delay","disabled","_showTimeoutId","_hideTimeoutId","overlayRef","_createOverlay","_detach","_portal","TooltipComponent","attach","instance","afterHidden","isVisible","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","change","scrollableViewProperties","isOverlayClipped","create","direction","positionStrategy","panelClass","detachments","hasAttached","detach","getConfig","_getOrigin","_getOverlayPosition","withPositions","Object","assign","main","fallback","isLtr","originPosition","originX","originY","ngDevMode","_invertPosition","x","y","overlayPosition","overlayX","overlayY","_markForCheck","onMicrotaskEmpty","tooltipClass","_platformSupportsMouseEvents","push","_setupPointerExitEventsIfNeeded","_disableNativeGesturesIfNecessary","setTimeout","_addListeners","exitListeners","_wheelListener","touchendListener","listeners","IOS","ANDROID","doc","document","elementUnderPointer","elementFromPoint","clientX","clientY","element","contains","gestures","nodeName","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","draggable","webkitUserDrag","touchAction","webkitTapHighlightColor","ɵfac","MatTooltip_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","inputs","exportAs","ctorParameters","undefined","decorators","args","propDecorators","ɵsetClassMetadata","selector","host","_changeDetectorRef","_breakpointObserver","_visibility","_closeOnInteraction","_onHide","_isHandset","observe","Handset","toState","markForCheck","TooltipComponent_Factory","ɵcmp","ɵɵdefineComponent","hostVars","hostBindings","TooltipComponent_HostBindings","rf","ctx","ɵɵlistener","TooltipComponent_click_HostBindingHandler","_handleBodyInteraction","ɵɵresolveBody","TooltipComponent_auxclick_HostBindingHandler","ɵɵstyleProp","decls","vars","consts","template","TooltipComponent_Template","ɵɵelementStart","TooltipComponent_Template_div_animation_state_start_0_listener","_animationStart","TooltipComponent_Template_div_animation_state_done_0_listener","$event","_animationDone","ɵɵpipe","ɵɵtext","ɵɵelementEnd","tmp_0_0","ɵɵclassProp","ɵɵpipeBind1","matches","ɵɵproperty","ɵɵadvance","ɵɵtextInterpolate","directives","NgClass","pipes","AsyncPipe","styles","encapsulation","data","animation","changeDetection","None","OnPush","animations","MatTooltipModule","MatTooltipModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports","entryComponents"],"mappings":"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","sourcesContent":["import { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, ElementRef, ViewContainerRef, NgZone, Inject, Optional, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nconst matTooltipAnimations = {\n    /** Animation that transitions a tooltip in and out. */\n    tooltipState: trigger('state', [\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n            style({ opacity: 0, transform: 'scale(0)', offset: 0 }),\n            style({ opacity: 0.5, transform: 'scale(0.99)', offset: 0.5 }),\n            style({ opacity: 1, transform: 'scale(1)', offset: 1 })\n        ]))),\n        transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/** Time in ms to throttle repositioning after scroll events. */\nconst SCROLL_THROTTLE_MS = 20;\n/** CSS class that will be attached to the overlay panel. */\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/** @docs-private */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip {\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, \n    /** @breaking-change 11.0.0 _document argument to become required. */\n    _document) {\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._disabled = false;\n        this._viewInitialized = false;\n        this._pointerExitEventsInitialized = false;\n        /** The default delay in ms before showing the tooltip after show is called */\n        this.showDelay = this._defaultOptions.showDelay;\n        /** The default delay in ms before hiding the tooltip after hide is called */\n        this.hideDelay = this._defaultOptions.hideDelay;\n        /**\n         * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n         * uses a long press gesture to show and hide, however it can conflict with the native browser\n         * gestures. To work around the conflict, Angular Material disables native gestures on the\n         * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n         * elements). The different values for this option configure the touch event handling as follows:\n         * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n         *   browser gestures on particular elements. In particular, it allows text selection on inputs\n         *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n         * - `on` - Enables touch gestures for all elements and disables native\n         *   browser gestures with no exceptions.\n         * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n         *   showing on touch devices.\n         */\n        this.touchGestures = 'auto';\n        this._message = '';\n        /** Manually-bound passive event listeners. */\n        this._passiveListeners = [];\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Handles the keydown events on the host element.\n         * Needs to be an arrow function so that we can use it in addEventListener.\n         */\n        this._handleKeydown = (event) => {\n            if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                event.stopPropagation();\n                this._ngZone.run(() => this.hide(0));\n            }\n        };\n        this._scrollStrategy = scrollStrategy;\n        if (_defaultOptions) {\n            if (_defaultOptions.position) {\n                this.position = _defaultOptions.position;\n            }\n            if (_defaultOptions.touchGestures) {\n                this.touchGestures = _defaultOptions.touchGestures;\n            }\n        }\n        _ngZone.runOutsideAngular(() => {\n            _elementRef.nativeElement.addEventListener('keydown', this._handleKeydown);\n        });\n    }\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n    get position() { return this._position; }\n    set position(value) {\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition();\n                if (this._tooltipInstance) {\n                    this._tooltipInstance.show(0);\n                }\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    /** Disables the display of the tooltip. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // If tooltip is disabled, hide immediately.\n        if (this._disabled) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n        }\n    }\n    /** The message to be displayed in the tooltip */\n    get message() { return this._message; }\n    set message(value) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip');\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n        // away the string-conversion: https://github.com/angular/components/issues/20684\n        this._message = value != null ? String(value).trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n            this._updateTooltipMessage();\n            this._ngZone.runOutsideAngular(() => {\n                // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n                // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n                // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n                // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n                Promise.resolve().then(() => {\n                    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n                });\n            });\n        }\n    }\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n    get tooltipClass() { return this._tooltipClass; }\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    ngAfterViewInit() {\n        // This needs to happen after view init so the initial values for all inputs have been set.\n        this._viewInitialized = true;\n        this._setupPointerEnterEventsIfNeeded();\n        this._focusMonitor.monitor(this._elementRef)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                this._ngZone.run(() => this.hide(0));\n            }\n            else if (origin === 'keyboard') {\n                this._ngZone.run(() => this.show());\n            }\n        });\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n    ngOnDestroy() {\n        const nativeElement = this._elementRef.nativeElement;\n        clearTimeout(this._touchstartTimeout);\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        nativeElement.removeEventListener('keydown', this._handleKeydown);\n        this._passiveListeners.forEach(([event, listener]) => {\n            nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n        });\n        this._passiveListeners.length = 0;\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n        this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n    show(delay = this.showDelay) {\n        if (this.disabled || !this.message || (this._isTooltipVisible() &&\n            !this._tooltipInstance._showTimeoutId && !this._tooltipInstance._hideTimeoutId)) {\n            return;\n        }\n        const overlayRef = this._createOverlay();\n        this._detach();\n        this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n        this._tooltipInstance = overlayRef.attach(this._portal).instance;\n        this._tooltipInstance.afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage();\n        this._tooltipInstance.show(delay);\n    }\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n    hide(delay = this.hideDelay) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.hide(delay);\n        }\n    }\n    /** Shows/hides the tooltip */\n    toggle() {\n        this._isTooltipVisible() ? this.hide() : this.show();\n    }\n    /** Returns true if the tooltip is currently visible to the user */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /** Create the overlay config and position strategy */\n    _createOverlay() {\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n        const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._elementRef)\n            .withTransformOriginOn('.mat-tooltip')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide(0));\n                }\n            }\n        });\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: TOOLTIP_PANEL_CLASS,\n            scrollStrategy: this._scrollStrategy()\n        });\n        this._updatePosition();\n        this._overlayRef.detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        return this._overlayRef;\n    }\n    /** Detaches the currently-attached tooltip. */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /** Updates the position of the current tooltip. */\n    _updatePosition() {\n        const position = this._overlayRef.getConfig().positionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n        position.withPositions([\n            Object.assign(Object.assign({}, origin.main), overlay.main),\n            Object.assign(Object.assign({}, origin.fallback), overlay.fallback)\n        ]);\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y }\n        };\n    }\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y }\n        };\n    }\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                if (this._tooltipInstance) {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n    }\n    /** Updates the tooltip class */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /** Inverts an overlay position. */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n    /** Binds the pointer events to the tooltip trigger. */\n    _setupPointerEnterEventsIfNeeded() {\n        // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n        if (this._disabled || !this.message || !this._viewInitialized ||\n            this._passiveListeners.length) {\n            return;\n        }\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (this._platformSupportsMouseEvents()) {\n            this._passiveListeners\n                .push(['mouseenter', () => {\n                    this._setupPointerExitEventsIfNeeded();\n                    this.show();\n                }]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            this._passiveListeners\n                .push(['touchstart', () => {\n                    // Note that it's important that we don't `preventDefault` here,\n                    // because it can prevent click events from firing on the element.\n                    this._setupPointerExitEventsIfNeeded();\n                    clearTimeout(this._touchstartTimeout);\n                    this._touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n                }]);\n        }\n        this._addListeners(this._passiveListeners);\n    }\n    _setupPointerExitEventsIfNeeded() {\n        if (this._pointerExitEventsInitialized) {\n            return;\n        }\n        this._pointerExitEventsInitialized = true;\n        const exitListeners = [];\n        if (this._platformSupportsMouseEvents()) {\n            exitListeners.push(['mouseleave', () => this.hide()], ['wheel', event => this._wheelListener(event)]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            const touchendListener = () => {\n                clearTimeout(this._touchstartTimeout);\n                this.hide(this._defaultOptions.touchendHideDelay);\n            };\n            exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n        }\n        this._addListeners(exitListeners);\n        this._passiveListeners.push(...exitListeners);\n    }\n    _addListeners(listeners) {\n        listeners.forEach(([event, listener]) => {\n            this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n        });\n    }\n    _platformSupportsMouseEvents() {\n        return !this._platform.IOS && !this._platform.ANDROID;\n    }\n    /** Listener for the `wheel` event on the element. */\n    _wheelListener(event) {\n        if (this._isTooltipVisible()) {\n            // @breaking-change 11.0.0 Remove `|| document` once the document is a required param.\n            const doc = this._document || document;\n            const elementUnderPointer = doc.elementFromPoint(event.clientX, event.clientY);\n            const element = this._elementRef.nativeElement;\n            // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n            // won't fire if the user scrolls away using the wheel without moving their cursor. We\n            // work around it by finding the element under the user's cursor and closing the tooltip\n            // if it's not the trigger.\n            if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n                this.hide();\n            }\n        }\n    }\n    /** Disables the native browser gestures, based on how the tooltip has been configured. */\n    _disableNativeGesturesIfNecessary() {\n        const gestures = this.touchGestures;\n        if (gestures !== 'off') {\n            const element = this._elementRef.nativeElement;\n            const style = element.style;\n            // If gestures are set to `auto`, we don't disable text selection on inputs and\n            // textareas, because it prevents the user from typing into them on iOS Safari.\n            if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n                style.userSelect = style.msUserSelect = style.webkitUserSelect =\n                    style.MozUserSelect = 'none';\n            }\n            // If we have `auto` gestures and the element uses native HTML dragging,\n            // we don't set `-webkit-user-drag` because it prevents the native behavior.\n            if (gestures === 'on' || !element.draggable) {\n                style.webkitUserDrag = 'none';\n            }\n            style.touchAction = 'none';\n            style.webkitTapHighlightColor = 'transparent';\n        }\n    }\n}\nMatTooltip.ɵfac = function MatTooltip_Factory(t) { return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nMatTooltip.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTooltip, selectors: [[\"\", \"matTooltip\", \"\"]], hostAttrs: [1, \"mat-tooltip-trigger\"], inputs: { showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"], position: [\"matTooltipPosition\", \"position\"], disabled: [\"matTooltipDisabled\", \"disabled\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] }, exportAs: [\"matTooltip\"] });\nMatTooltip.ctorParameters = () => [\n    { type: Overlay },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: AriaDescriber },\n    { type: FocusMonitor },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_TOOLTIP_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_TOOLTIP_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nMatTooltip.propDecorators = {\n    position: [{ type: Input, args: ['matTooltipPosition',] }],\n    disabled: [{ type: Input, args: ['matTooltipDisabled',] }],\n    showDelay: [{ type: Input, args: ['matTooltipShowDelay',] }],\n    hideDelay: [{ type: Input, args: ['matTooltipHideDelay',] }],\n    touchGestures: [{ type: Input, args: ['matTooltipTouchGestures',] }],\n    message: [{ type: Input, args: ['matTooltip',] }],\n    tooltipClass: [{ type: Input, args: ['matTooltipClass',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltip, [{\n        type: Directive,\n        args: [{\n                selector: '[matTooltip]',\n                exportAs: 'matTooltip',\n                host: {\n                    'class': 'mat-tooltip-trigger'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.ScrollDispatcher }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.Platform }, { type: ɵngcc4.AriaDescriber }, { type: ɵngcc4.FocusMonitor }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc5.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { showDelay: [{\n            type: Input,\n            args: ['matTooltipShowDelay']\n        }], hideDelay: [{\n            type: Input,\n            args: ['matTooltipHideDelay']\n        }], touchGestures: [{\n            type: Input,\n            args: ['matTooltipTouchGestures']\n        }], position: [{\n            type: Input,\n            args: ['matTooltipPosition']\n        }], disabled: [{\n            type: Input,\n            args: ['matTooltipDisabled']\n        }], message: [{\n            type: Input,\n            args: ['matTooltip']\n        }], tooltipClass: [{\n            type: Input,\n            args: ['matTooltipClass']\n        }] }); })();\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nclass TooltipComponent {\n    constructor(_changeDetectorRef, _breakpointObserver) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._breakpointObserver = _breakpointObserver;\n        /** Property watched by the animation framework to show or hide the tooltip */\n        this._visibility = 'initial';\n        /** Whether interactions on the page should close the tooltip */\n        this._closeOnInteraction = false;\n        /** Subject for notifying that the tooltip has been hidden from the view */\n        this._onHide = new Subject();\n        /** Stream that emits whether the user has a handset-sized display.  */\n        this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        if (this._hideTimeoutId) {\n            clearTimeout(this._hideTimeoutId);\n            this._hideTimeoutId = null;\n        }\n        // Body interactions should cancel the tooltip if there is a delay in showing.\n        this._closeOnInteraction = true;\n        this._showTimeoutId = setTimeout(() => {\n            this._visibility = 'visible';\n            this._showTimeoutId = null;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        if (this._showTimeoutId) {\n            clearTimeout(this._showTimeoutId);\n            this._showTimeoutId = null;\n        }\n        this._hideTimeoutId = setTimeout(() => {\n            this._visibility = 'hidden';\n            this._hideTimeoutId = null;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, delay);\n    }\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden() {\n        return this._onHide;\n    }\n    /** Whether the tooltip is being displayed. */\n    isVisible() {\n        return this._visibility === 'visible';\n    }\n    ngOnDestroy() {\n        this._onHide.complete();\n    }\n    _animationStart() {\n        this._closeOnInteraction = false;\n    }\n    _animationDone(event) {\n        const toState = event.toState;\n        if (toState === 'hidden' && !this.isVisible()) {\n            this._onHide.next();\n        }\n        if (toState === 'visible' || toState === 'hidden') {\n            this._closeOnInteraction = true;\n        }\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n}\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) { return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver)); };\nTooltipComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TooltipComponent, selectors: [[\"mat-tooltip-component\"]], hostAttrs: [\"aria-hidden\", \"true\"], hostVars: 2, hostBindings: function TooltipComponent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function TooltipComponent_click_HostBindingHandler() { return ctx._handleBodyInteraction(); }, false, ɵngcc0.ɵɵresolveBody)(\"auxclick\", function TooltipComponent_auxclick_HostBindingHandler() { return ctx._handleBodyInteraction(); }, false, ɵngcc0.ɵɵresolveBody);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n    } }, decls: 3, vars: 7, consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]], template: function TooltipComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() { return ctx._animationStart(); })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) { return ctx._animationDone($event); });\n        ɵngcc0.ɵɵpipe(1, \"async\");\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        let tmp_0_0 = null;\n        ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.message);\n    } }, directives: [ɵngcc7.NgClass], pipes: [ɵngcc7.AsyncPipe], styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"], encapsulation: 2, data: { animation: [matTooltipAnimations.tooltipState] }, changeDetection: 0 });\nTooltipComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: BreakpointObserver }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TooltipComponent, [{\n        type: Component,\n        args: [{\n                selector: 'mat-tooltip-component',\n                template: \"<div class=\\\"mat-tooltip\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\"\\n     [@state]=\\\"_visibility\\\"\\n     (@state.start)=\\\"_animationStart()\\\"\\n     (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                animations: [matTooltipAnimations.tooltipState],\n                host: {\n                    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n                    '(body:click)': 'this._handleBodyInteraction()',\n                    '(body:auxclick)': 'this._handleBodyInteraction()',\n                    'aria-hidden': 'true'\n                },\n                styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc6.BreakpointObserver }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatTooltipModule {\n}\nMatTooltipModule.ɵfac = function MatTooltipModule_Factory(t) { return new (t || MatTooltipModule)(); };\nMatTooltipModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatTooltipModule });\nMatTooltipModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[\n            A11yModule,\n            CommonModule,\n            OverlayModule,\n            MatCommonModule,\n        ], MatCommonModule, CdkScrollableModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, { declarations: function () { return [MatTooltip, TooltipComponent]; }, imports: function () { return [A11yModule,\n        CommonModule,\n        OverlayModule,\n        MatCommonModule]; }, exports: function () { return [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltipModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    CommonModule,\n                    OverlayModule,\n                    MatCommonModule,\n                ],\n                exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n                declarations: [MatTooltip, TooltipComponent],\n                entryComponents: [TooltipComponent],\n                providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, getMatTooltipInvalidPositionError, matTooltipAnimations };\n\n//# sourceMappingURL=tooltip.js.map"]},"metadata":{},"sourceType":"module"}